@file:Suppress("DuplicatedCode")

import kotlinx.serialization.ExperimentalSerializationApi
import kotlinx.serialization.KSerializer
import kotlinx.serialization.descriptors.SerialDescriptor
import kotlinx.serialization.descriptors.buildClassSerialDescriptor
import kotlinx.serialization.encoding.CompositeDecoder
import kotlinx.serialization.encoding.Decoder
import kotlinx.serialization.encoding.Encoder
import kotlinx.serialization.encoding.decodeStructure
import kotlinx.serialization.encoding.encodeStructure
import kotlin.reflect.KProperty1

// This file is generated by a script


@OptIn(ExperimentalSerializationApi::class)
data class Property<T, R>(
    val name: String,
    val serializer: KSerializer<R>,
    val generator: (T) -> R,
) {
    constructor(property: KProperty1<T, R>, serializer: KSerializer<R>) : this(property.name, serializer, property)
}

open class ClassKSerializer0<T>(
    private val descriptorName: String,
    private val build: () -> T,
) : KSerializer<T> {
    final override val descriptor: SerialDescriptor = buildClassSerialDescriptor(descriptorName) {
    }

    final override fun serialize(encoder: Encoder, value: T) = encoder.encodeStructure(descriptor) {
    }

    @OptIn(ExperimentalSerializationApi::class)
    final override fun deserialize(decoder: Decoder): T = decoder.decodeStructure(descriptor) {
        build()
    }
}

fun <T> classSerializer(
    descriptorName: String,
    build: () -> T,
) : KSerializer<T> = ClassKSerializer0(
    descriptorName,
    build,
)

open class ClassKSerializer1<T, R1>(
    private val descriptorName: String,
    private val serializerPart1: Property<T, R1>,
    private val build: (R1) -> T,
) : KSerializer<T> {
    final override val descriptor: SerialDescriptor = buildClassSerialDescriptor(descriptorName) {
        element(serializerPart1.name, serializerPart1.serializer.descriptor)
    }

    final override fun serialize(encoder: Encoder, value: T) = encoder.encodeStructure(descriptor) {
        encodeSerializableElement(descriptor, 0, serializerPart1.serializer, serializerPart1.generator(value))
    }

    @OptIn(ExperimentalSerializationApi::class)
    final override fun deserialize(decoder: Decoder): T = decoder.decodeStructure(descriptor) {
        if (decodeSequentially()) {
            build(
                decodeSerializableElement(descriptor, 0, serializerPart1.serializer),
            )
        } else {
            var value1: R1? = null
            while (true) {
                when (val index = decodeElementIndex(descriptor)) {
                    0 -> value1 = decodeSerializableElement(descriptor, 0, serializerPart1.serializer)
                    CompositeDecoder.DECODE_DONE -> break
                    else -> error("Unexpected index: $index")
                }
            }
            return@decodeStructure build(
                value1 ?: error("Absent field: ${serializerPart1.name}"),
            )
        }
    }
}

fun <T, R1> classSerializer(
    descriptorName: String,
    serializerPart1: Property<T, R1>,
    build: (R1) -> T,
) : KSerializer<T> = ClassKSerializer1(
    descriptorName,
    serializerPart1,
    build,
)

open class ClassKSerializer2<T, R1, R2>(
    private val descriptorName: String,
    private val serializerPart1: Property<T, R1>,
    private val serializerPart2: Property<T, R2>,
    private val build: (R1, R2) -> T,
) : KSerializer<T> {
    final override val descriptor: SerialDescriptor = buildClassSerialDescriptor(descriptorName) {
        element(serializerPart1.name, serializerPart1.serializer.descriptor)
        element(serializerPart2.name, serializerPart2.serializer.descriptor)
    }

    final override fun serialize(encoder: Encoder, value: T) = encoder.encodeStructure(descriptor) {
        encodeSerializableElement(descriptor, 0, serializerPart1.serializer, serializerPart1.generator(value))
        encodeSerializableElement(descriptor, 1, serializerPart2.serializer, serializerPart2.generator(value))
    }

    @OptIn(ExperimentalSerializationApi::class)
    final override fun deserialize(decoder: Decoder): T = decoder.decodeStructure(descriptor) {
        if (decodeSequentially()) {
            build(
                decodeSerializableElement(descriptor, 0, serializerPart1.serializer),
                decodeSerializableElement(descriptor, 1, serializerPart2.serializer),
            )
        } else {
            var value1: R1? = null
            var value2: R2? = null
            while (true) {
                when (val index = decodeElementIndex(descriptor)) {
                    0 -> value1 = decodeSerializableElement(descriptor, 0, serializerPart1.serializer)
                    1 -> value2 = decodeSerializableElement(descriptor, 1, serializerPart2.serializer)
                    CompositeDecoder.DECODE_DONE -> break
                    else -> error("Unexpected index: $index")
                }
            }
            return@decodeStructure build(
                value1 ?: error("Absent field: ${serializerPart1.name}"),
                value2 ?: error("Absent field: ${serializerPart2.name}"),
            )
        }
    }
}

fun <T, R1, R2> classSerializer(
    descriptorName: String,
    serializerPart1: Property<T, R1>,
    serializerPart2: Property<T, R2>,
    build: (R1, R2) -> T,
) : KSerializer<T> = ClassKSerializer2(
    descriptorName,
    serializerPart1,
    serializerPart2,
    build,
)

open class ClassKSerializer3<T, R1, R2, R3>(
    private val descriptorName: String,
    private val serializerPart1: Property<T, R1>,
    private val serializerPart2: Property<T, R2>,
    private val serializerPart3: Property<T, R3>,
    private val build: (R1, R2, R3) -> T,
) : KSerializer<T> {
    final override val descriptor: SerialDescriptor = buildClassSerialDescriptor(descriptorName) {
        element(serializerPart1.name, serializerPart1.serializer.descriptor)
        element(serializerPart2.name, serializerPart2.serializer.descriptor)
        element(serializerPart3.name, serializerPart3.serializer.descriptor)
    }

    final override fun serialize(encoder: Encoder, value: T) = encoder.encodeStructure(descriptor) {
        encodeSerializableElement(descriptor, 0, serializerPart1.serializer, serializerPart1.generator(value))
        encodeSerializableElement(descriptor, 1, serializerPart2.serializer, serializerPart2.generator(value))
        encodeSerializableElement(descriptor, 2, serializerPart3.serializer, serializerPart3.generator(value))
    }

    @OptIn(ExperimentalSerializationApi::class)
    final override fun deserialize(decoder: Decoder): T = decoder.decodeStructure(descriptor) {
        if (decodeSequentially()) {
            build(
                decodeSerializableElement(descriptor, 0, serializerPart1.serializer),
                decodeSerializableElement(descriptor, 1, serializerPart2.serializer),
                decodeSerializableElement(descriptor, 2, serializerPart3.serializer),
            )
        } else {
            var value1: R1? = null
            var value2: R2? = null
            var value3: R3? = null
            while (true) {
                when (val index = decodeElementIndex(descriptor)) {
                    0 -> value1 = decodeSerializableElement(descriptor, 0, serializerPart1.serializer)
                    1 -> value2 = decodeSerializableElement(descriptor, 1, serializerPart2.serializer)
                    2 -> value3 = decodeSerializableElement(descriptor, 2, serializerPart3.serializer)
                    CompositeDecoder.DECODE_DONE -> break
                    else -> error("Unexpected index: $index")
                }
            }
            return@decodeStructure build(
                value1 ?: error("Absent field: ${serializerPart1.name}"),
                value2 ?: error("Absent field: ${serializerPart2.name}"),
                value3 ?: error("Absent field: ${serializerPart3.name}"),
            )
        }
    }
}

fun <T, R1, R2, R3> classSerializer(
    descriptorName: String,
    serializerPart1: Property<T, R1>,
    serializerPart2: Property<T, R2>,
    serializerPart3: Property<T, R3>,
    build: (R1, R2, R3) -> T,
) : KSerializer<T> = ClassKSerializer3(
    descriptorName,
    serializerPart1,
    serializerPart2,
    serializerPart3,
    build,
)

open class ClassKSerializer4<T, R1, R2, R3, R4>(
    private val descriptorName: String,
    private val serializerPart1: Property<T, R1>,
    private val serializerPart2: Property<T, R2>,
    private val serializerPart3: Property<T, R3>,
    private val serializerPart4: Property<T, R4>,
    private val build: (R1, R2, R3, R4) -> T,
) : KSerializer<T> {
    final override val descriptor: SerialDescriptor = buildClassSerialDescriptor(descriptorName) {
        element(serializerPart1.name, serializerPart1.serializer.descriptor)
        element(serializerPart2.name, serializerPart2.serializer.descriptor)
        element(serializerPart3.name, serializerPart3.serializer.descriptor)
        element(serializerPart4.name, serializerPart4.serializer.descriptor)
    }

    final override fun serialize(encoder: Encoder, value: T) = encoder.encodeStructure(descriptor) {
        encodeSerializableElement(descriptor, 0, serializerPart1.serializer, serializerPart1.generator(value))
        encodeSerializableElement(descriptor, 1, serializerPart2.serializer, serializerPart2.generator(value))
        encodeSerializableElement(descriptor, 2, serializerPart3.serializer, serializerPart3.generator(value))
        encodeSerializableElement(descriptor, 3, serializerPart4.serializer, serializerPart4.generator(value))
    }

    @OptIn(ExperimentalSerializationApi::class)
    final override fun deserialize(decoder: Decoder): T = decoder.decodeStructure(descriptor) {
        if (decodeSequentially()) {
            build(
                decodeSerializableElement(descriptor, 0, serializerPart1.serializer),
                decodeSerializableElement(descriptor, 1, serializerPart2.serializer),
                decodeSerializableElement(descriptor, 2, serializerPart3.serializer),
                decodeSerializableElement(descriptor, 3, serializerPart4.serializer),
            )
        } else {
            var value1: R1? = null
            var value2: R2? = null
            var value3: R3? = null
            var value4: R4? = null
            while (true) {
                when (val index = decodeElementIndex(descriptor)) {
                    0 -> value1 = decodeSerializableElement(descriptor, 0, serializerPart1.serializer)
                    1 -> value2 = decodeSerializableElement(descriptor, 1, serializerPart2.serializer)
                    2 -> value3 = decodeSerializableElement(descriptor, 2, serializerPart3.serializer)
                    3 -> value4 = decodeSerializableElement(descriptor, 3, serializerPart4.serializer)
                    CompositeDecoder.DECODE_DONE -> break
                    else -> error("Unexpected index: $index")
                }
            }
            return@decodeStructure build(
                value1 ?: error("Absent field: ${serializerPart1.name}"),
                value2 ?: error("Absent field: ${serializerPart2.name}"),
                value3 ?: error("Absent field: ${serializerPart3.name}"),
                value4 ?: error("Absent field: ${serializerPart4.name}"),
            )
        }
    }
}

fun <T, R1, R2, R3, R4> classSerializer(
    descriptorName: String,
    serializerPart1: Property<T, R1>,
    serializerPart2: Property<T, R2>,
    serializerPart3: Property<T, R3>,
    serializerPart4: Property<T, R4>,
    build: (R1, R2, R3, R4) -> T,
) : KSerializer<T> = ClassKSerializer4(
    descriptorName,
    serializerPart1,
    serializerPart2,
    serializerPart3,
    serializerPart4,
    build,
)

open class ClassKSerializer5<T, R1, R2, R3, R4, R5>(
    private val descriptorName: String,
    private val serializerPart1: Property<T, R1>,
    private val serializerPart2: Property<T, R2>,
    private val serializerPart3: Property<T, R3>,
    private val serializerPart4: Property<T, R4>,
    private val serializerPart5: Property<T, R5>,
    private val build: (R1, R2, R3, R4, R5) -> T,
) : KSerializer<T> {
    final override val descriptor: SerialDescriptor = buildClassSerialDescriptor(descriptorName) {
        element(serializerPart1.name, serializerPart1.serializer.descriptor)
        element(serializerPart2.name, serializerPart2.serializer.descriptor)
        element(serializerPart3.name, serializerPart3.serializer.descriptor)
        element(serializerPart4.name, serializerPart4.serializer.descriptor)
        element(serializerPart5.name, serializerPart5.serializer.descriptor)
    }

    final override fun serialize(encoder: Encoder, value: T) = encoder.encodeStructure(descriptor) {
        encodeSerializableElement(descriptor, 0, serializerPart1.serializer, serializerPart1.generator(value))
        encodeSerializableElement(descriptor, 1, serializerPart2.serializer, serializerPart2.generator(value))
        encodeSerializableElement(descriptor, 2, serializerPart3.serializer, serializerPart3.generator(value))
        encodeSerializableElement(descriptor, 3, serializerPart4.serializer, serializerPart4.generator(value))
        encodeSerializableElement(descriptor, 4, serializerPart5.serializer, serializerPart5.generator(value))
    }

    @OptIn(ExperimentalSerializationApi::class)
    final override fun deserialize(decoder: Decoder): T = decoder.decodeStructure(descriptor) {
        if (decodeSequentially()) {
            build(
                decodeSerializableElement(descriptor, 0, serializerPart1.serializer),
                decodeSerializableElement(descriptor, 1, serializerPart2.serializer),
                decodeSerializableElement(descriptor, 2, serializerPart3.serializer),
                decodeSerializableElement(descriptor, 3, serializerPart4.serializer),
                decodeSerializableElement(descriptor, 4, serializerPart5.serializer),
            )
        } else {
            var value1: R1? = null
            var value2: R2? = null
            var value3: R3? = null
            var value4: R4? = null
            var value5: R5? = null
            while (true) {
                when (val index = decodeElementIndex(descriptor)) {
                    0 -> value1 = decodeSerializableElement(descriptor, 0, serializerPart1.serializer)
                    1 -> value2 = decodeSerializableElement(descriptor, 1, serializerPart2.serializer)
                    2 -> value3 = decodeSerializableElement(descriptor, 2, serializerPart3.serializer)
                    3 -> value4 = decodeSerializableElement(descriptor, 3, serializerPart4.serializer)
                    4 -> value5 = decodeSerializableElement(descriptor, 4, serializerPart5.serializer)
                    CompositeDecoder.DECODE_DONE -> break
                    else -> error("Unexpected index: $index")
                }
            }
            return@decodeStructure build(
                value1 ?: error("Absent field: ${serializerPart1.name}"),
                value2 ?: error("Absent field: ${serializerPart2.name}"),
                value3 ?: error("Absent field: ${serializerPart3.name}"),
                value4 ?: error("Absent field: ${serializerPart4.name}"),
                value5 ?: error("Absent field: ${serializerPart5.name}"),
            )
        }
    }
}

fun <T, R1, R2, R3, R4, R5> classSerializer(
    descriptorName: String,
    serializerPart1: Property<T, R1>,
    serializerPart2: Property<T, R2>,
    serializerPart3: Property<T, R3>,
    serializerPart4: Property<T, R4>,
    serializerPart5: Property<T, R5>,
    build: (R1, R2, R3, R4, R5) -> T,
) : KSerializer<T> = ClassKSerializer5(
    descriptorName,
    serializerPart1,
    serializerPart2,
    serializerPart3,
    serializerPart4,
    serializerPart5,
    build,
)

open class ClassKSerializer6<T, R1, R2, R3, R4, R5, R6>(
    private val descriptorName: String,
    private val serializerPart1: Property<T, R1>,
    private val serializerPart2: Property<T, R2>,
    private val serializerPart3: Property<T, R3>,
    private val serializerPart4: Property<T, R4>,
    private val serializerPart5: Property<T, R5>,
    private val serializerPart6: Property<T, R6>,
    private val build: (R1, R2, R3, R4, R5, R6) -> T,
) : KSerializer<T> {
    final override val descriptor: SerialDescriptor = buildClassSerialDescriptor(descriptorName) {
        element(serializerPart1.name, serializerPart1.serializer.descriptor)
        element(serializerPart2.name, serializerPart2.serializer.descriptor)
        element(serializerPart3.name, serializerPart3.serializer.descriptor)
        element(serializerPart4.name, serializerPart4.serializer.descriptor)
        element(serializerPart5.name, serializerPart5.serializer.descriptor)
        element(serializerPart6.name, serializerPart6.serializer.descriptor)
    }

    final override fun serialize(encoder: Encoder, value: T) = encoder.encodeStructure(descriptor) {
        encodeSerializableElement(descriptor, 0, serializerPart1.serializer, serializerPart1.generator(value))
        encodeSerializableElement(descriptor, 1, serializerPart2.serializer, serializerPart2.generator(value))
        encodeSerializableElement(descriptor, 2, serializerPart3.serializer, serializerPart3.generator(value))
        encodeSerializableElement(descriptor, 3, serializerPart4.serializer, serializerPart4.generator(value))
        encodeSerializableElement(descriptor, 4, serializerPart5.serializer, serializerPart5.generator(value))
        encodeSerializableElement(descriptor, 5, serializerPart6.serializer, serializerPart6.generator(value))
    }

    @OptIn(ExperimentalSerializationApi::class)
    final override fun deserialize(decoder: Decoder): T = decoder.decodeStructure(descriptor) {
        if (decodeSequentially()) {
            build(
                decodeSerializableElement(descriptor, 0, serializerPart1.serializer),
                decodeSerializableElement(descriptor, 1, serializerPart2.serializer),
                decodeSerializableElement(descriptor, 2, serializerPart3.serializer),
                decodeSerializableElement(descriptor, 3, serializerPart4.serializer),
                decodeSerializableElement(descriptor, 4, serializerPart5.serializer),
                decodeSerializableElement(descriptor, 5, serializerPart6.serializer),
            )
        } else {
            var value1: R1? = null
            var value2: R2? = null
            var value3: R3? = null
            var value4: R4? = null
            var value5: R5? = null
            var value6: R6? = null
            while (true) {
                when (val index = decodeElementIndex(descriptor)) {
                    0 -> value1 = decodeSerializableElement(descriptor, 0, serializerPart1.serializer)
                    1 -> value2 = decodeSerializableElement(descriptor, 1, serializerPart2.serializer)
                    2 -> value3 = decodeSerializableElement(descriptor, 2, serializerPart3.serializer)
                    3 -> value4 = decodeSerializableElement(descriptor, 3, serializerPart4.serializer)
                    4 -> value5 = decodeSerializableElement(descriptor, 4, serializerPart5.serializer)
                    5 -> value6 = decodeSerializableElement(descriptor, 5, serializerPart6.serializer)
                    CompositeDecoder.DECODE_DONE -> break
                    else -> error("Unexpected index: $index")
                }
            }
            return@decodeStructure build(
                value1 ?: error("Absent field: ${serializerPart1.name}"),
                value2 ?: error("Absent field: ${serializerPart2.name}"),
                value3 ?: error("Absent field: ${serializerPart3.name}"),
                value4 ?: error("Absent field: ${serializerPart4.name}"),
                value5 ?: error("Absent field: ${serializerPart5.name}"),
                value6 ?: error("Absent field: ${serializerPart6.name}"),
            )
        }
    }
}

fun <T, R1, R2, R3, R4, R5, R6> classSerializer(
    descriptorName: String,
    serializerPart1: Property<T, R1>,
    serializerPart2: Property<T, R2>,
    serializerPart3: Property<T, R3>,
    serializerPart4: Property<T, R4>,
    serializerPart5: Property<T, R5>,
    serializerPart6: Property<T, R6>,
    build: (R1, R2, R3, R4, R5, R6) -> T,
) : KSerializer<T> = ClassKSerializer6(
    descriptorName,
    serializerPart1,
    serializerPart2,
    serializerPart3,
    serializerPart4,
    serializerPart5,
    serializerPart6,
    build,
)

open class ClassKSerializer7<T, R1, R2, R3, R4, R5, R6, R7>(
    private val descriptorName: String,
    private val serializerPart1: Property<T, R1>,
    private val serializerPart2: Property<T, R2>,
    private val serializerPart3: Property<T, R3>,
    private val serializerPart4: Property<T, R4>,
    private val serializerPart5: Property<T, R5>,
    private val serializerPart6: Property<T, R6>,
    private val serializerPart7: Property<T, R7>,
    private val build: (R1, R2, R3, R4, R5, R6, R7) -> T,
) : KSerializer<T> {
    final override val descriptor: SerialDescriptor = buildClassSerialDescriptor(descriptorName) {
        element(serializerPart1.name, serializerPart1.serializer.descriptor)
        element(serializerPart2.name, serializerPart2.serializer.descriptor)
        element(serializerPart3.name, serializerPart3.serializer.descriptor)
        element(serializerPart4.name, serializerPart4.serializer.descriptor)
        element(serializerPart5.name, serializerPart5.serializer.descriptor)
        element(serializerPart6.name, serializerPart6.serializer.descriptor)
        element(serializerPart7.name, serializerPart7.serializer.descriptor)
    }

    final override fun serialize(encoder: Encoder, value: T) = encoder.encodeStructure(descriptor) {
        encodeSerializableElement(descriptor, 0, serializerPart1.serializer, serializerPart1.generator(value))
        encodeSerializableElement(descriptor, 1, serializerPart2.serializer, serializerPart2.generator(value))
        encodeSerializableElement(descriptor, 2, serializerPart3.serializer, serializerPart3.generator(value))
        encodeSerializableElement(descriptor, 3, serializerPart4.serializer, serializerPart4.generator(value))
        encodeSerializableElement(descriptor, 4, serializerPart5.serializer, serializerPart5.generator(value))
        encodeSerializableElement(descriptor, 5, serializerPart6.serializer, serializerPart6.generator(value))
        encodeSerializableElement(descriptor, 6, serializerPart7.serializer, serializerPart7.generator(value))
    }

    @OptIn(ExperimentalSerializationApi::class)
    final override fun deserialize(decoder: Decoder): T = decoder.decodeStructure(descriptor) {
        if (decodeSequentially()) {
            build(
                decodeSerializableElement(descriptor, 0, serializerPart1.serializer),
                decodeSerializableElement(descriptor, 1, serializerPart2.serializer),
                decodeSerializableElement(descriptor, 2, serializerPart3.serializer),
                decodeSerializableElement(descriptor, 3, serializerPart4.serializer),
                decodeSerializableElement(descriptor, 4, serializerPart5.serializer),
                decodeSerializableElement(descriptor, 5, serializerPart6.serializer),
                decodeSerializableElement(descriptor, 6, serializerPart7.serializer),
            )
        } else {
            var value1: R1? = null
            var value2: R2? = null
            var value3: R3? = null
            var value4: R4? = null
            var value5: R5? = null
            var value6: R6? = null
            var value7: R7? = null
            while (true) {
                when (val index = decodeElementIndex(descriptor)) {
                    0 -> value1 = decodeSerializableElement(descriptor, 0, serializerPart1.serializer)
                    1 -> value2 = decodeSerializableElement(descriptor, 1, serializerPart2.serializer)
                    2 -> value3 = decodeSerializableElement(descriptor, 2, serializerPart3.serializer)
                    3 -> value4 = decodeSerializableElement(descriptor, 3, serializerPart4.serializer)
                    4 -> value5 = decodeSerializableElement(descriptor, 4, serializerPart5.serializer)
                    5 -> value6 = decodeSerializableElement(descriptor, 5, serializerPart6.serializer)
                    6 -> value7 = decodeSerializableElement(descriptor, 6, serializerPart7.serializer)
                    CompositeDecoder.DECODE_DONE -> break
                    else -> error("Unexpected index: $index")
                }
            }
            return@decodeStructure build(
                value1 ?: error("Absent field: ${serializerPart1.name}"),
                value2 ?: error("Absent field: ${serializerPart2.name}"),
                value3 ?: error("Absent field: ${serializerPart3.name}"),
                value4 ?: error("Absent field: ${serializerPart4.name}"),
                value5 ?: error("Absent field: ${serializerPart5.name}"),
                value6 ?: error("Absent field: ${serializerPart6.name}"),
                value7 ?: error("Absent field: ${serializerPart7.name}"),
            )
        }
    }
}

fun <T, R1, R2, R3, R4, R5, R6, R7> classSerializer(
    descriptorName: String,
    serializerPart1: Property<T, R1>,
    serializerPart2: Property<T, R2>,
    serializerPart3: Property<T, R3>,
    serializerPart4: Property<T, R4>,
    serializerPart5: Property<T, R5>,
    serializerPart6: Property<T, R6>,
    serializerPart7: Property<T, R7>,
    build: (R1, R2, R3, R4, R5, R6, R7) -> T,
) : KSerializer<T> = ClassKSerializer7(
    descriptorName,
    serializerPart1,
    serializerPart2,
    serializerPart3,
    serializerPart4,
    serializerPart5,
    serializerPart6,
    serializerPart7,
    build,
)

open class ClassKSerializer8<T, R1, R2, R3, R4, R5, R6, R7, R8>(
    private val descriptorName: String,
    private val serializerPart1: Property<T, R1>,
    private val serializerPart2: Property<T, R2>,
    private val serializerPart3: Property<T, R3>,
    private val serializerPart4: Property<T, R4>,
    private val serializerPart5: Property<T, R5>,
    private val serializerPart6: Property<T, R6>,
    private val serializerPart7: Property<T, R7>,
    private val serializerPart8: Property<T, R8>,
    private val build: (R1, R2, R3, R4, R5, R6, R7, R8) -> T,
) : KSerializer<T> {
    final override val descriptor: SerialDescriptor = buildClassSerialDescriptor(descriptorName) {
        element(serializerPart1.name, serializerPart1.serializer.descriptor)
        element(serializerPart2.name, serializerPart2.serializer.descriptor)
        element(serializerPart3.name, serializerPart3.serializer.descriptor)
        element(serializerPart4.name, serializerPart4.serializer.descriptor)
        element(serializerPart5.name, serializerPart5.serializer.descriptor)
        element(serializerPart6.name, serializerPart6.serializer.descriptor)
        element(serializerPart7.name, serializerPart7.serializer.descriptor)
        element(serializerPart8.name, serializerPart8.serializer.descriptor)
    }

    final override fun serialize(encoder: Encoder, value: T) = encoder.encodeStructure(descriptor) {
        encodeSerializableElement(descriptor, 0, serializerPart1.serializer, serializerPart1.generator(value))
        encodeSerializableElement(descriptor, 1, serializerPart2.serializer, serializerPart2.generator(value))
        encodeSerializableElement(descriptor, 2, serializerPart3.serializer, serializerPart3.generator(value))
        encodeSerializableElement(descriptor, 3, serializerPart4.serializer, serializerPart4.generator(value))
        encodeSerializableElement(descriptor, 4, serializerPart5.serializer, serializerPart5.generator(value))
        encodeSerializableElement(descriptor, 5, serializerPart6.serializer, serializerPart6.generator(value))
        encodeSerializableElement(descriptor, 6, serializerPart7.serializer, serializerPart7.generator(value))
        encodeSerializableElement(descriptor, 7, serializerPart8.serializer, serializerPart8.generator(value))
    }

    @OptIn(ExperimentalSerializationApi::class)
    final override fun deserialize(decoder: Decoder): T = decoder.decodeStructure(descriptor) {
        if (decodeSequentially()) {
            build(
                decodeSerializableElement(descriptor, 0, serializerPart1.serializer),
                decodeSerializableElement(descriptor, 1, serializerPart2.serializer),
                decodeSerializableElement(descriptor, 2, serializerPart3.serializer),
                decodeSerializableElement(descriptor, 3, serializerPart4.serializer),
                decodeSerializableElement(descriptor, 4, serializerPart5.serializer),
                decodeSerializableElement(descriptor, 5, serializerPart6.serializer),
                decodeSerializableElement(descriptor, 6, serializerPart7.serializer),
                decodeSerializableElement(descriptor, 7, serializerPart8.serializer),
            )
        } else {
            var value1: R1? = null
            var value2: R2? = null
            var value3: R3? = null
            var value4: R4? = null
            var value5: R5? = null
            var value6: R6? = null
            var value7: R7? = null
            var value8: R8? = null
            while (true) {
                when (val index = decodeElementIndex(descriptor)) {
                    0 -> value1 = decodeSerializableElement(descriptor, 0, serializerPart1.serializer)
                    1 -> value2 = decodeSerializableElement(descriptor, 1, serializerPart2.serializer)
                    2 -> value3 = decodeSerializableElement(descriptor, 2, serializerPart3.serializer)
                    3 -> value4 = decodeSerializableElement(descriptor, 3, serializerPart4.serializer)
                    4 -> value5 = decodeSerializableElement(descriptor, 4, serializerPart5.serializer)
                    5 -> value6 = decodeSerializableElement(descriptor, 5, serializerPart6.serializer)
                    6 -> value7 = decodeSerializableElement(descriptor, 6, serializerPart7.serializer)
                    7 -> value8 = decodeSerializableElement(descriptor, 7, serializerPart8.serializer)
                    CompositeDecoder.DECODE_DONE -> break
                    else -> error("Unexpected index: $index")
                }
            }
            return@decodeStructure build(
                value1 ?: error("Absent field: ${serializerPart1.name}"),
                value2 ?: error("Absent field: ${serializerPart2.name}"),
                value3 ?: error("Absent field: ${serializerPart3.name}"),
                value4 ?: error("Absent field: ${serializerPart4.name}"),
                value5 ?: error("Absent field: ${serializerPart5.name}"),
                value6 ?: error("Absent field: ${serializerPart6.name}"),
                value7 ?: error("Absent field: ${serializerPart7.name}"),
                value8 ?: error("Absent field: ${serializerPart8.name}"),
            )
        }
    }
}

fun <T, R1, R2, R3, R4, R5, R6, R7, R8> classSerializer(
    descriptorName: String,
    serializerPart1: Property<T, R1>,
    serializerPart2: Property<T, R2>,
    serializerPart3: Property<T, R3>,
    serializerPart4: Property<T, R4>,
    serializerPart5: Property<T, R5>,
    serializerPart6: Property<T, R6>,
    serializerPart7: Property<T, R7>,
    serializerPart8: Property<T, R8>,
    build: (R1, R2, R3, R4, R5, R6, R7, R8) -> T,
) : KSerializer<T> = ClassKSerializer8(
    descriptorName,
    serializerPart1,
    serializerPart2,
    serializerPart3,
    serializerPart4,
    serializerPart5,
    serializerPart6,
    serializerPart7,
    serializerPart8,
    build,
)

open class ClassKSerializer9<T, R1, R2, R3, R4, R5, R6, R7, R8, R9>(
    private val descriptorName: String,
    private val serializerPart1: Property<T, R1>,
    private val serializerPart2: Property<T, R2>,
    private val serializerPart3: Property<T, R3>,
    private val serializerPart4: Property<T, R4>,
    private val serializerPart5: Property<T, R5>,
    private val serializerPart6: Property<T, R6>,
    private val serializerPart7: Property<T, R7>,
    private val serializerPart8: Property<T, R8>,
    private val serializerPart9: Property<T, R9>,
    private val build: (R1, R2, R3, R4, R5, R6, R7, R8, R9) -> T,
) : KSerializer<T> {
    final override val descriptor: SerialDescriptor = buildClassSerialDescriptor(descriptorName) {
        element(serializerPart1.name, serializerPart1.serializer.descriptor)
        element(serializerPart2.name, serializerPart2.serializer.descriptor)
        element(serializerPart3.name, serializerPart3.serializer.descriptor)
        element(serializerPart4.name, serializerPart4.serializer.descriptor)
        element(serializerPart5.name, serializerPart5.serializer.descriptor)
        element(serializerPart6.name, serializerPart6.serializer.descriptor)
        element(serializerPart7.name, serializerPart7.serializer.descriptor)
        element(serializerPart8.name, serializerPart8.serializer.descriptor)
        element(serializerPart9.name, serializerPart9.serializer.descriptor)
    }

    final override fun serialize(encoder: Encoder, value: T) = encoder.encodeStructure(descriptor) {
        encodeSerializableElement(descriptor, 0, serializerPart1.serializer, serializerPart1.generator(value))
        encodeSerializableElement(descriptor, 1, serializerPart2.serializer, serializerPart2.generator(value))
        encodeSerializableElement(descriptor, 2, serializerPart3.serializer, serializerPart3.generator(value))
        encodeSerializableElement(descriptor, 3, serializerPart4.serializer, serializerPart4.generator(value))
        encodeSerializableElement(descriptor, 4, serializerPart5.serializer, serializerPart5.generator(value))
        encodeSerializableElement(descriptor, 5, serializerPart6.serializer, serializerPart6.generator(value))
        encodeSerializableElement(descriptor, 6, serializerPart7.serializer, serializerPart7.generator(value))
        encodeSerializableElement(descriptor, 7, serializerPart8.serializer, serializerPart8.generator(value))
        encodeSerializableElement(descriptor, 8, serializerPart9.serializer, serializerPart9.generator(value))
    }

    @OptIn(ExperimentalSerializationApi::class)
    final override fun deserialize(decoder: Decoder): T = decoder.decodeStructure(descriptor) {
        if (decodeSequentially()) {
            build(
                decodeSerializableElement(descriptor, 0, serializerPart1.serializer),
                decodeSerializableElement(descriptor, 1, serializerPart2.serializer),
                decodeSerializableElement(descriptor, 2, serializerPart3.serializer),
                decodeSerializableElement(descriptor, 3, serializerPart4.serializer),
                decodeSerializableElement(descriptor, 4, serializerPart5.serializer),
                decodeSerializableElement(descriptor, 5, serializerPart6.serializer),
                decodeSerializableElement(descriptor, 6, serializerPart7.serializer),
                decodeSerializableElement(descriptor, 7, serializerPart8.serializer),
                decodeSerializableElement(descriptor, 8, serializerPart9.serializer),
            )
        } else {
            var value1: R1? = null
            var value2: R2? = null
            var value3: R3? = null
            var value4: R4? = null
            var value5: R5? = null
            var value6: R6? = null
            var value7: R7? = null
            var value8: R8? = null
            var value9: R9? = null
            while (true) {
                when (val index = decodeElementIndex(descriptor)) {
                    0 -> value1 = decodeSerializableElement(descriptor, 0, serializerPart1.serializer)
                    1 -> value2 = decodeSerializableElement(descriptor, 1, serializerPart2.serializer)
                    2 -> value3 = decodeSerializableElement(descriptor, 2, serializerPart3.serializer)
                    3 -> value4 = decodeSerializableElement(descriptor, 3, serializerPart4.serializer)
                    4 -> value5 = decodeSerializableElement(descriptor, 4, serializerPart5.serializer)
                    5 -> value6 = decodeSerializableElement(descriptor, 5, serializerPart6.serializer)
                    6 -> value7 = decodeSerializableElement(descriptor, 6, serializerPart7.serializer)
                    7 -> value8 = decodeSerializableElement(descriptor, 7, serializerPart8.serializer)
                    8 -> value9 = decodeSerializableElement(descriptor, 8, serializerPart9.serializer)
                    CompositeDecoder.DECODE_DONE -> break
                    else -> error("Unexpected index: $index")
                }
            }
            return@decodeStructure build(
                value1 ?: error("Absent field: ${serializerPart1.name}"),
                value2 ?: error("Absent field: ${serializerPart2.name}"),
                value3 ?: error("Absent field: ${serializerPart3.name}"),
                value4 ?: error("Absent field: ${serializerPart4.name}"),
                value5 ?: error("Absent field: ${serializerPart5.name}"),
                value6 ?: error("Absent field: ${serializerPart6.name}"),
                value7 ?: error("Absent field: ${serializerPart7.name}"),
                value8 ?: error("Absent field: ${serializerPart8.name}"),
                value9 ?: error("Absent field: ${serializerPart9.name}"),
            )
        }
    }
}

fun <T, R1, R2, R3, R4, R5, R6, R7, R8, R9> classSerializer(
    descriptorName: String,
    serializerPart1: Property<T, R1>,
    serializerPart2: Property<T, R2>,
    serializerPart3: Property<T, R3>,
    serializerPart4: Property<T, R4>,
    serializerPart5: Property<T, R5>,
    serializerPart6: Property<T, R6>,
    serializerPart7: Property<T, R7>,
    serializerPart8: Property<T, R8>,
    serializerPart9: Property<T, R9>,
    build: (R1, R2, R3, R4, R5, R6, R7, R8, R9) -> T,
) : KSerializer<T> = ClassKSerializer9(
    descriptorName,
    serializerPart1,
    serializerPart2,
    serializerPart3,
    serializerPart4,
    serializerPart5,
    serializerPart6,
    serializerPart7,
    serializerPart8,
    serializerPart9,
    build,
)

open class ClassKSerializer10<T, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10>(
    private val descriptorName: String,
    private val serializerPart1: Property<T, R1>,
    private val serializerPart2: Property<T, R2>,
    private val serializerPart3: Property<T, R3>,
    private val serializerPart4: Property<T, R4>,
    private val serializerPart5: Property<T, R5>,
    private val serializerPart6: Property<T, R6>,
    private val serializerPart7: Property<T, R7>,
    private val serializerPart8: Property<T, R8>,
    private val serializerPart9: Property<T, R9>,
    private val serializerPart10: Property<T, R10>,
    private val build: (R1, R2, R3, R4, R5, R6, R7, R8, R9, R10) -> T,
) : KSerializer<T> {
    final override val descriptor: SerialDescriptor = buildClassSerialDescriptor(descriptorName) {
        element(serializerPart1.name, serializerPart1.serializer.descriptor)
        element(serializerPart2.name, serializerPart2.serializer.descriptor)
        element(serializerPart3.name, serializerPart3.serializer.descriptor)
        element(serializerPart4.name, serializerPart4.serializer.descriptor)
        element(serializerPart5.name, serializerPart5.serializer.descriptor)
        element(serializerPart6.name, serializerPart6.serializer.descriptor)
        element(serializerPart7.name, serializerPart7.serializer.descriptor)
        element(serializerPart8.name, serializerPart8.serializer.descriptor)
        element(serializerPart9.name, serializerPart9.serializer.descriptor)
        element(serializerPart10.name, serializerPart10.serializer.descriptor)
    }

    final override fun serialize(encoder: Encoder, value: T) = encoder.encodeStructure(descriptor) {
        encodeSerializableElement(descriptor, 0, serializerPart1.serializer, serializerPart1.generator(value))
        encodeSerializableElement(descriptor, 1, serializerPart2.serializer, serializerPart2.generator(value))
        encodeSerializableElement(descriptor, 2, serializerPart3.serializer, serializerPart3.generator(value))
        encodeSerializableElement(descriptor, 3, serializerPart4.serializer, serializerPart4.generator(value))
        encodeSerializableElement(descriptor, 4, serializerPart5.serializer, serializerPart5.generator(value))
        encodeSerializableElement(descriptor, 5, serializerPart6.serializer, serializerPart6.generator(value))
        encodeSerializableElement(descriptor, 6, serializerPart7.serializer, serializerPart7.generator(value))
        encodeSerializableElement(descriptor, 7, serializerPart8.serializer, serializerPart8.generator(value))
        encodeSerializableElement(descriptor, 8, serializerPart9.serializer, serializerPart9.generator(value))
        encodeSerializableElement(descriptor, 9, serializerPart10.serializer, serializerPart10.generator(value))
    }

    @OptIn(ExperimentalSerializationApi::class)
    final override fun deserialize(decoder: Decoder): T = decoder.decodeStructure(descriptor) {
        if (decodeSequentially()) {
            build(
                decodeSerializableElement(descriptor, 0, serializerPart1.serializer),
                decodeSerializableElement(descriptor, 1, serializerPart2.serializer),
                decodeSerializableElement(descriptor, 2, serializerPart3.serializer),
                decodeSerializableElement(descriptor, 3, serializerPart4.serializer),
                decodeSerializableElement(descriptor, 4, serializerPart5.serializer),
                decodeSerializableElement(descriptor, 5, serializerPart6.serializer),
                decodeSerializableElement(descriptor, 6, serializerPart7.serializer),
                decodeSerializableElement(descriptor, 7, serializerPart8.serializer),
                decodeSerializableElement(descriptor, 8, serializerPart9.serializer),
                decodeSerializableElement(descriptor, 9, serializerPart10.serializer),
            )
        } else {
            var value1: R1? = null
            var value2: R2? = null
            var value3: R3? = null
            var value4: R4? = null
            var value5: R5? = null
            var value6: R6? = null
            var value7: R7? = null
            var value8: R8? = null
            var value9: R9? = null
            var value10: R10? = null
            while (true) {
                when (val index = decodeElementIndex(descriptor)) {
                    0 -> value1 = decodeSerializableElement(descriptor, 0, serializerPart1.serializer)
                    1 -> value2 = decodeSerializableElement(descriptor, 1, serializerPart2.serializer)
                    2 -> value3 = decodeSerializableElement(descriptor, 2, serializerPart3.serializer)
                    3 -> value4 = decodeSerializableElement(descriptor, 3, serializerPart4.serializer)
                    4 -> value5 = decodeSerializableElement(descriptor, 4, serializerPart5.serializer)
                    5 -> value6 = decodeSerializableElement(descriptor, 5, serializerPart6.serializer)
                    6 -> value7 = decodeSerializableElement(descriptor, 6, serializerPart7.serializer)
                    7 -> value8 = decodeSerializableElement(descriptor, 7, serializerPart8.serializer)
                    8 -> value9 = decodeSerializableElement(descriptor, 8, serializerPart9.serializer)
                    9 -> value10 = decodeSerializableElement(descriptor, 9, serializerPart10.serializer)
                    CompositeDecoder.DECODE_DONE -> break
                    else -> error("Unexpected index: $index")
                }
            }
            return@decodeStructure build(
                value1 ?: error("Absent field: ${serializerPart1.name}"),
                value2 ?: error("Absent field: ${serializerPart2.name}"),
                value3 ?: error("Absent field: ${serializerPart3.name}"),
                value4 ?: error("Absent field: ${serializerPart4.name}"),
                value5 ?: error("Absent field: ${serializerPart5.name}"),
                value6 ?: error("Absent field: ${serializerPart6.name}"),
                value7 ?: error("Absent field: ${serializerPart7.name}"),
                value8 ?: error("Absent field: ${serializerPart8.name}"),
                value9 ?: error("Absent field: ${serializerPart9.name}"),
                value10 ?: error("Absent field: ${serializerPart10.name}"),
            )
        }
    }
}

fun <T, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10> classSerializer(
    descriptorName: String,
    serializerPart1: Property<T, R1>,
    serializerPart2: Property<T, R2>,
    serializerPart3: Property<T, R3>,
    serializerPart4: Property<T, R4>,
    serializerPart5: Property<T, R5>,
    serializerPart6: Property<T, R6>,
    serializerPart7: Property<T, R7>,
    serializerPart8: Property<T, R8>,
    serializerPart9: Property<T, R9>,
    serializerPart10: Property<T, R10>,
    build: (R1, R2, R3, R4, R5, R6, R7, R8, R9, R10) -> T,
) : KSerializer<T> = ClassKSerializer10(
    descriptorName,
    serializerPart1,
    serializerPart2,
    serializerPart3,
    serializerPart4,
    serializerPart5,
    serializerPart6,
    serializerPart7,
    serializerPart8,
    serializerPart9,
    serializerPart10,
    build,
)

open class ClassKSerializer11<T, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11>(
    private val descriptorName: String,
    private val serializerPart1: Property<T, R1>,
    private val serializerPart2: Property<T, R2>,
    private val serializerPart3: Property<T, R3>,
    private val serializerPart4: Property<T, R4>,
    private val serializerPart5: Property<T, R5>,
    private val serializerPart6: Property<T, R6>,
    private val serializerPart7: Property<T, R7>,
    private val serializerPart8: Property<T, R8>,
    private val serializerPart9: Property<T, R9>,
    private val serializerPart10: Property<T, R10>,
    private val serializerPart11: Property<T, R11>,
    private val build: (R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11) -> T,
) : KSerializer<T> {
    final override val descriptor: SerialDescriptor = buildClassSerialDescriptor(descriptorName) {
        element(serializerPart1.name, serializerPart1.serializer.descriptor)
        element(serializerPart2.name, serializerPart2.serializer.descriptor)
        element(serializerPart3.name, serializerPart3.serializer.descriptor)
        element(serializerPart4.name, serializerPart4.serializer.descriptor)
        element(serializerPart5.name, serializerPart5.serializer.descriptor)
        element(serializerPart6.name, serializerPart6.serializer.descriptor)
        element(serializerPart7.name, serializerPart7.serializer.descriptor)
        element(serializerPart8.name, serializerPart8.serializer.descriptor)
        element(serializerPart9.name, serializerPart9.serializer.descriptor)
        element(serializerPart10.name, serializerPart10.serializer.descriptor)
        element(serializerPart11.name, serializerPart11.serializer.descriptor)
    }

    final override fun serialize(encoder: Encoder, value: T) = encoder.encodeStructure(descriptor) {
        encodeSerializableElement(descriptor, 0, serializerPart1.serializer, serializerPart1.generator(value))
        encodeSerializableElement(descriptor, 1, serializerPart2.serializer, serializerPart2.generator(value))
        encodeSerializableElement(descriptor, 2, serializerPart3.serializer, serializerPart3.generator(value))
        encodeSerializableElement(descriptor, 3, serializerPart4.serializer, serializerPart4.generator(value))
        encodeSerializableElement(descriptor, 4, serializerPart5.serializer, serializerPart5.generator(value))
        encodeSerializableElement(descriptor, 5, serializerPart6.serializer, serializerPart6.generator(value))
        encodeSerializableElement(descriptor, 6, serializerPart7.serializer, serializerPart7.generator(value))
        encodeSerializableElement(descriptor, 7, serializerPart8.serializer, serializerPart8.generator(value))
        encodeSerializableElement(descriptor, 8, serializerPart9.serializer, serializerPart9.generator(value))
        encodeSerializableElement(descriptor, 9, serializerPart10.serializer, serializerPart10.generator(value))
        encodeSerializableElement(descriptor, 10, serializerPart11.serializer, serializerPart11.generator(value))
    }

    @OptIn(ExperimentalSerializationApi::class)
    final override fun deserialize(decoder: Decoder): T = decoder.decodeStructure(descriptor) {
        if (decodeSequentially()) {
            build(
                decodeSerializableElement(descriptor, 0, serializerPart1.serializer),
                decodeSerializableElement(descriptor, 1, serializerPart2.serializer),
                decodeSerializableElement(descriptor, 2, serializerPart3.serializer),
                decodeSerializableElement(descriptor, 3, serializerPart4.serializer),
                decodeSerializableElement(descriptor, 4, serializerPart5.serializer),
                decodeSerializableElement(descriptor, 5, serializerPart6.serializer),
                decodeSerializableElement(descriptor, 6, serializerPart7.serializer),
                decodeSerializableElement(descriptor, 7, serializerPart8.serializer),
                decodeSerializableElement(descriptor, 8, serializerPart9.serializer),
                decodeSerializableElement(descriptor, 9, serializerPart10.serializer),
                decodeSerializableElement(descriptor, 10, serializerPart11.serializer),
            )
        } else {
            var value1: R1? = null
            var value2: R2? = null
            var value3: R3? = null
            var value4: R4? = null
            var value5: R5? = null
            var value6: R6? = null
            var value7: R7? = null
            var value8: R8? = null
            var value9: R9? = null
            var value10: R10? = null
            var value11: R11? = null
            while (true) {
                when (val index = decodeElementIndex(descriptor)) {
                    0 -> value1 = decodeSerializableElement(descriptor, 0, serializerPart1.serializer)
                    1 -> value2 = decodeSerializableElement(descriptor, 1, serializerPart2.serializer)
                    2 -> value3 = decodeSerializableElement(descriptor, 2, serializerPart3.serializer)
                    3 -> value4 = decodeSerializableElement(descriptor, 3, serializerPart4.serializer)
                    4 -> value5 = decodeSerializableElement(descriptor, 4, serializerPart5.serializer)
                    5 -> value6 = decodeSerializableElement(descriptor, 5, serializerPart6.serializer)
                    6 -> value7 = decodeSerializableElement(descriptor, 6, serializerPart7.serializer)
                    7 -> value8 = decodeSerializableElement(descriptor, 7, serializerPart8.serializer)
                    8 -> value9 = decodeSerializableElement(descriptor, 8, serializerPart9.serializer)
                    9 -> value10 = decodeSerializableElement(descriptor, 9, serializerPart10.serializer)
                    10 -> value11 = decodeSerializableElement(descriptor, 10, serializerPart11.serializer)
                    CompositeDecoder.DECODE_DONE -> break
                    else -> error("Unexpected index: $index")
                }
            }
            return@decodeStructure build(
                value1 ?: error("Absent field: ${serializerPart1.name}"),
                value2 ?: error("Absent field: ${serializerPart2.name}"),
                value3 ?: error("Absent field: ${serializerPart3.name}"),
                value4 ?: error("Absent field: ${serializerPart4.name}"),
                value5 ?: error("Absent field: ${serializerPart5.name}"),
                value6 ?: error("Absent field: ${serializerPart6.name}"),
                value7 ?: error("Absent field: ${serializerPart7.name}"),
                value8 ?: error("Absent field: ${serializerPart8.name}"),
                value9 ?: error("Absent field: ${serializerPart9.name}"),
                value10 ?: error("Absent field: ${serializerPart10.name}"),
                value11 ?: error("Absent field: ${serializerPart11.name}"),
            )
        }
    }
}

fun <T, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11> classSerializer(
    descriptorName: String,
    serializerPart1: Property<T, R1>,
    serializerPart2: Property<T, R2>,
    serializerPart3: Property<T, R3>,
    serializerPart4: Property<T, R4>,
    serializerPart5: Property<T, R5>,
    serializerPart6: Property<T, R6>,
    serializerPart7: Property<T, R7>,
    serializerPart8: Property<T, R8>,
    serializerPart9: Property<T, R9>,
    serializerPart10: Property<T, R10>,
    serializerPart11: Property<T, R11>,
    build: (R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11) -> T,
) : KSerializer<T> = ClassKSerializer11(
    descriptorName,
    serializerPart1,
    serializerPart2,
    serializerPart3,
    serializerPart4,
    serializerPart5,
    serializerPart6,
    serializerPart7,
    serializerPart8,
    serializerPart9,
    serializerPart10,
    serializerPart11,
    build,
)

open class ClassKSerializer12<T, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12>(
    private val descriptorName: String,
    private val serializerPart1: Property<T, R1>,
    private val serializerPart2: Property<T, R2>,
    private val serializerPart3: Property<T, R3>,
    private val serializerPart4: Property<T, R4>,
    private val serializerPart5: Property<T, R5>,
    private val serializerPart6: Property<T, R6>,
    private val serializerPart7: Property<T, R7>,
    private val serializerPart8: Property<T, R8>,
    private val serializerPart9: Property<T, R9>,
    private val serializerPart10: Property<T, R10>,
    private val serializerPart11: Property<T, R11>,
    private val serializerPart12: Property<T, R12>,
    private val build: (R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12) -> T,
) : KSerializer<T> {
    final override val descriptor: SerialDescriptor = buildClassSerialDescriptor(descriptorName) {
        element(serializerPart1.name, serializerPart1.serializer.descriptor)
        element(serializerPart2.name, serializerPart2.serializer.descriptor)
        element(serializerPart3.name, serializerPart3.serializer.descriptor)
        element(serializerPart4.name, serializerPart4.serializer.descriptor)
        element(serializerPart5.name, serializerPart5.serializer.descriptor)
        element(serializerPart6.name, serializerPart6.serializer.descriptor)
        element(serializerPart7.name, serializerPart7.serializer.descriptor)
        element(serializerPart8.name, serializerPart8.serializer.descriptor)
        element(serializerPart9.name, serializerPart9.serializer.descriptor)
        element(serializerPart10.name, serializerPart10.serializer.descriptor)
        element(serializerPart11.name, serializerPart11.serializer.descriptor)
        element(serializerPart12.name, serializerPart12.serializer.descriptor)
    }

    final override fun serialize(encoder: Encoder, value: T) = encoder.encodeStructure(descriptor) {
        encodeSerializableElement(descriptor, 0, serializerPart1.serializer, serializerPart1.generator(value))
        encodeSerializableElement(descriptor, 1, serializerPart2.serializer, serializerPart2.generator(value))
        encodeSerializableElement(descriptor, 2, serializerPart3.serializer, serializerPart3.generator(value))
        encodeSerializableElement(descriptor, 3, serializerPart4.serializer, serializerPart4.generator(value))
        encodeSerializableElement(descriptor, 4, serializerPart5.serializer, serializerPart5.generator(value))
        encodeSerializableElement(descriptor, 5, serializerPart6.serializer, serializerPart6.generator(value))
        encodeSerializableElement(descriptor, 6, serializerPart7.serializer, serializerPart7.generator(value))
        encodeSerializableElement(descriptor, 7, serializerPart8.serializer, serializerPart8.generator(value))
        encodeSerializableElement(descriptor, 8, serializerPart9.serializer, serializerPart9.generator(value))
        encodeSerializableElement(descriptor, 9, serializerPart10.serializer, serializerPart10.generator(value))
        encodeSerializableElement(descriptor, 10, serializerPart11.serializer, serializerPart11.generator(value))
        encodeSerializableElement(descriptor, 11, serializerPart12.serializer, serializerPart12.generator(value))
    }

    @OptIn(ExperimentalSerializationApi::class)
    final override fun deserialize(decoder: Decoder): T = decoder.decodeStructure(descriptor) {
        if (decodeSequentially()) {
            build(
                decodeSerializableElement(descriptor, 0, serializerPart1.serializer),
                decodeSerializableElement(descriptor, 1, serializerPart2.serializer),
                decodeSerializableElement(descriptor, 2, serializerPart3.serializer),
                decodeSerializableElement(descriptor, 3, serializerPart4.serializer),
                decodeSerializableElement(descriptor, 4, serializerPart5.serializer),
                decodeSerializableElement(descriptor, 5, serializerPart6.serializer),
                decodeSerializableElement(descriptor, 6, serializerPart7.serializer),
                decodeSerializableElement(descriptor, 7, serializerPart8.serializer),
                decodeSerializableElement(descriptor, 8, serializerPart9.serializer),
                decodeSerializableElement(descriptor, 9, serializerPart10.serializer),
                decodeSerializableElement(descriptor, 10, serializerPart11.serializer),
                decodeSerializableElement(descriptor, 11, serializerPart12.serializer),
            )
        } else {
            var value1: R1? = null
            var value2: R2? = null
            var value3: R3? = null
            var value4: R4? = null
            var value5: R5? = null
            var value6: R6? = null
            var value7: R7? = null
            var value8: R8? = null
            var value9: R9? = null
            var value10: R10? = null
            var value11: R11? = null
            var value12: R12? = null
            while (true) {
                when (val index = decodeElementIndex(descriptor)) {
                    0 -> value1 = decodeSerializableElement(descriptor, 0, serializerPart1.serializer)
                    1 -> value2 = decodeSerializableElement(descriptor, 1, serializerPart2.serializer)
                    2 -> value3 = decodeSerializableElement(descriptor, 2, serializerPart3.serializer)
                    3 -> value4 = decodeSerializableElement(descriptor, 3, serializerPart4.serializer)
                    4 -> value5 = decodeSerializableElement(descriptor, 4, serializerPart5.serializer)
                    5 -> value6 = decodeSerializableElement(descriptor, 5, serializerPart6.serializer)
                    6 -> value7 = decodeSerializableElement(descriptor, 6, serializerPart7.serializer)
                    7 -> value8 = decodeSerializableElement(descriptor, 7, serializerPart8.serializer)
                    8 -> value9 = decodeSerializableElement(descriptor, 8, serializerPart9.serializer)
                    9 -> value10 = decodeSerializableElement(descriptor, 9, serializerPart10.serializer)
                    10 -> value11 = decodeSerializableElement(descriptor, 10, serializerPart11.serializer)
                    11 -> value12 = decodeSerializableElement(descriptor, 11, serializerPart12.serializer)
                    CompositeDecoder.DECODE_DONE -> break
                    else -> error("Unexpected index: $index")
                }
            }
            return@decodeStructure build(
                value1 ?: error("Absent field: ${serializerPart1.name}"),
                value2 ?: error("Absent field: ${serializerPart2.name}"),
                value3 ?: error("Absent field: ${serializerPart3.name}"),
                value4 ?: error("Absent field: ${serializerPart4.name}"),
                value5 ?: error("Absent field: ${serializerPart5.name}"),
                value6 ?: error("Absent field: ${serializerPart6.name}"),
                value7 ?: error("Absent field: ${serializerPart7.name}"),
                value8 ?: error("Absent field: ${serializerPart8.name}"),
                value9 ?: error("Absent field: ${serializerPart9.name}"),
                value10 ?: error("Absent field: ${serializerPart10.name}"),
                value11 ?: error("Absent field: ${serializerPart11.name}"),
                value12 ?: error("Absent field: ${serializerPart12.name}"),
            )
        }
    }
}

fun <T, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12> classSerializer(
    descriptorName: String,
    serializerPart1: Property<T, R1>,
    serializerPart2: Property<T, R2>,
    serializerPart3: Property<T, R3>,
    serializerPart4: Property<T, R4>,
    serializerPart5: Property<T, R5>,
    serializerPart6: Property<T, R6>,
    serializerPart7: Property<T, R7>,
    serializerPart8: Property<T, R8>,
    serializerPart9: Property<T, R9>,
    serializerPart10: Property<T, R10>,
    serializerPart11: Property<T, R11>,
    serializerPart12: Property<T, R12>,
    build: (R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12) -> T,
) : KSerializer<T> = ClassKSerializer12(
    descriptorName,
    serializerPart1,
    serializerPart2,
    serializerPart3,
    serializerPart4,
    serializerPart5,
    serializerPart6,
    serializerPart7,
    serializerPart8,
    serializerPart9,
    serializerPart10,
    serializerPart11,
    serializerPart12,
    build,
)

open class ClassKSerializer13<T, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13>(
    private val descriptorName: String,
    private val serializerPart1: Property<T, R1>,
    private val serializerPart2: Property<T, R2>,
    private val serializerPart3: Property<T, R3>,
    private val serializerPart4: Property<T, R4>,
    private val serializerPart5: Property<T, R5>,
    private val serializerPart6: Property<T, R6>,
    private val serializerPart7: Property<T, R7>,
    private val serializerPart8: Property<T, R8>,
    private val serializerPart9: Property<T, R9>,
    private val serializerPart10: Property<T, R10>,
    private val serializerPart11: Property<T, R11>,
    private val serializerPart12: Property<T, R12>,
    private val serializerPart13: Property<T, R13>,
    private val build: (R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13) -> T,
) : KSerializer<T> {
    final override val descriptor: SerialDescriptor = buildClassSerialDescriptor(descriptorName) {
        element(serializerPart1.name, serializerPart1.serializer.descriptor)
        element(serializerPart2.name, serializerPart2.serializer.descriptor)
        element(serializerPart3.name, serializerPart3.serializer.descriptor)
        element(serializerPart4.name, serializerPart4.serializer.descriptor)
        element(serializerPart5.name, serializerPart5.serializer.descriptor)
        element(serializerPart6.name, serializerPart6.serializer.descriptor)
        element(serializerPart7.name, serializerPart7.serializer.descriptor)
        element(serializerPart8.name, serializerPart8.serializer.descriptor)
        element(serializerPart9.name, serializerPart9.serializer.descriptor)
        element(serializerPart10.name, serializerPart10.serializer.descriptor)
        element(serializerPart11.name, serializerPart11.serializer.descriptor)
        element(serializerPart12.name, serializerPart12.serializer.descriptor)
        element(serializerPart13.name, serializerPart13.serializer.descriptor)
    }

    final override fun serialize(encoder: Encoder, value: T) = encoder.encodeStructure(descriptor) {
        encodeSerializableElement(descriptor, 0, serializerPart1.serializer, serializerPart1.generator(value))
        encodeSerializableElement(descriptor, 1, serializerPart2.serializer, serializerPart2.generator(value))
        encodeSerializableElement(descriptor, 2, serializerPart3.serializer, serializerPart3.generator(value))
        encodeSerializableElement(descriptor, 3, serializerPart4.serializer, serializerPart4.generator(value))
        encodeSerializableElement(descriptor, 4, serializerPart5.serializer, serializerPart5.generator(value))
        encodeSerializableElement(descriptor, 5, serializerPart6.serializer, serializerPart6.generator(value))
        encodeSerializableElement(descriptor, 6, serializerPart7.serializer, serializerPart7.generator(value))
        encodeSerializableElement(descriptor, 7, serializerPart8.serializer, serializerPart8.generator(value))
        encodeSerializableElement(descriptor, 8, serializerPart9.serializer, serializerPart9.generator(value))
        encodeSerializableElement(descriptor, 9, serializerPart10.serializer, serializerPart10.generator(value))
        encodeSerializableElement(descriptor, 10, serializerPart11.serializer, serializerPart11.generator(value))
        encodeSerializableElement(descriptor, 11, serializerPart12.serializer, serializerPart12.generator(value))
        encodeSerializableElement(descriptor, 12, serializerPart13.serializer, serializerPart13.generator(value))
    }

    @OptIn(ExperimentalSerializationApi::class)
    final override fun deserialize(decoder: Decoder): T = decoder.decodeStructure(descriptor) {
        if (decodeSequentially()) {
            build(
                decodeSerializableElement(descriptor, 0, serializerPart1.serializer),
                decodeSerializableElement(descriptor, 1, serializerPart2.serializer),
                decodeSerializableElement(descriptor, 2, serializerPart3.serializer),
                decodeSerializableElement(descriptor, 3, serializerPart4.serializer),
                decodeSerializableElement(descriptor, 4, serializerPart5.serializer),
                decodeSerializableElement(descriptor, 5, serializerPart6.serializer),
                decodeSerializableElement(descriptor, 6, serializerPart7.serializer),
                decodeSerializableElement(descriptor, 7, serializerPart8.serializer),
                decodeSerializableElement(descriptor, 8, serializerPart9.serializer),
                decodeSerializableElement(descriptor, 9, serializerPart10.serializer),
                decodeSerializableElement(descriptor, 10, serializerPart11.serializer),
                decodeSerializableElement(descriptor, 11, serializerPart12.serializer),
                decodeSerializableElement(descriptor, 12, serializerPart13.serializer),
            )
        } else {
            var value1: R1? = null
            var value2: R2? = null
            var value3: R3? = null
            var value4: R4? = null
            var value5: R5? = null
            var value6: R6? = null
            var value7: R7? = null
            var value8: R8? = null
            var value9: R9? = null
            var value10: R10? = null
            var value11: R11? = null
            var value12: R12? = null
            var value13: R13? = null
            while (true) {
                when (val index = decodeElementIndex(descriptor)) {
                    0 -> value1 = decodeSerializableElement(descriptor, 0, serializerPart1.serializer)
                    1 -> value2 = decodeSerializableElement(descriptor, 1, serializerPart2.serializer)
                    2 -> value3 = decodeSerializableElement(descriptor, 2, serializerPart3.serializer)
                    3 -> value4 = decodeSerializableElement(descriptor, 3, serializerPart4.serializer)
                    4 -> value5 = decodeSerializableElement(descriptor, 4, serializerPart5.serializer)
                    5 -> value6 = decodeSerializableElement(descriptor, 5, serializerPart6.serializer)
                    6 -> value7 = decodeSerializableElement(descriptor, 6, serializerPart7.serializer)
                    7 -> value8 = decodeSerializableElement(descriptor, 7, serializerPart8.serializer)
                    8 -> value9 = decodeSerializableElement(descriptor, 8, serializerPart9.serializer)
                    9 -> value10 = decodeSerializableElement(descriptor, 9, serializerPart10.serializer)
                    10 -> value11 = decodeSerializableElement(descriptor, 10, serializerPart11.serializer)
                    11 -> value12 = decodeSerializableElement(descriptor, 11, serializerPart12.serializer)
                    12 -> value13 = decodeSerializableElement(descriptor, 12, serializerPart13.serializer)
                    CompositeDecoder.DECODE_DONE -> break
                    else -> error("Unexpected index: $index")
                }
            }
            return@decodeStructure build(
                value1 ?: error("Absent field: ${serializerPart1.name}"),
                value2 ?: error("Absent field: ${serializerPart2.name}"),
                value3 ?: error("Absent field: ${serializerPart3.name}"),
                value4 ?: error("Absent field: ${serializerPart4.name}"),
                value5 ?: error("Absent field: ${serializerPart5.name}"),
                value6 ?: error("Absent field: ${serializerPart6.name}"),
                value7 ?: error("Absent field: ${serializerPart7.name}"),
                value8 ?: error("Absent field: ${serializerPart8.name}"),
                value9 ?: error("Absent field: ${serializerPart9.name}"),
                value10 ?: error("Absent field: ${serializerPart10.name}"),
                value11 ?: error("Absent field: ${serializerPart11.name}"),
                value12 ?: error("Absent field: ${serializerPart12.name}"),
                value13 ?: error("Absent field: ${serializerPart13.name}"),
            )
        }
    }
}

fun <T, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13> classSerializer(
    descriptorName: String,
    serializerPart1: Property<T, R1>,
    serializerPart2: Property<T, R2>,
    serializerPart3: Property<T, R3>,
    serializerPart4: Property<T, R4>,
    serializerPart5: Property<T, R5>,
    serializerPart6: Property<T, R6>,
    serializerPart7: Property<T, R7>,
    serializerPart8: Property<T, R8>,
    serializerPart9: Property<T, R9>,
    serializerPart10: Property<T, R10>,
    serializerPart11: Property<T, R11>,
    serializerPart12: Property<T, R12>,
    serializerPart13: Property<T, R13>,
    build: (R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13) -> T,
) : KSerializer<T> = ClassKSerializer13(
    descriptorName,
    serializerPart1,
    serializerPart2,
    serializerPart3,
    serializerPart4,
    serializerPart5,
    serializerPart6,
    serializerPart7,
    serializerPart8,
    serializerPart9,
    serializerPart10,
    serializerPart11,
    serializerPart12,
    serializerPart13,
    build,
)

open class ClassKSerializer14<T, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14>(
    private val descriptorName: String,
    private val serializerPart1: Property<T, R1>,
    private val serializerPart2: Property<T, R2>,
    private val serializerPart3: Property<T, R3>,
    private val serializerPart4: Property<T, R4>,
    private val serializerPart5: Property<T, R5>,
    private val serializerPart6: Property<T, R6>,
    private val serializerPart7: Property<T, R7>,
    private val serializerPart8: Property<T, R8>,
    private val serializerPart9: Property<T, R9>,
    private val serializerPart10: Property<T, R10>,
    private val serializerPart11: Property<T, R11>,
    private val serializerPart12: Property<T, R12>,
    private val serializerPart13: Property<T, R13>,
    private val serializerPart14: Property<T, R14>,
    private val build: (R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14) -> T,
) : KSerializer<T> {
    final override val descriptor: SerialDescriptor = buildClassSerialDescriptor(descriptorName) {
        element(serializerPart1.name, serializerPart1.serializer.descriptor)
        element(serializerPart2.name, serializerPart2.serializer.descriptor)
        element(serializerPart3.name, serializerPart3.serializer.descriptor)
        element(serializerPart4.name, serializerPart4.serializer.descriptor)
        element(serializerPart5.name, serializerPart5.serializer.descriptor)
        element(serializerPart6.name, serializerPart6.serializer.descriptor)
        element(serializerPart7.name, serializerPart7.serializer.descriptor)
        element(serializerPart8.name, serializerPart8.serializer.descriptor)
        element(serializerPart9.name, serializerPart9.serializer.descriptor)
        element(serializerPart10.name, serializerPart10.serializer.descriptor)
        element(serializerPart11.name, serializerPart11.serializer.descriptor)
        element(serializerPart12.name, serializerPart12.serializer.descriptor)
        element(serializerPart13.name, serializerPart13.serializer.descriptor)
        element(serializerPart14.name, serializerPart14.serializer.descriptor)
    }

    final override fun serialize(encoder: Encoder, value: T) = encoder.encodeStructure(descriptor) {
        encodeSerializableElement(descriptor, 0, serializerPart1.serializer, serializerPart1.generator(value))
        encodeSerializableElement(descriptor, 1, serializerPart2.serializer, serializerPart2.generator(value))
        encodeSerializableElement(descriptor, 2, serializerPart3.serializer, serializerPart3.generator(value))
        encodeSerializableElement(descriptor, 3, serializerPart4.serializer, serializerPart4.generator(value))
        encodeSerializableElement(descriptor, 4, serializerPart5.serializer, serializerPart5.generator(value))
        encodeSerializableElement(descriptor, 5, serializerPart6.serializer, serializerPart6.generator(value))
        encodeSerializableElement(descriptor, 6, serializerPart7.serializer, serializerPart7.generator(value))
        encodeSerializableElement(descriptor, 7, serializerPart8.serializer, serializerPart8.generator(value))
        encodeSerializableElement(descriptor, 8, serializerPart9.serializer, serializerPart9.generator(value))
        encodeSerializableElement(descriptor, 9, serializerPart10.serializer, serializerPart10.generator(value))
        encodeSerializableElement(descriptor, 10, serializerPart11.serializer, serializerPart11.generator(value))
        encodeSerializableElement(descriptor, 11, serializerPart12.serializer, serializerPart12.generator(value))
        encodeSerializableElement(descriptor, 12, serializerPart13.serializer, serializerPart13.generator(value))
        encodeSerializableElement(descriptor, 13, serializerPart14.serializer, serializerPart14.generator(value))
    }

    @OptIn(ExperimentalSerializationApi::class)
    final override fun deserialize(decoder: Decoder): T = decoder.decodeStructure(descriptor) {
        if (decodeSequentially()) {
            build(
                decodeSerializableElement(descriptor, 0, serializerPart1.serializer),
                decodeSerializableElement(descriptor, 1, serializerPart2.serializer),
                decodeSerializableElement(descriptor, 2, serializerPart3.serializer),
                decodeSerializableElement(descriptor, 3, serializerPart4.serializer),
                decodeSerializableElement(descriptor, 4, serializerPart5.serializer),
                decodeSerializableElement(descriptor, 5, serializerPart6.serializer),
                decodeSerializableElement(descriptor, 6, serializerPart7.serializer),
                decodeSerializableElement(descriptor, 7, serializerPart8.serializer),
                decodeSerializableElement(descriptor, 8, serializerPart9.serializer),
                decodeSerializableElement(descriptor, 9, serializerPart10.serializer),
                decodeSerializableElement(descriptor, 10, serializerPart11.serializer),
                decodeSerializableElement(descriptor, 11, serializerPart12.serializer),
                decodeSerializableElement(descriptor, 12, serializerPart13.serializer),
                decodeSerializableElement(descriptor, 13, serializerPart14.serializer),
            )
        } else {
            var value1: R1? = null
            var value2: R2? = null
            var value3: R3? = null
            var value4: R4? = null
            var value5: R5? = null
            var value6: R6? = null
            var value7: R7? = null
            var value8: R8? = null
            var value9: R9? = null
            var value10: R10? = null
            var value11: R11? = null
            var value12: R12? = null
            var value13: R13? = null
            var value14: R14? = null
            while (true) {
                when (val index = decodeElementIndex(descriptor)) {
                    0 -> value1 = decodeSerializableElement(descriptor, 0, serializerPart1.serializer)
                    1 -> value2 = decodeSerializableElement(descriptor, 1, serializerPart2.serializer)
                    2 -> value3 = decodeSerializableElement(descriptor, 2, serializerPart3.serializer)
                    3 -> value4 = decodeSerializableElement(descriptor, 3, serializerPart4.serializer)
                    4 -> value5 = decodeSerializableElement(descriptor, 4, serializerPart5.serializer)
                    5 -> value6 = decodeSerializableElement(descriptor, 5, serializerPart6.serializer)
                    6 -> value7 = decodeSerializableElement(descriptor, 6, serializerPart7.serializer)
                    7 -> value8 = decodeSerializableElement(descriptor, 7, serializerPart8.serializer)
                    8 -> value9 = decodeSerializableElement(descriptor, 8, serializerPart9.serializer)
                    9 -> value10 = decodeSerializableElement(descriptor, 9, serializerPart10.serializer)
                    10 -> value11 = decodeSerializableElement(descriptor, 10, serializerPart11.serializer)
                    11 -> value12 = decodeSerializableElement(descriptor, 11, serializerPart12.serializer)
                    12 -> value13 = decodeSerializableElement(descriptor, 12, serializerPart13.serializer)
                    13 -> value14 = decodeSerializableElement(descriptor, 13, serializerPart14.serializer)
                    CompositeDecoder.DECODE_DONE -> break
                    else -> error("Unexpected index: $index")
                }
            }
            return@decodeStructure build(
                value1 ?: error("Absent field: ${serializerPart1.name}"),
                value2 ?: error("Absent field: ${serializerPart2.name}"),
                value3 ?: error("Absent field: ${serializerPart3.name}"),
                value4 ?: error("Absent field: ${serializerPart4.name}"),
                value5 ?: error("Absent field: ${serializerPart5.name}"),
                value6 ?: error("Absent field: ${serializerPart6.name}"),
                value7 ?: error("Absent field: ${serializerPart7.name}"),
                value8 ?: error("Absent field: ${serializerPart8.name}"),
                value9 ?: error("Absent field: ${serializerPart9.name}"),
                value10 ?: error("Absent field: ${serializerPart10.name}"),
                value11 ?: error("Absent field: ${serializerPart11.name}"),
                value12 ?: error("Absent field: ${serializerPart12.name}"),
                value13 ?: error("Absent field: ${serializerPart13.name}"),
                value14 ?: error("Absent field: ${serializerPart14.name}"),
            )
        }
    }
}

fun <T, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14> classSerializer(
    descriptorName: String,
    serializerPart1: Property<T, R1>,
    serializerPart2: Property<T, R2>,
    serializerPart3: Property<T, R3>,
    serializerPart4: Property<T, R4>,
    serializerPart5: Property<T, R5>,
    serializerPart6: Property<T, R6>,
    serializerPart7: Property<T, R7>,
    serializerPart8: Property<T, R8>,
    serializerPart9: Property<T, R9>,
    serializerPart10: Property<T, R10>,
    serializerPart11: Property<T, R11>,
    serializerPart12: Property<T, R12>,
    serializerPart13: Property<T, R13>,
    serializerPart14: Property<T, R14>,
    build: (R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14) -> T,
) : KSerializer<T> = ClassKSerializer14(
    descriptorName,
    serializerPart1,
    serializerPart2,
    serializerPart3,
    serializerPart4,
    serializerPart5,
    serializerPart6,
    serializerPart7,
    serializerPart8,
    serializerPart9,
    serializerPart10,
    serializerPart11,
    serializerPart12,
    serializerPart13,
    serializerPart14,
    build,
)

open class ClassKSerializer15<T, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15>(
    private val descriptorName: String,
    private val serializerPart1: Property<T, R1>,
    private val serializerPart2: Property<T, R2>,
    private val serializerPart3: Property<T, R3>,
    private val serializerPart4: Property<T, R4>,
    private val serializerPart5: Property<T, R5>,
    private val serializerPart6: Property<T, R6>,
    private val serializerPart7: Property<T, R7>,
    private val serializerPart8: Property<T, R8>,
    private val serializerPart9: Property<T, R9>,
    private val serializerPart10: Property<T, R10>,
    private val serializerPart11: Property<T, R11>,
    private val serializerPart12: Property<T, R12>,
    private val serializerPart13: Property<T, R13>,
    private val serializerPart14: Property<T, R14>,
    private val serializerPart15: Property<T, R15>,
    private val build: (R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15) -> T,
) : KSerializer<T> {
    final override val descriptor: SerialDescriptor = buildClassSerialDescriptor(descriptorName) {
        element(serializerPart1.name, serializerPart1.serializer.descriptor)
        element(serializerPart2.name, serializerPart2.serializer.descriptor)
        element(serializerPart3.name, serializerPart3.serializer.descriptor)
        element(serializerPart4.name, serializerPart4.serializer.descriptor)
        element(serializerPart5.name, serializerPart5.serializer.descriptor)
        element(serializerPart6.name, serializerPart6.serializer.descriptor)
        element(serializerPart7.name, serializerPart7.serializer.descriptor)
        element(serializerPart8.name, serializerPart8.serializer.descriptor)
        element(serializerPart9.name, serializerPart9.serializer.descriptor)
        element(serializerPart10.name, serializerPart10.serializer.descriptor)
        element(serializerPart11.name, serializerPart11.serializer.descriptor)
        element(serializerPart12.name, serializerPart12.serializer.descriptor)
        element(serializerPart13.name, serializerPart13.serializer.descriptor)
        element(serializerPart14.name, serializerPart14.serializer.descriptor)
        element(serializerPart15.name, serializerPart15.serializer.descriptor)
    }

    final override fun serialize(encoder: Encoder, value: T) = encoder.encodeStructure(descriptor) {
        encodeSerializableElement(descriptor, 0, serializerPart1.serializer, serializerPart1.generator(value))
        encodeSerializableElement(descriptor, 1, serializerPart2.serializer, serializerPart2.generator(value))
        encodeSerializableElement(descriptor, 2, serializerPart3.serializer, serializerPart3.generator(value))
        encodeSerializableElement(descriptor, 3, serializerPart4.serializer, serializerPart4.generator(value))
        encodeSerializableElement(descriptor, 4, serializerPart5.serializer, serializerPart5.generator(value))
        encodeSerializableElement(descriptor, 5, serializerPart6.serializer, serializerPart6.generator(value))
        encodeSerializableElement(descriptor, 6, serializerPart7.serializer, serializerPart7.generator(value))
        encodeSerializableElement(descriptor, 7, serializerPart8.serializer, serializerPart8.generator(value))
        encodeSerializableElement(descriptor, 8, serializerPart9.serializer, serializerPart9.generator(value))
        encodeSerializableElement(descriptor, 9, serializerPart10.serializer, serializerPart10.generator(value))
        encodeSerializableElement(descriptor, 10, serializerPart11.serializer, serializerPart11.generator(value))
        encodeSerializableElement(descriptor, 11, serializerPart12.serializer, serializerPart12.generator(value))
        encodeSerializableElement(descriptor, 12, serializerPart13.serializer, serializerPart13.generator(value))
        encodeSerializableElement(descriptor, 13, serializerPart14.serializer, serializerPart14.generator(value))
        encodeSerializableElement(descriptor, 14, serializerPart15.serializer, serializerPart15.generator(value))
    }

    @OptIn(ExperimentalSerializationApi::class)
    final override fun deserialize(decoder: Decoder): T = decoder.decodeStructure(descriptor) {
        if (decodeSequentially()) {
            build(
                decodeSerializableElement(descriptor, 0, serializerPart1.serializer),
                decodeSerializableElement(descriptor, 1, serializerPart2.serializer),
                decodeSerializableElement(descriptor, 2, serializerPart3.serializer),
                decodeSerializableElement(descriptor, 3, serializerPart4.serializer),
                decodeSerializableElement(descriptor, 4, serializerPart5.serializer),
                decodeSerializableElement(descriptor, 5, serializerPart6.serializer),
                decodeSerializableElement(descriptor, 6, serializerPart7.serializer),
                decodeSerializableElement(descriptor, 7, serializerPart8.serializer),
                decodeSerializableElement(descriptor, 8, serializerPart9.serializer),
                decodeSerializableElement(descriptor, 9, serializerPart10.serializer),
                decodeSerializableElement(descriptor, 10, serializerPart11.serializer),
                decodeSerializableElement(descriptor, 11, serializerPart12.serializer),
                decodeSerializableElement(descriptor, 12, serializerPart13.serializer),
                decodeSerializableElement(descriptor, 13, serializerPart14.serializer),
                decodeSerializableElement(descriptor, 14, serializerPart15.serializer),
            )
        } else {
            var value1: R1? = null
            var value2: R2? = null
            var value3: R3? = null
            var value4: R4? = null
            var value5: R5? = null
            var value6: R6? = null
            var value7: R7? = null
            var value8: R8? = null
            var value9: R9? = null
            var value10: R10? = null
            var value11: R11? = null
            var value12: R12? = null
            var value13: R13? = null
            var value14: R14? = null
            var value15: R15? = null
            while (true) {
                when (val index = decodeElementIndex(descriptor)) {
                    0 -> value1 = decodeSerializableElement(descriptor, 0, serializerPart1.serializer)
                    1 -> value2 = decodeSerializableElement(descriptor, 1, serializerPart2.serializer)
                    2 -> value3 = decodeSerializableElement(descriptor, 2, serializerPart3.serializer)
                    3 -> value4 = decodeSerializableElement(descriptor, 3, serializerPart4.serializer)
                    4 -> value5 = decodeSerializableElement(descriptor, 4, serializerPart5.serializer)
                    5 -> value6 = decodeSerializableElement(descriptor, 5, serializerPart6.serializer)
                    6 -> value7 = decodeSerializableElement(descriptor, 6, serializerPart7.serializer)
                    7 -> value8 = decodeSerializableElement(descriptor, 7, serializerPart8.serializer)
                    8 -> value9 = decodeSerializableElement(descriptor, 8, serializerPart9.serializer)
                    9 -> value10 = decodeSerializableElement(descriptor, 9, serializerPart10.serializer)
                    10 -> value11 = decodeSerializableElement(descriptor, 10, serializerPart11.serializer)
                    11 -> value12 = decodeSerializableElement(descriptor, 11, serializerPart12.serializer)
                    12 -> value13 = decodeSerializableElement(descriptor, 12, serializerPart13.serializer)
                    13 -> value14 = decodeSerializableElement(descriptor, 13, serializerPart14.serializer)
                    14 -> value15 = decodeSerializableElement(descriptor, 14, serializerPart15.serializer)
                    CompositeDecoder.DECODE_DONE -> break
                    else -> error("Unexpected index: $index")
                }
            }
            return@decodeStructure build(
                value1 ?: error("Absent field: ${serializerPart1.name}"),
                value2 ?: error("Absent field: ${serializerPart2.name}"),
                value3 ?: error("Absent field: ${serializerPart3.name}"),
                value4 ?: error("Absent field: ${serializerPart4.name}"),
                value5 ?: error("Absent field: ${serializerPart5.name}"),
                value6 ?: error("Absent field: ${serializerPart6.name}"),
                value7 ?: error("Absent field: ${serializerPart7.name}"),
                value8 ?: error("Absent field: ${serializerPart8.name}"),
                value9 ?: error("Absent field: ${serializerPart9.name}"),
                value10 ?: error("Absent field: ${serializerPart10.name}"),
                value11 ?: error("Absent field: ${serializerPart11.name}"),
                value12 ?: error("Absent field: ${serializerPart12.name}"),
                value13 ?: error("Absent field: ${serializerPart13.name}"),
                value14 ?: error("Absent field: ${serializerPart14.name}"),
                value15 ?: error("Absent field: ${serializerPart15.name}"),
            )
        }
    }
}

fun <T, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15> classSerializer(
    descriptorName: String,
    serializerPart1: Property<T, R1>,
    serializerPart2: Property<T, R2>,
    serializerPart3: Property<T, R3>,
    serializerPart4: Property<T, R4>,
    serializerPart5: Property<T, R5>,
    serializerPart6: Property<T, R6>,
    serializerPart7: Property<T, R7>,
    serializerPart8: Property<T, R8>,
    serializerPart9: Property<T, R9>,
    serializerPart10: Property<T, R10>,
    serializerPart11: Property<T, R11>,
    serializerPart12: Property<T, R12>,
    serializerPart13: Property<T, R13>,
    serializerPart14: Property<T, R14>,
    serializerPart15: Property<T, R15>,
    build: (R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15) -> T,
) : KSerializer<T> = ClassKSerializer15(
    descriptorName,
    serializerPart1,
    serializerPart2,
    serializerPart3,
    serializerPart4,
    serializerPart5,
    serializerPart6,
    serializerPart7,
    serializerPart8,
    serializerPart9,
    serializerPart10,
    serializerPart11,
    serializerPart12,
    serializerPart13,
    serializerPart14,
    serializerPart15,
    build,
)

open class ClassKSerializer16<T, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16>(
    private val descriptorName: String,
    private val serializerPart1: Property<T, R1>,
    private val serializerPart2: Property<T, R2>,
    private val serializerPart3: Property<T, R3>,
    private val serializerPart4: Property<T, R4>,
    private val serializerPart5: Property<T, R5>,
    private val serializerPart6: Property<T, R6>,
    private val serializerPart7: Property<T, R7>,
    private val serializerPart8: Property<T, R8>,
    private val serializerPart9: Property<T, R9>,
    private val serializerPart10: Property<T, R10>,
    private val serializerPart11: Property<T, R11>,
    private val serializerPart12: Property<T, R12>,
    private val serializerPart13: Property<T, R13>,
    private val serializerPart14: Property<T, R14>,
    private val serializerPart15: Property<T, R15>,
    private val serializerPart16: Property<T, R16>,
    private val build: (R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16) -> T,
) : KSerializer<T> {
    final override val descriptor: SerialDescriptor = buildClassSerialDescriptor(descriptorName) {
        element(serializerPart1.name, serializerPart1.serializer.descriptor)
        element(serializerPart2.name, serializerPart2.serializer.descriptor)
        element(serializerPart3.name, serializerPart3.serializer.descriptor)
        element(serializerPart4.name, serializerPart4.serializer.descriptor)
        element(serializerPart5.name, serializerPart5.serializer.descriptor)
        element(serializerPart6.name, serializerPart6.serializer.descriptor)
        element(serializerPart7.name, serializerPart7.serializer.descriptor)
        element(serializerPart8.name, serializerPart8.serializer.descriptor)
        element(serializerPart9.name, serializerPart9.serializer.descriptor)
        element(serializerPart10.name, serializerPart10.serializer.descriptor)
        element(serializerPart11.name, serializerPart11.serializer.descriptor)
        element(serializerPart12.name, serializerPart12.serializer.descriptor)
        element(serializerPart13.name, serializerPart13.serializer.descriptor)
        element(serializerPart14.name, serializerPart14.serializer.descriptor)
        element(serializerPart15.name, serializerPart15.serializer.descriptor)
        element(serializerPart16.name, serializerPart16.serializer.descriptor)
    }

    final override fun serialize(encoder: Encoder, value: T) = encoder.encodeStructure(descriptor) {
        encodeSerializableElement(descriptor, 0, serializerPart1.serializer, serializerPart1.generator(value))
        encodeSerializableElement(descriptor, 1, serializerPart2.serializer, serializerPart2.generator(value))
        encodeSerializableElement(descriptor, 2, serializerPart3.serializer, serializerPart3.generator(value))
        encodeSerializableElement(descriptor, 3, serializerPart4.serializer, serializerPart4.generator(value))
        encodeSerializableElement(descriptor, 4, serializerPart5.serializer, serializerPart5.generator(value))
        encodeSerializableElement(descriptor, 5, serializerPart6.serializer, serializerPart6.generator(value))
        encodeSerializableElement(descriptor, 6, serializerPart7.serializer, serializerPart7.generator(value))
        encodeSerializableElement(descriptor, 7, serializerPart8.serializer, serializerPart8.generator(value))
        encodeSerializableElement(descriptor, 8, serializerPart9.serializer, serializerPart9.generator(value))
        encodeSerializableElement(descriptor, 9, serializerPart10.serializer, serializerPart10.generator(value))
        encodeSerializableElement(descriptor, 10, serializerPart11.serializer, serializerPart11.generator(value))
        encodeSerializableElement(descriptor, 11, serializerPart12.serializer, serializerPart12.generator(value))
        encodeSerializableElement(descriptor, 12, serializerPart13.serializer, serializerPart13.generator(value))
        encodeSerializableElement(descriptor, 13, serializerPart14.serializer, serializerPart14.generator(value))
        encodeSerializableElement(descriptor, 14, serializerPart15.serializer, serializerPart15.generator(value))
        encodeSerializableElement(descriptor, 15, serializerPart16.serializer, serializerPart16.generator(value))
    }

    @OptIn(ExperimentalSerializationApi::class)
    final override fun deserialize(decoder: Decoder): T = decoder.decodeStructure(descriptor) {
        if (decodeSequentially()) {
            build(
                decodeSerializableElement(descriptor, 0, serializerPart1.serializer),
                decodeSerializableElement(descriptor, 1, serializerPart2.serializer),
                decodeSerializableElement(descriptor, 2, serializerPart3.serializer),
                decodeSerializableElement(descriptor, 3, serializerPart4.serializer),
                decodeSerializableElement(descriptor, 4, serializerPart5.serializer),
                decodeSerializableElement(descriptor, 5, serializerPart6.serializer),
                decodeSerializableElement(descriptor, 6, serializerPart7.serializer),
                decodeSerializableElement(descriptor, 7, serializerPart8.serializer),
                decodeSerializableElement(descriptor, 8, serializerPart9.serializer),
                decodeSerializableElement(descriptor, 9, serializerPart10.serializer),
                decodeSerializableElement(descriptor, 10, serializerPart11.serializer),
                decodeSerializableElement(descriptor, 11, serializerPart12.serializer),
                decodeSerializableElement(descriptor, 12, serializerPart13.serializer),
                decodeSerializableElement(descriptor, 13, serializerPart14.serializer),
                decodeSerializableElement(descriptor, 14, serializerPart15.serializer),
                decodeSerializableElement(descriptor, 15, serializerPart16.serializer),
            )
        } else {
            var value1: R1? = null
            var value2: R2? = null
            var value3: R3? = null
            var value4: R4? = null
            var value5: R5? = null
            var value6: R6? = null
            var value7: R7? = null
            var value8: R8? = null
            var value9: R9? = null
            var value10: R10? = null
            var value11: R11? = null
            var value12: R12? = null
            var value13: R13? = null
            var value14: R14? = null
            var value15: R15? = null
            var value16: R16? = null
            while (true) {
                when (val index = decodeElementIndex(descriptor)) {
                    0 -> value1 = decodeSerializableElement(descriptor, 0, serializerPart1.serializer)
                    1 -> value2 = decodeSerializableElement(descriptor, 1, serializerPart2.serializer)
                    2 -> value3 = decodeSerializableElement(descriptor, 2, serializerPart3.serializer)
                    3 -> value4 = decodeSerializableElement(descriptor, 3, serializerPart4.serializer)
                    4 -> value5 = decodeSerializableElement(descriptor, 4, serializerPart5.serializer)
                    5 -> value6 = decodeSerializableElement(descriptor, 5, serializerPart6.serializer)
                    6 -> value7 = decodeSerializableElement(descriptor, 6, serializerPart7.serializer)
                    7 -> value8 = decodeSerializableElement(descriptor, 7, serializerPart8.serializer)
                    8 -> value9 = decodeSerializableElement(descriptor, 8, serializerPart9.serializer)
                    9 -> value10 = decodeSerializableElement(descriptor, 9, serializerPart10.serializer)
                    10 -> value11 = decodeSerializableElement(descriptor, 10, serializerPart11.serializer)
                    11 -> value12 = decodeSerializableElement(descriptor, 11, serializerPart12.serializer)
                    12 -> value13 = decodeSerializableElement(descriptor, 12, serializerPart13.serializer)
                    13 -> value14 = decodeSerializableElement(descriptor, 13, serializerPart14.serializer)
                    14 -> value15 = decodeSerializableElement(descriptor, 14, serializerPart15.serializer)
                    15 -> value16 = decodeSerializableElement(descriptor, 15, serializerPart16.serializer)
                    CompositeDecoder.DECODE_DONE -> break
                    else -> error("Unexpected index: $index")
                }
            }
            return@decodeStructure build(
                value1 ?: error("Absent field: ${serializerPart1.name}"),
                value2 ?: error("Absent field: ${serializerPart2.name}"),
                value3 ?: error("Absent field: ${serializerPart3.name}"),
                value4 ?: error("Absent field: ${serializerPart4.name}"),
                value5 ?: error("Absent field: ${serializerPart5.name}"),
                value6 ?: error("Absent field: ${serializerPart6.name}"),
                value7 ?: error("Absent field: ${serializerPart7.name}"),
                value8 ?: error("Absent field: ${serializerPart8.name}"),
                value9 ?: error("Absent field: ${serializerPart9.name}"),
                value10 ?: error("Absent field: ${serializerPart10.name}"),
                value11 ?: error("Absent field: ${serializerPart11.name}"),
                value12 ?: error("Absent field: ${serializerPart12.name}"),
                value13 ?: error("Absent field: ${serializerPart13.name}"),
                value14 ?: error("Absent field: ${serializerPart14.name}"),
                value15 ?: error("Absent field: ${serializerPart15.name}"),
                value16 ?: error("Absent field: ${serializerPart16.name}"),
            )
        }
    }
}

fun <T, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16> classSerializer(
    descriptorName: String,
    serializerPart1: Property<T, R1>,
    serializerPart2: Property<T, R2>,
    serializerPart3: Property<T, R3>,
    serializerPart4: Property<T, R4>,
    serializerPart5: Property<T, R5>,
    serializerPart6: Property<T, R6>,
    serializerPart7: Property<T, R7>,
    serializerPart8: Property<T, R8>,
    serializerPart9: Property<T, R9>,
    serializerPart10: Property<T, R10>,
    serializerPart11: Property<T, R11>,
    serializerPart12: Property<T, R12>,
    serializerPart13: Property<T, R13>,
    serializerPart14: Property<T, R14>,
    serializerPart15: Property<T, R15>,
    serializerPart16: Property<T, R16>,
    build: (R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16) -> T,
) : KSerializer<T> = ClassKSerializer16(
    descriptorName,
    serializerPart1,
    serializerPart2,
    serializerPart3,
    serializerPart4,
    serializerPart5,
    serializerPart6,
    serializerPart7,
    serializerPart8,
    serializerPart9,
    serializerPart10,
    serializerPart11,
    serializerPart12,
    serializerPart13,
    serializerPart14,
    serializerPart15,
    serializerPart16,
    build,
)

open class ClassKSerializer17<T, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17>(
    private val descriptorName: String,
    private val serializerPart1: Property<T, R1>,
    private val serializerPart2: Property<T, R2>,
    private val serializerPart3: Property<T, R3>,
    private val serializerPart4: Property<T, R4>,
    private val serializerPart5: Property<T, R5>,
    private val serializerPart6: Property<T, R6>,
    private val serializerPart7: Property<T, R7>,
    private val serializerPart8: Property<T, R8>,
    private val serializerPart9: Property<T, R9>,
    private val serializerPart10: Property<T, R10>,
    private val serializerPart11: Property<T, R11>,
    private val serializerPart12: Property<T, R12>,
    private val serializerPart13: Property<T, R13>,
    private val serializerPart14: Property<T, R14>,
    private val serializerPart15: Property<T, R15>,
    private val serializerPart16: Property<T, R16>,
    private val serializerPart17: Property<T, R17>,
    private val build: (R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17) -> T,
) : KSerializer<T> {
    final override val descriptor: SerialDescriptor = buildClassSerialDescriptor(descriptorName) {
        element(serializerPart1.name, serializerPart1.serializer.descriptor)
        element(serializerPart2.name, serializerPart2.serializer.descriptor)
        element(serializerPart3.name, serializerPart3.serializer.descriptor)
        element(serializerPart4.name, serializerPart4.serializer.descriptor)
        element(serializerPart5.name, serializerPart5.serializer.descriptor)
        element(serializerPart6.name, serializerPart6.serializer.descriptor)
        element(serializerPart7.name, serializerPart7.serializer.descriptor)
        element(serializerPart8.name, serializerPart8.serializer.descriptor)
        element(serializerPart9.name, serializerPart9.serializer.descriptor)
        element(serializerPart10.name, serializerPart10.serializer.descriptor)
        element(serializerPart11.name, serializerPart11.serializer.descriptor)
        element(serializerPart12.name, serializerPart12.serializer.descriptor)
        element(serializerPart13.name, serializerPart13.serializer.descriptor)
        element(serializerPart14.name, serializerPart14.serializer.descriptor)
        element(serializerPart15.name, serializerPart15.serializer.descriptor)
        element(serializerPart16.name, serializerPart16.serializer.descriptor)
        element(serializerPart17.name, serializerPart17.serializer.descriptor)
    }

    final override fun serialize(encoder: Encoder, value: T) = encoder.encodeStructure(descriptor) {
        encodeSerializableElement(descriptor, 0, serializerPart1.serializer, serializerPart1.generator(value))
        encodeSerializableElement(descriptor, 1, serializerPart2.serializer, serializerPart2.generator(value))
        encodeSerializableElement(descriptor, 2, serializerPart3.serializer, serializerPart3.generator(value))
        encodeSerializableElement(descriptor, 3, serializerPart4.serializer, serializerPart4.generator(value))
        encodeSerializableElement(descriptor, 4, serializerPart5.serializer, serializerPart5.generator(value))
        encodeSerializableElement(descriptor, 5, serializerPart6.serializer, serializerPart6.generator(value))
        encodeSerializableElement(descriptor, 6, serializerPart7.serializer, serializerPart7.generator(value))
        encodeSerializableElement(descriptor, 7, serializerPart8.serializer, serializerPart8.generator(value))
        encodeSerializableElement(descriptor, 8, serializerPart9.serializer, serializerPart9.generator(value))
        encodeSerializableElement(descriptor, 9, serializerPart10.serializer, serializerPart10.generator(value))
        encodeSerializableElement(descriptor, 10, serializerPart11.serializer, serializerPart11.generator(value))
        encodeSerializableElement(descriptor, 11, serializerPart12.serializer, serializerPart12.generator(value))
        encodeSerializableElement(descriptor, 12, serializerPart13.serializer, serializerPart13.generator(value))
        encodeSerializableElement(descriptor, 13, serializerPart14.serializer, serializerPart14.generator(value))
        encodeSerializableElement(descriptor, 14, serializerPart15.serializer, serializerPart15.generator(value))
        encodeSerializableElement(descriptor, 15, serializerPart16.serializer, serializerPart16.generator(value))
        encodeSerializableElement(descriptor, 16, serializerPart17.serializer, serializerPart17.generator(value))
    }

    @OptIn(ExperimentalSerializationApi::class)
    final override fun deserialize(decoder: Decoder): T = decoder.decodeStructure(descriptor) {
        if (decodeSequentially()) {
            build(
                decodeSerializableElement(descriptor, 0, serializerPart1.serializer),
                decodeSerializableElement(descriptor, 1, serializerPart2.serializer),
                decodeSerializableElement(descriptor, 2, serializerPart3.serializer),
                decodeSerializableElement(descriptor, 3, serializerPart4.serializer),
                decodeSerializableElement(descriptor, 4, serializerPart5.serializer),
                decodeSerializableElement(descriptor, 5, serializerPart6.serializer),
                decodeSerializableElement(descriptor, 6, serializerPart7.serializer),
                decodeSerializableElement(descriptor, 7, serializerPart8.serializer),
                decodeSerializableElement(descriptor, 8, serializerPart9.serializer),
                decodeSerializableElement(descriptor, 9, serializerPart10.serializer),
                decodeSerializableElement(descriptor, 10, serializerPart11.serializer),
                decodeSerializableElement(descriptor, 11, serializerPart12.serializer),
                decodeSerializableElement(descriptor, 12, serializerPart13.serializer),
                decodeSerializableElement(descriptor, 13, serializerPart14.serializer),
                decodeSerializableElement(descriptor, 14, serializerPart15.serializer),
                decodeSerializableElement(descriptor, 15, serializerPart16.serializer),
                decodeSerializableElement(descriptor, 16, serializerPart17.serializer),
            )
        } else {
            var value1: R1? = null
            var value2: R2? = null
            var value3: R3? = null
            var value4: R4? = null
            var value5: R5? = null
            var value6: R6? = null
            var value7: R7? = null
            var value8: R8? = null
            var value9: R9? = null
            var value10: R10? = null
            var value11: R11? = null
            var value12: R12? = null
            var value13: R13? = null
            var value14: R14? = null
            var value15: R15? = null
            var value16: R16? = null
            var value17: R17? = null
            while (true) {
                when (val index = decodeElementIndex(descriptor)) {
                    0 -> value1 = decodeSerializableElement(descriptor, 0, serializerPart1.serializer)
                    1 -> value2 = decodeSerializableElement(descriptor, 1, serializerPart2.serializer)
                    2 -> value3 = decodeSerializableElement(descriptor, 2, serializerPart3.serializer)
                    3 -> value4 = decodeSerializableElement(descriptor, 3, serializerPart4.serializer)
                    4 -> value5 = decodeSerializableElement(descriptor, 4, serializerPart5.serializer)
                    5 -> value6 = decodeSerializableElement(descriptor, 5, serializerPart6.serializer)
                    6 -> value7 = decodeSerializableElement(descriptor, 6, serializerPart7.serializer)
                    7 -> value8 = decodeSerializableElement(descriptor, 7, serializerPart8.serializer)
                    8 -> value9 = decodeSerializableElement(descriptor, 8, serializerPart9.serializer)
                    9 -> value10 = decodeSerializableElement(descriptor, 9, serializerPart10.serializer)
                    10 -> value11 = decodeSerializableElement(descriptor, 10, serializerPart11.serializer)
                    11 -> value12 = decodeSerializableElement(descriptor, 11, serializerPart12.serializer)
                    12 -> value13 = decodeSerializableElement(descriptor, 12, serializerPart13.serializer)
                    13 -> value14 = decodeSerializableElement(descriptor, 13, serializerPart14.serializer)
                    14 -> value15 = decodeSerializableElement(descriptor, 14, serializerPart15.serializer)
                    15 -> value16 = decodeSerializableElement(descriptor, 15, serializerPart16.serializer)
                    16 -> value17 = decodeSerializableElement(descriptor, 16, serializerPart17.serializer)
                    CompositeDecoder.DECODE_DONE -> break
                    else -> error("Unexpected index: $index")
                }
            }
            return@decodeStructure build(
                value1 ?: error("Absent field: ${serializerPart1.name}"),
                value2 ?: error("Absent field: ${serializerPart2.name}"),
                value3 ?: error("Absent field: ${serializerPart3.name}"),
                value4 ?: error("Absent field: ${serializerPart4.name}"),
                value5 ?: error("Absent field: ${serializerPart5.name}"),
                value6 ?: error("Absent field: ${serializerPart6.name}"),
                value7 ?: error("Absent field: ${serializerPart7.name}"),
                value8 ?: error("Absent field: ${serializerPart8.name}"),
                value9 ?: error("Absent field: ${serializerPart9.name}"),
                value10 ?: error("Absent field: ${serializerPart10.name}"),
                value11 ?: error("Absent field: ${serializerPart11.name}"),
                value12 ?: error("Absent field: ${serializerPart12.name}"),
                value13 ?: error("Absent field: ${serializerPart13.name}"),
                value14 ?: error("Absent field: ${serializerPart14.name}"),
                value15 ?: error("Absent field: ${serializerPart15.name}"),
                value16 ?: error("Absent field: ${serializerPart16.name}"),
                value17 ?: error("Absent field: ${serializerPart17.name}"),
            )
        }
    }
}

fun <T, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17> classSerializer(
    descriptorName: String,
    serializerPart1: Property<T, R1>,
    serializerPart2: Property<T, R2>,
    serializerPart3: Property<T, R3>,
    serializerPart4: Property<T, R4>,
    serializerPart5: Property<T, R5>,
    serializerPart6: Property<T, R6>,
    serializerPart7: Property<T, R7>,
    serializerPart8: Property<T, R8>,
    serializerPart9: Property<T, R9>,
    serializerPart10: Property<T, R10>,
    serializerPart11: Property<T, R11>,
    serializerPart12: Property<T, R12>,
    serializerPart13: Property<T, R13>,
    serializerPart14: Property<T, R14>,
    serializerPart15: Property<T, R15>,
    serializerPart16: Property<T, R16>,
    serializerPart17: Property<T, R17>,
    build: (R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17) -> T,
) : KSerializer<T> = ClassKSerializer17(
    descriptorName,
    serializerPart1,
    serializerPart2,
    serializerPart3,
    serializerPart4,
    serializerPart5,
    serializerPart6,
    serializerPart7,
    serializerPart8,
    serializerPart9,
    serializerPart10,
    serializerPart11,
    serializerPart12,
    serializerPart13,
    serializerPart14,
    serializerPart15,
    serializerPart16,
    serializerPart17,
    build,
)

open class ClassKSerializer18<T, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18>(
    private val descriptorName: String,
    private val serializerPart1: Property<T, R1>,
    private val serializerPart2: Property<T, R2>,
    private val serializerPart3: Property<T, R3>,
    private val serializerPart4: Property<T, R4>,
    private val serializerPart5: Property<T, R5>,
    private val serializerPart6: Property<T, R6>,
    private val serializerPart7: Property<T, R7>,
    private val serializerPart8: Property<T, R8>,
    private val serializerPart9: Property<T, R9>,
    private val serializerPart10: Property<T, R10>,
    private val serializerPart11: Property<T, R11>,
    private val serializerPart12: Property<T, R12>,
    private val serializerPart13: Property<T, R13>,
    private val serializerPart14: Property<T, R14>,
    private val serializerPart15: Property<T, R15>,
    private val serializerPart16: Property<T, R16>,
    private val serializerPart17: Property<T, R17>,
    private val serializerPart18: Property<T, R18>,
    private val build: (R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18) -> T,
) : KSerializer<T> {
    final override val descriptor: SerialDescriptor = buildClassSerialDescriptor(descriptorName) {
        element(serializerPart1.name, serializerPart1.serializer.descriptor)
        element(serializerPart2.name, serializerPart2.serializer.descriptor)
        element(serializerPart3.name, serializerPart3.serializer.descriptor)
        element(serializerPart4.name, serializerPart4.serializer.descriptor)
        element(serializerPart5.name, serializerPart5.serializer.descriptor)
        element(serializerPart6.name, serializerPart6.serializer.descriptor)
        element(serializerPart7.name, serializerPart7.serializer.descriptor)
        element(serializerPart8.name, serializerPart8.serializer.descriptor)
        element(serializerPart9.name, serializerPart9.serializer.descriptor)
        element(serializerPart10.name, serializerPart10.serializer.descriptor)
        element(serializerPart11.name, serializerPart11.serializer.descriptor)
        element(serializerPart12.name, serializerPart12.serializer.descriptor)
        element(serializerPart13.name, serializerPart13.serializer.descriptor)
        element(serializerPart14.name, serializerPart14.serializer.descriptor)
        element(serializerPart15.name, serializerPart15.serializer.descriptor)
        element(serializerPart16.name, serializerPart16.serializer.descriptor)
        element(serializerPart17.name, serializerPart17.serializer.descriptor)
        element(serializerPart18.name, serializerPart18.serializer.descriptor)
    }

    final override fun serialize(encoder: Encoder, value: T) = encoder.encodeStructure(descriptor) {
        encodeSerializableElement(descriptor, 0, serializerPart1.serializer, serializerPart1.generator(value))
        encodeSerializableElement(descriptor, 1, serializerPart2.serializer, serializerPart2.generator(value))
        encodeSerializableElement(descriptor, 2, serializerPart3.serializer, serializerPart3.generator(value))
        encodeSerializableElement(descriptor, 3, serializerPart4.serializer, serializerPart4.generator(value))
        encodeSerializableElement(descriptor, 4, serializerPart5.serializer, serializerPart5.generator(value))
        encodeSerializableElement(descriptor, 5, serializerPart6.serializer, serializerPart6.generator(value))
        encodeSerializableElement(descriptor, 6, serializerPart7.serializer, serializerPart7.generator(value))
        encodeSerializableElement(descriptor, 7, serializerPart8.serializer, serializerPart8.generator(value))
        encodeSerializableElement(descriptor, 8, serializerPart9.serializer, serializerPart9.generator(value))
        encodeSerializableElement(descriptor, 9, serializerPart10.serializer, serializerPart10.generator(value))
        encodeSerializableElement(descriptor, 10, serializerPart11.serializer, serializerPart11.generator(value))
        encodeSerializableElement(descriptor, 11, serializerPart12.serializer, serializerPart12.generator(value))
        encodeSerializableElement(descriptor, 12, serializerPart13.serializer, serializerPart13.generator(value))
        encodeSerializableElement(descriptor, 13, serializerPart14.serializer, serializerPart14.generator(value))
        encodeSerializableElement(descriptor, 14, serializerPart15.serializer, serializerPart15.generator(value))
        encodeSerializableElement(descriptor, 15, serializerPart16.serializer, serializerPart16.generator(value))
        encodeSerializableElement(descriptor, 16, serializerPart17.serializer, serializerPart17.generator(value))
        encodeSerializableElement(descriptor, 17, serializerPart18.serializer, serializerPart18.generator(value))
    }

    @OptIn(ExperimentalSerializationApi::class)
    final override fun deserialize(decoder: Decoder): T = decoder.decodeStructure(descriptor) {
        if (decodeSequentially()) {
            build(
                decodeSerializableElement(descriptor, 0, serializerPart1.serializer),
                decodeSerializableElement(descriptor, 1, serializerPart2.serializer),
                decodeSerializableElement(descriptor, 2, serializerPart3.serializer),
                decodeSerializableElement(descriptor, 3, serializerPart4.serializer),
                decodeSerializableElement(descriptor, 4, serializerPart5.serializer),
                decodeSerializableElement(descriptor, 5, serializerPart6.serializer),
                decodeSerializableElement(descriptor, 6, serializerPart7.serializer),
                decodeSerializableElement(descriptor, 7, serializerPart8.serializer),
                decodeSerializableElement(descriptor, 8, serializerPart9.serializer),
                decodeSerializableElement(descriptor, 9, serializerPart10.serializer),
                decodeSerializableElement(descriptor, 10, serializerPart11.serializer),
                decodeSerializableElement(descriptor, 11, serializerPart12.serializer),
                decodeSerializableElement(descriptor, 12, serializerPart13.serializer),
                decodeSerializableElement(descriptor, 13, serializerPart14.serializer),
                decodeSerializableElement(descriptor, 14, serializerPart15.serializer),
                decodeSerializableElement(descriptor, 15, serializerPart16.serializer),
                decodeSerializableElement(descriptor, 16, serializerPart17.serializer),
                decodeSerializableElement(descriptor, 17, serializerPart18.serializer),
            )
        } else {
            var value1: R1? = null
            var value2: R2? = null
            var value3: R3? = null
            var value4: R4? = null
            var value5: R5? = null
            var value6: R6? = null
            var value7: R7? = null
            var value8: R8? = null
            var value9: R9? = null
            var value10: R10? = null
            var value11: R11? = null
            var value12: R12? = null
            var value13: R13? = null
            var value14: R14? = null
            var value15: R15? = null
            var value16: R16? = null
            var value17: R17? = null
            var value18: R18? = null
            while (true) {
                when (val index = decodeElementIndex(descriptor)) {
                    0 -> value1 = decodeSerializableElement(descriptor, 0, serializerPart1.serializer)
                    1 -> value2 = decodeSerializableElement(descriptor, 1, serializerPart2.serializer)
                    2 -> value3 = decodeSerializableElement(descriptor, 2, serializerPart3.serializer)
                    3 -> value4 = decodeSerializableElement(descriptor, 3, serializerPart4.serializer)
                    4 -> value5 = decodeSerializableElement(descriptor, 4, serializerPart5.serializer)
                    5 -> value6 = decodeSerializableElement(descriptor, 5, serializerPart6.serializer)
                    6 -> value7 = decodeSerializableElement(descriptor, 6, serializerPart7.serializer)
                    7 -> value8 = decodeSerializableElement(descriptor, 7, serializerPart8.serializer)
                    8 -> value9 = decodeSerializableElement(descriptor, 8, serializerPart9.serializer)
                    9 -> value10 = decodeSerializableElement(descriptor, 9, serializerPart10.serializer)
                    10 -> value11 = decodeSerializableElement(descriptor, 10, serializerPart11.serializer)
                    11 -> value12 = decodeSerializableElement(descriptor, 11, serializerPart12.serializer)
                    12 -> value13 = decodeSerializableElement(descriptor, 12, serializerPart13.serializer)
                    13 -> value14 = decodeSerializableElement(descriptor, 13, serializerPart14.serializer)
                    14 -> value15 = decodeSerializableElement(descriptor, 14, serializerPart15.serializer)
                    15 -> value16 = decodeSerializableElement(descriptor, 15, serializerPart16.serializer)
                    16 -> value17 = decodeSerializableElement(descriptor, 16, serializerPart17.serializer)
                    17 -> value18 = decodeSerializableElement(descriptor, 17, serializerPart18.serializer)
                    CompositeDecoder.DECODE_DONE -> break
                    else -> error("Unexpected index: $index")
                }
            }
            return@decodeStructure build(
                value1 ?: error("Absent field: ${serializerPart1.name}"),
                value2 ?: error("Absent field: ${serializerPart2.name}"),
                value3 ?: error("Absent field: ${serializerPart3.name}"),
                value4 ?: error("Absent field: ${serializerPart4.name}"),
                value5 ?: error("Absent field: ${serializerPart5.name}"),
                value6 ?: error("Absent field: ${serializerPart6.name}"),
                value7 ?: error("Absent field: ${serializerPart7.name}"),
                value8 ?: error("Absent field: ${serializerPart8.name}"),
                value9 ?: error("Absent field: ${serializerPart9.name}"),
                value10 ?: error("Absent field: ${serializerPart10.name}"),
                value11 ?: error("Absent field: ${serializerPart11.name}"),
                value12 ?: error("Absent field: ${serializerPart12.name}"),
                value13 ?: error("Absent field: ${serializerPart13.name}"),
                value14 ?: error("Absent field: ${serializerPart14.name}"),
                value15 ?: error("Absent field: ${serializerPart15.name}"),
                value16 ?: error("Absent field: ${serializerPart16.name}"),
                value17 ?: error("Absent field: ${serializerPart17.name}"),
                value18 ?: error("Absent field: ${serializerPart18.name}"),
            )
        }
    }
}

fun <T, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18> classSerializer(
    descriptorName: String,
    serializerPart1: Property<T, R1>,
    serializerPart2: Property<T, R2>,
    serializerPart3: Property<T, R3>,
    serializerPart4: Property<T, R4>,
    serializerPart5: Property<T, R5>,
    serializerPart6: Property<T, R6>,
    serializerPart7: Property<T, R7>,
    serializerPart8: Property<T, R8>,
    serializerPart9: Property<T, R9>,
    serializerPart10: Property<T, R10>,
    serializerPart11: Property<T, R11>,
    serializerPart12: Property<T, R12>,
    serializerPart13: Property<T, R13>,
    serializerPart14: Property<T, R14>,
    serializerPart15: Property<T, R15>,
    serializerPart16: Property<T, R16>,
    serializerPart17: Property<T, R17>,
    serializerPart18: Property<T, R18>,
    build: (R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18) -> T,
) : KSerializer<T> = ClassKSerializer18(
    descriptorName,
    serializerPart1,
    serializerPart2,
    serializerPart3,
    serializerPart4,
    serializerPart5,
    serializerPart6,
    serializerPart7,
    serializerPart8,
    serializerPart9,
    serializerPart10,
    serializerPart11,
    serializerPart12,
    serializerPart13,
    serializerPart14,
    serializerPart15,
    serializerPart16,
    serializerPart17,
    serializerPart18,
    build,
)

open class ClassKSerializer19<T, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19>(
    private val descriptorName: String,
    private val serializerPart1: Property<T, R1>,
    private val serializerPart2: Property<T, R2>,
    private val serializerPart3: Property<T, R3>,
    private val serializerPart4: Property<T, R4>,
    private val serializerPart5: Property<T, R5>,
    private val serializerPart6: Property<T, R6>,
    private val serializerPart7: Property<T, R7>,
    private val serializerPart8: Property<T, R8>,
    private val serializerPart9: Property<T, R9>,
    private val serializerPart10: Property<T, R10>,
    private val serializerPart11: Property<T, R11>,
    private val serializerPart12: Property<T, R12>,
    private val serializerPart13: Property<T, R13>,
    private val serializerPart14: Property<T, R14>,
    private val serializerPart15: Property<T, R15>,
    private val serializerPart16: Property<T, R16>,
    private val serializerPart17: Property<T, R17>,
    private val serializerPart18: Property<T, R18>,
    private val serializerPart19: Property<T, R19>,
    private val build: (R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19) -> T,
) : KSerializer<T> {
    final override val descriptor: SerialDescriptor = buildClassSerialDescriptor(descriptorName) {
        element(serializerPart1.name, serializerPart1.serializer.descriptor)
        element(serializerPart2.name, serializerPart2.serializer.descriptor)
        element(serializerPart3.name, serializerPart3.serializer.descriptor)
        element(serializerPart4.name, serializerPart4.serializer.descriptor)
        element(serializerPart5.name, serializerPart5.serializer.descriptor)
        element(serializerPart6.name, serializerPart6.serializer.descriptor)
        element(serializerPart7.name, serializerPart7.serializer.descriptor)
        element(serializerPart8.name, serializerPart8.serializer.descriptor)
        element(serializerPart9.name, serializerPart9.serializer.descriptor)
        element(serializerPart10.name, serializerPart10.serializer.descriptor)
        element(serializerPart11.name, serializerPart11.serializer.descriptor)
        element(serializerPart12.name, serializerPart12.serializer.descriptor)
        element(serializerPart13.name, serializerPart13.serializer.descriptor)
        element(serializerPart14.name, serializerPart14.serializer.descriptor)
        element(serializerPart15.name, serializerPart15.serializer.descriptor)
        element(serializerPart16.name, serializerPart16.serializer.descriptor)
        element(serializerPart17.name, serializerPart17.serializer.descriptor)
        element(serializerPart18.name, serializerPart18.serializer.descriptor)
        element(serializerPart19.name, serializerPart19.serializer.descriptor)
    }

    final override fun serialize(encoder: Encoder, value: T) = encoder.encodeStructure(descriptor) {
        encodeSerializableElement(descriptor, 0, serializerPart1.serializer, serializerPart1.generator(value))
        encodeSerializableElement(descriptor, 1, serializerPart2.serializer, serializerPart2.generator(value))
        encodeSerializableElement(descriptor, 2, serializerPart3.serializer, serializerPart3.generator(value))
        encodeSerializableElement(descriptor, 3, serializerPart4.serializer, serializerPart4.generator(value))
        encodeSerializableElement(descriptor, 4, serializerPart5.serializer, serializerPart5.generator(value))
        encodeSerializableElement(descriptor, 5, serializerPart6.serializer, serializerPart6.generator(value))
        encodeSerializableElement(descriptor, 6, serializerPart7.serializer, serializerPart7.generator(value))
        encodeSerializableElement(descriptor, 7, serializerPart8.serializer, serializerPart8.generator(value))
        encodeSerializableElement(descriptor, 8, serializerPart9.serializer, serializerPart9.generator(value))
        encodeSerializableElement(descriptor, 9, serializerPart10.serializer, serializerPart10.generator(value))
        encodeSerializableElement(descriptor, 10, serializerPart11.serializer, serializerPart11.generator(value))
        encodeSerializableElement(descriptor, 11, serializerPart12.serializer, serializerPart12.generator(value))
        encodeSerializableElement(descriptor, 12, serializerPart13.serializer, serializerPart13.generator(value))
        encodeSerializableElement(descriptor, 13, serializerPart14.serializer, serializerPart14.generator(value))
        encodeSerializableElement(descriptor, 14, serializerPart15.serializer, serializerPart15.generator(value))
        encodeSerializableElement(descriptor, 15, serializerPart16.serializer, serializerPart16.generator(value))
        encodeSerializableElement(descriptor, 16, serializerPart17.serializer, serializerPart17.generator(value))
        encodeSerializableElement(descriptor, 17, serializerPart18.serializer, serializerPart18.generator(value))
        encodeSerializableElement(descriptor, 18, serializerPart19.serializer, serializerPart19.generator(value))
    }

    @OptIn(ExperimentalSerializationApi::class)
    final override fun deserialize(decoder: Decoder): T = decoder.decodeStructure(descriptor) {
        if (decodeSequentially()) {
            build(
                decodeSerializableElement(descriptor, 0, serializerPart1.serializer),
                decodeSerializableElement(descriptor, 1, serializerPart2.serializer),
                decodeSerializableElement(descriptor, 2, serializerPart3.serializer),
                decodeSerializableElement(descriptor, 3, serializerPart4.serializer),
                decodeSerializableElement(descriptor, 4, serializerPart5.serializer),
                decodeSerializableElement(descriptor, 5, serializerPart6.serializer),
                decodeSerializableElement(descriptor, 6, serializerPart7.serializer),
                decodeSerializableElement(descriptor, 7, serializerPart8.serializer),
                decodeSerializableElement(descriptor, 8, serializerPart9.serializer),
                decodeSerializableElement(descriptor, 9, serializerPart10.serializer),
                decodeSerializableElement(descriptor, 10, serializerPart11.serializer),
                decodeSerializableElement(descriptor, 11, serializerPart12.serializer),
                decodeSerializableElement(descriptor, 12, serializerPart13.serializer),
                decodeSerializableElement(descriptor, 13, serializerPart14.serializer),
                decodeSerializableElement(descriptor, 14, serializerPart15.serializer),
                decodeSerializableElement(descriptor, 15, serializerPart16.serializer),
                decodeSerializableElement(descriptor, 16, serializerPart17.serializer),
                decodeSerializableElement(descriptor, 17, serializerPart18.serializer),
                decodeSerializableElement(descriptor, 18, serializerPart19.serializer),
            )
        } else {
            var value1: R1? = null
            var value2: R2? = null
            var value3: R3? = null
            var value4: R4? = null
            var value5: R5? = null
            var value6: R6? = null
            var value7: R7? = null
            var value8: R8? = null
            var value9: R9? = null
            var value10: R10? = null
            var value11: R11? = null
            var value12: R12? = null
            var value13: R13? = null
            var value14: R14? = null
            var value15: R15? = null
            var value16: R16? = null
            var value17: R17? = null
            var value18: R18? = null
            var value19: R19? = null
            while (true) {
                when (val index = decodeElementIndex(descriptor)) {
                    0 -> value1 = decodeSerializableElement(descriptor, 0, serializerPart1.serializer)
                    1 -> value2 = decodeSerializableElement(descriptor, 1, serializerPart2.serializer)
                    2 -> value3 = decodeSerializableElement(descriptor, 2, serializerPart3.serializer)
                    3 -> value4 = decodeSerializableElement(descriptor, 3, serializerPart4.serializer)
                    4 -> value5 = decodeSerializableElement(descriptor, 4, serializerPart5.serializer)
                    5 -> value6 = decodeSerializableElement(descriptor, 5, serializerPart6.serializer)
                    6 -> value7 = decodeSerializableElement(descriptor, 6, serializerPart7.serializer)
                    7 -> value8 = decodeSerializableElement(descriptor, 7, serializerPart8.serializer)
                    8 -> value9 = decodeSerializableElement(descriptor, 8, serializerPart9.serializer)
                    9 -> value10 = decodeSerializableElement(descriptor, 9, serializerPart10.serializer)
                    10 -> value11 = decodeSerializableElement(descriptor, 10, serializerPart11.serializer)
                    11 -> value12 = decodeSerializableElement(descriptor, 11, serializerPart12.serializer)
                    12 -> value13 = decodeSerializableElement(descriptor, 12, serializerPart13.serializer)
                    13 -> value14 = decodeSerializableElement(descriptor, 13, serializerPart14.serializer)
                    14 -> value15 = decodeSerializableElement(descriptor, 14, serializerPart15.serializer)
                    15 -> value16 = decodeSerializableElement(descriptor, 15, serializerPart16.serializer)
                    16 -> value17 = decodeSerializableElement(descriptor, 16, serializerPart17.serializer)
                    17 -> value18 = decodeSerializableElement(descriptor, 17, serializerPart18.serializer)
                    18 -> value19 = decodeSerializableElement(descriptor, 18, serializerPart19.serializer)
                    CompositeDecoder.DECODE_DONE -> break
                    else -> error("Unexpected index: $index")
                }
            }
            return@decodeStructure build(
                value1 ?: error("Absent field: ${serializerPart1.name}"),
                value2 ?: error("Absent field: ${serializerPart2.name}"),
                value3 ?: error("Absent field: ${serializerPart3.name}"),
                value4 ?: error("Absent field: ${serializerPart4.name}"),
                value5 ?: error("Absent field: ${serializerPart5.name}"),
                value6 ?: error("Absent field: ${serializerPart6.name}"),
                value7 ?: error("Absent field: ${serializerPart7.name}"),
                value8 ?: error("Absent field: ${serializerPart8.name}"),
                value9 ?: error("Absent field: ${serializerPart9.name}"),
                value10 ?: error("Absent field: ${serializerPart10.name}"),
                value11 ?: error("Absent field: ${serializerPart11.name}"),
                value12 ?: error("Absent field: ${serializerPart12.name}"),
                value13 ?: error("Absent field: ${serializerPart13.name}"),
                value14 ?: error("Absent field: ${serializerPart14.name}"),
                value15 ?: error("Absent field: ${serializerPart15.name}"),
                value16 ?: error("Absent field: ${serializerPart16.name}"),
                value17 ?: error("Absent field: ${serializerPart17.name}"),
                value18 ?: error("Absent field: ${serializerPart18.name}"),
                value19 ?: error("Absent field: ${serializerPart19.name}"),
            )
        }
    }
}

fun <T, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19> classSerializer(
    descriptorName: String,
    serializerPart1: Property<T, R1>,
    serializerPart2: Property<T, R2>,
    serializerPart3: Property<T, R3>,
    serializerPart4: Property<T, R4>,
    serializerPart5: Property<T, R5>,
    serializerPart6: Property<T, R6>,
    serializerPart7: Property<T, R7>,
    serializerPart8: Property<T, R8>,
    serializerPart9: Property<T, R9>,
    serializerPart10: Property<T, R10>,
    serializerPart11: Property<T, R11>,
    serializerPart12: Property<T, R12>,
    serializerPart13: Property<T, R13>,
    serializerPart14: Property<T, R14>,
    serializerPart15: Property<T, R15>,
    serializerPart16: Property<T, R16>,
    serializerPart17: Property<T, R17>,
    serializerPart18: Property<T, R18>,
    serializerPart19: Property<T, R19>,
    build: (R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19) -> T,
) : KSerializer<T> = ClassKSerializer19(
    descriptorName,
    serializerPart1,
    serializerPart2,
    serializerPart3,
    serializerPart4,
    serializerPart5,
    serializerPart6,
    serializerPart7,
    serializerPart8,
    serializerPart9,
    serializerPart10,
    serializerPart11,
    serializerPart12,
    serializerPart13,
    serializerPart14,
    serializerPart15,
    serializerPart16,
    serializerPart17,
    serializerPart18,
    serializerPart19,
    build,
)

open class ClassKSerializer20<T, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20>(
    private val descriptorName: String,
    private val serializerPart1: Property<T, R1>,
    private val serializerPart2: Property<T, R2>,
    private val serializerPart3: Property<T, R3>,
    private val serializerPart4: Property<T, R4>,
    private val serializerPart5: Property<T, R5>,
    private val serializerPart6: Property<T, R6>,
    private val serializerPart7: Property<T, R7>,
    private val serializerPart8: Property<T, R8>,
    private val serializerPart9: Property<T, R9>,
    private val serializerPart10: Property<T, R10>,
    private val serializerPart11: Property<T, R11>,
    private val serializerPart12: Property<T, R12>,
    private val serializerPart13: Property<T, R13>,
    private val serializerPart14: Property<T, R14>,
    private val serializerPart15: Property<T, R15>,
    private val serializerPart16: Property<T, R16>,
    private val serializerPart17: Property<T, R17>,
    private val serializerPart18: Property<T, R18>,
    private val serializerPart19: Property<T, R19>,
    private val serializerPart20: Property<T, R20>,
    private val build: (R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20) -> T,
) : KSerializer<T> {
    final override val descriptor: SerialDescriptor = buildClassSerialDescriptor(descriptorName) {
        element(serializerPart1.name, serializerPart1.serializer.descriptor)
        element(serializerPart2.name, serializerPart2.serializer.descriptor)
        element(serializerPart3.name, serializerPart3.serializer.descriptor)
        element(serializerPart4.name, serializerPart4.serializer.descriptor)
        element(serializerPart5.name, serializerPart5.serializer.descriptor)
        element(serializerPart6.name, serializerPart6.serializer.descriptor)
        element(serializerPart7.name, serializerPart7.serializer.descriptor)
        element(serializerPart8.name, serializerPart8.serializer.descriptor)
        element(serializerPart9.name, serializerPart9.serializer.descriptor)
        element(serializerPart10.name, serializerPart10.serializer.descriptor)
        element(serializerPart11.name, serializerPart11.serializer.descriptor)
        element(serializerPart12.name, serializerPart12.serializer.descriptor)
        element(serializerPart13.name, serializerPart13.serializer.descriptor)
        element(serializerPart14.name, serializerPart14.serializer.descriptor)
        element(serializerPart15.name, serializerPart15.serializer.descriptor)
        element(serializerPart16.name, serializerPart16.serializer.descriptor)
        element(serializerPart17.name, serializerPart17.serializer.descriptor)
        element(serializerPart18.name, serializerPart18.serializer.descriptor)
        element(serializerPart19.name, serializerPart19.serializer.descriptor)
        element(serializerPart20.name, serializerPart20.serializer.descriptor)
    }

    final override fun serialize(encoder: Encoder, value: T) = encoder.encodeStructure(descriptor) {
        encodeSerializableElement(descriptor, 0, serializerPart1.serializer, serializerPart1.generator(value))
        encodeSerializableElement(descriptor, 1, serializerPart2.serializer, serializerPart2.generator(value))
        encodeSerializableElement(descriptor, 2, serializerPart3.serializer, serializerPart3.generator(value))
        encodeSerializableElement(descriptor, 3, serializerPart4.serializer, serializerPart4.generator(value))
        encodeSerializableElement(descriptor, 4, serializerPart5.serializer, serializerPart5.generator(value))
        encodeSerializableElement(descriptor, 5, serializerPart6.serializer, serializerPart6.generator(value))
        encodeSerializableElement(descriptor, 6, serializerPart7.serializer, serializerPart7.generator(value))
        encodeSerializableElement(descriptor, 7, serializerPart8.serializer, serializerPart8.generator(value))
        encodeSerializableElement(descriptor, 8, serializerPart9.serializer, serializerPart9.generator(value))
        encodeSerializableElement(descriptor, 9, serializerPart10.serializer, serializerPart10.generator(value))
        encodeSerializableElement(descriptor, 10, serializerPart11.serializer, serializerPart11.generator(value))
        encodeSerializableElement(descriptor, 11, serializerPart12.serializer, serializerPart12.generator(value))
        encodeSerializableElement(descriptor, 12, serializerPart13.serializer, serializerPart13.generator(value))
        encodeSerializableElement(descriptor, 13, serializerPart14.serializer, serializerPart14.generator(value))
        encodeSerializableElement(descriptor, 14, serializerPart15.serializer, serializerPart15.generator(value))
        encodeSerializableElement(descriptor, 15, serializerPart16.serializer, serializerPart16.generator(value))
        encodeSerializableElement(descriptor, 16, serializerPart17.serializer, serializerPart17.generator(value))
        encodeSerializableElement(descriptor, 17, serializerPart18.serializer, serializerPart18.generator(value))
        encodeSerializableElement(descriptor, 18, serializerPart19.serializer, serializerPart19.generator(value))
        encodeSerializableElement(descriptor, 19, serializerPart20.serializer, serializerPart20.generator(value))
    }

    @OptIn(ExperimentalSerializationApi::class)
    final override fun deserialize(decoder: Decoder): T = decoder.decodeStructure(descriptor) {
        if (decodeSequentially()) {
            build(
                decodeSerializableElement(descriptor, 0, serializerPart1.serializer),
                decodeSerializableElement(descriptor, 1, serializerPart2.serializer),
                decodeSerializableElement(descriptor, 2, serializerPart3.serializer),
                decodeSerializableElement(descriptor, 3, serializerPart4.serializer),
                decodeSerializableElement(descriptor, 4, serializerPart5.serializer),
                decodeSerializableElement(descriptor, 5, serializerPart6.serializer),
                decodeSerializableElement(descriptor, 6, serializerPart7.serializer),
                decodeSerializableElement(descriptor, 7, serializerPart8.serializer),
                decodeSerializableElement(descriptor, 8, serializerPart9.serializer),
                decodeSerializableElement(descriptor, 9, serializerPart10.serializer),
                decodeSerializableElement(descriptor, 10, serializerPart11.serializer),
                decodeSerializableElement(descriptor, 11, serializerPart12.serializer),
                decodeSerializableElement(descriptor, 12, serializerPart13.serializer),
                decodeSerializableElement(descriptor, 13, serializerPart14.serializer),
                decodeSerializableElement(descriptor, 14, serializerPart15.serializer),
                decodeSerializableElement(descriptor, 15, serializerPart16.serializer),
                decodeSerializableElement(descriptor, 16, serializerPart17.serializer),
                decodeSerializableElement(descriptor, 17, serializerPart18.serializer),
                decodeSerializableElement(descriptor, 18, serializerPart19.serializer),
                decodeSerializableElement(descriptor, 19, serializerPart20.serializer),
            )
        } else {
            var value1: R1? = null
            var value2: R2? = null
            var value3: R3? = null
            var value4: R4? = null
            var value5: R5? = null
            var value6: R6? = null
            var value7: R7? = null
            var value8: R8? = null
            var value9: R9? = null
            var value10: R10? = null
            var value11: R11? = null
            var value12: R12? = null
            var value13: R13? = null
            var value14: R14? = null
            var value15: R15? = null
            var value16: R16? = null
            var value17: R17? = null
            var value18: R18? = null
            var value19: R19? = null
            var value20: R20? = null
            while (true) {
                when (val index = decodeElementIndex(descriptor)) {
                    0 -> value1 = decodeSerializableElement(descriptor, 0, serializerPart1.serializer)
                    1 -> value2 = decodeSerializableElement(descriptor, 1, serializerPart2.serializer)
                    2 -> value3 = decodeSerializableElement(descriptor, 2, serializerPart3.serializer)
                    3 -> value4 = decodeSerializableElement(descriptor, 3, serializerPart4.serializer)
                    4 -> value5 = decodeSerializableElement(descriptor, 4, serializerPart5.serializer)
                    5 -> value6 = decodeSerializableElement(descriptor, 5, serializerPart6.serializer)
                    6 -> value7 = decodeSerializableElement(descriptor, 6, serializerPart7.serializer)
                    7 -> value8 = decodeSerializableElement(descriptor, 7, serializerPart8.serializer)
                    8 -> value9 = decodeSerializableElement(descriptor, 8, serializerPart9.serializer)
                    9 -> value10 = decodeSerializableElement(descriptor, 9, serializerPart10.serializer)
                    10 -> value11 = decodeSerializableElement(descriptor, 10, serializerPart11.serializer)
                    11 -> value12 = decodeSerializableElement(descriptor, 11, serializerPart12.serializer)
                    12 -> value13 = decodeSerializableElement(descriptor, 12, serializerPart13.serializer)
                    13 -> value14 = decodeSerializableElement(descriptor, 13, serializerPart14.serializer)
                    14 -> value15 = decodeSerializableElement(descriptor, 14, serializerPart15.serializer)
                    15 -> value16 = decodeSerializableElement(descriptor, 15, serializerPart16.serializer)
                    16 -> value17 = decodeSerializableElement(descriptor, 16, serializerPart17.serializer)
                    17 -> value18 = decodeSerializableElement(descriptor, 17, serializerPart18.serializer)
                    18 -> value19 = decodeSerializableElement(descriptor, 18, serializerPart19.serializer)
                    19 -> value20 = decodeSerializableElement(descriptor, 19, serializerPart20.serializer)
                    CompositeDecoder.DECODE_DONE -> break
                    else -> error("Unexpected index: $index")
                }
            }
            return@decodeStructure build(
                value1 ?: error("Absent field: ${serializerPart1.name}"),
                value2 ?: error("Absent field: ${serializerPart2.name}"),
                value3 ?: error("Absent field: ${serializerPart3.name}"),
                value4 ?: error("Absent field: ${serializerPart4.name}"),
                value5 ?: error("Absent field: ${serializerPart5.name}"),
                value6 ?: error("Absent field: ${serializerPart6.name}"),
                value7 ?: error("Absent field: ${serializerPart7.name}"),
                value8 ?: error("Absent field: ${serializerPart8.name}"),
                value9 ?: error("Absent field: ${serializerPart9.name}"),
                value10 ?: error("Absent field: ${serializerPart10.name}"),
                value11 ?: error("Absent field: ${serializerPart11.name}"),
                value12 ?: error("Absent field: ${serializerPart12.name}"),
                value13 ?: error("Absent field: ${serializerPart13.name}"),
                value14 ?: error("Absent field: ${serializerPart14.name}"),
                value15 ?: error("Absent field: ${serializerPart15.name}"),
                value16 ?: error("Absent field: ${serializerPart16.name}"),
                value17 ?: error("Absent field: ${serializerPart17.name}"),
                value18 ?: error("Absent field: ${serializerPart18.name}"),
                value19 ?: error("Absent field: ${serializerPart19.name}"),
                value20 ?: error("Absent field: ${serializerPart20.name}"),
            )
        }
    }
}

fun <T, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20> classSerializer(
    descriptorName: String,
    serializerPart1: Property<T, R1>,
    serializerPart2: Property<T, R2>,
    serializerPart3: Property<T, R3>,
    serializerPart4: Property<T, R4>,
    serializerPart5: Property<T, R5>,
    serializerPart6: Property<T, R6>,
    serializerPart7: Property<T, R7>,
    serializerPart8: Property<T, R8>,
    serializerPart9: Property<T, R9>,
    serializerPart10: Property<T, R10>,
    serializerPart11: Property<T, R11>,
    serializerPart12: Property<T, R12>,
    serializerPart13: Property<T, R13>,
    serializerPart14: Property<T, R14>,
    serializerPart15: Property<T, R15>,
    serializerPart16: Property<T, R16>,
    serializerPart17: Property<T, R17>,
    serializerPart18: Property<T, R18>,
    serializerPart19: Property<T, R19>,
    serializerPart20: Property<T, R20>,
    build: (R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20) -> T,
) : KSerializer<T> = ClassKSerializer20(
    descriptorName,
    serializerPart1,
    serializerPart2,
    serializerPart3,
    serializerPart4,
    serializerPart5,
    serializerPart6,
    serializerPart7,
    serializerPart8,
    serializerPart9,
    serializerPart10,
    serializerPart11,
    serializerPart12,
    serializerPart13,
    serializerPart14,
    serializerPart15,
    serializerPart16,
    serializerPart17,
    serializerPart18,
    serializerPart19,
    serializerPart20,
    build,
)

open class ClassKSerializer21<T, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20, R21>(
    private val descriptorName: String,
    private val serializerPart1: Property<T, R1>,
    private val serializerPart2: Property<T, R2>,
    private val serializerPart3: Property<T, R3>,
    private val serializerPart4: Property<T, R4>,
    private val serializerPart5: Property<T, R5>,
    private val serializerPart6: Property<T, R6>,
    private val serializerPart7: Property<T, R7>,
    private val serializerPart8: Property<T, R8>,
    private val serializerPart9: Property<T, R9>,
    private val serializerPart10: Property<T, R10>,
    private val serializerPart11: Property<T, R11>,
    private val serializerPart12: Property<T, R12>,
    private val serializerPart13: Property<T, R13>,
    private val serializerPart14: Property<T, R14>,
    private val serializerPart15: Property<T, R15>,
    private val serializerPart16: Property<T, R16>,
    private val serializerPart17: Property<T, R17>,
    private val serializerPart18: Property<T, R18>,
    private val serializerPart19: Property<T, R19>,
    private val serializerPart20: Property<T, R20>,
    private val serializerPart21: Property<T, R21>,
    private val build: (R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20, R21) -> T,
) : KSerializer<T> {
    final override val descriptor: SerialDescriptor = buildClassSerialDescriptor(descriptorName) {
        element(serializerPart1.name, serializerPart1.serializer.descriptor)
        element(serializerPart2.name, serializerPart2.serializer.descriptor)
        element(serializerPart3.name, serializerPart3.serializer.descriptor)
        element(serializerPart4.name, serializerPart4.serializer.descriptor)
        element(serializerPart5.name, serializerPart5.serializer.descriptor)
        element(serializerPart6.name, serializerPart6.serializer.descriptor)
        element(serializerPart7.name, serializerPart7.serializer.descriptor)
        element(serializerPart8.name, serializerPart8.serializer.descriptor)
        element(serializerPart9.name, serializerPart9.serializer.descriptor)
        element(serializerPart10.name, serializerPart10.serializer.descriptor)
        element(serializerPart11.name, serializerPart11.serializer.descriptor)
        element(serializerPart12.name, serializerPart12.serializer.descriptor)
        element(serializerPart13.name, serializerPart13.serializer.descriptor)
        element(serializerPart14.name, serializerPart14.serializer.descriptor)
        element(serializerPart15.name, serializerPart15.serializer.descriptor)
        element(serializerPart16.name, serializerPart16.serializer.descriptor)
        element(serializerPart17.name, serializerPart17.serializer.descriptor)
        element(serializerPart18.name, serializerPart18.serializer.descriptor)
        element(serializerPart19.name, serializerPart19.serializer.descriptor)
        element(serializerPart20.name, serializerPart20.serializer.descriptor)
        element(serializerPart21.name, serializerPart21.serializer.descriptor)
    }

    final override fun serialize(encoder: Encoder, value: T) = encoder.encodeStructure(descriptor) {
        encodeSerializableElement(descriptor, 0, serializerPart1.serializer, serializerPart1.generator(value))
        encodeSerializableElement(descriptor, 1, serializerPart2.serializer, serializerPart2.generator(value))
        encodeSerializableElement(descriptor, 2, serializerPart3.serializer, serializerPart3.generator(value))
        encodeSerializableElement(descriptor, 3, serializerPart4.serializer, serializerPart4.generator(value))
        encodeSerializableElement(descriptor, 4, serializerPart5.serializer, serializerPart5.generator(value))
        encodeSerializableElement(descriptor, 5, serializerPart6.serializer, serializerPart6.generator(value))
        encodeSerializableElement(descriptor, 6, serializerPart7.serializer, serializerPart7.generator(value))
        encodeSerializableElement(descriptor, 7, serializerPart8.serializer, serializerPart8.generator(value))
        encodeSerializableElement(descriptor, 8, serializerPart9.serializer, serializerPart9.generator(value))
        encodeSerializableElement(descriptor, 9, serializerPart10.serializer, serializerPart10.generator(value))
        encodeSerializableElement(descriptor, 10, serializerPart11.serializer, serializerPart11.generator(value))
        encodeSerializableElement(descriptor, 11, serializerPart12.serializer, serializerPart12.generator(value))
        encodeSerializableElement(descriptor, 12, serializerPart13.serializer, serializerPart13.generator(value))
        encodeSerializableElement(descriptor, 13, serializerPart14.serializer, serializerPart14.generator(value))
        encodeSerializableElement(descriptor, 14, serializerPart15.serializer, serializerPart15.generator(value))
        encodeSerializableElement(descriptor, 15, serializerPart16.serializer, serializerPart16.generator(value))
        encodeSerializableElement(descriptor, 16, serializerPart17.serializer, serializerPart17.generator(value))
        encodeSerializableElement(descriptor, 17, serializerPart18.serializer, serializerPart18.generator(value))
        encodeSerializableElement(descriptor, 18, serializerPart19.serializer, serializerPart19.generator(value))
        encodeSerializableElement(descriptor, 19, serializerPart20.serializer, serializerPart20.generator(value))
        encodeSerializableElement(descriptor, 20, serializerPart21.serializer, serializerPart21.generator(value))
    }

    @OptIn(ExperimentalSerializationApi::class)
    final override fun deserialize(decoder: Decoder): T = decoder.decodeStructure(descriptor) {
        if (decodeSequentially()) {
            build(
                decodeSerializableElement(descriptor, 0, serializerPart1.serializer),
                decodeSerializableElement(descriptor, 1, serializerPart2.serializer),
                decodeSerializableElement(descriptor, 2, serializerPart3.serializer),
                decodeSerializableElement(descriptor, 3, serializerPart4.serializer),
                decodeSerializableElement(descriptor, 4, serializerPart5.serializer),
                decodeSerializableElement(descriptor, 5, serializerPart6.serializer),
                decodeSerializableElement(descriptor, 6, serializerPart7.serializer),
                decodeSerializableElement(descriptor, 7, serializerPart8.serializer),
                decodeSerializableElement(descriptor, 8, serializerPart9.serializer),
                decodeSerializableElement(descriptor, 9, serializerPart10.serializer),
                decodeSerializableElement(descriptor, 10, serializerPart11.serializer),
                decodeSerializableElement(descriptor, 11, serializerPart12.serializer),
                decodeSerializableElement(descriptor, 12, serializerPart13.serializer),
                decodeSerializableElement(descriptor, 13, serializerPart14.serializer),
                decodeSerializableElement(descriptor, 14, serializerPart15.serializer),
                decodeSerializableElement(descriptor, 15, serializerPart16.serializer),
                decodeSerializableElement(descriptor, 16, serializerPart17.serializer),
                decodeSerializableElement(descriptor, 17, serializerPart18.serializer),
                decodeSerializableElement(descriptor, 18, serializerPart19.serializer),
                decodeSerializableElement(descriptor, 19, serializerPart20.serializer),
                decodeSerializableElement(descriptor, 20, serializerPart21.serializer),
            )
        } else {
            var value1: R1? = null
            var value2: R2? = null
            var value3: R3? = null
            var value4: R4? = null
            var value5: R5? = null
            var value6: R6? = null
            var value7: R7? = null
            var value8: R8? = null
            var value9: R9? = null
            var value10: R10? = null
            var value11: R11? = null
            var value12: R12? = null
            var value13: R13? = null
            var value14: R14? = null
            var value15: R15? = null
            var value16: R16? = null
            var value17: R17? = null
            var value18: R18? = null
            var value19: R19? = null
            var value20: R20? = null
            var value21: R21? = null
            while (true) {
                when (val index = decodeElementIndex(descriptor)) {
                    0 -> value1 = decodeSerializableElement(descriptor, 0, serializerPart1.serializer)
                    1 -> value2 = decodeSerializableElement(descriptor, 1, serializerPart2.serializer)
                    2 -> value3 = decodeSerializableElement(descriptor, 2, serializerPart3.serializer)
                    3 -> value4 = decodeSerializableElement(descriptor, 3, serializerPart4.serializer)
                    4 -> value5 = decodeSerializableElement(descriptor, 4, serializerPart5.serializer)
                    5 -> value6 = decodeSerializableElement(descriptor, 5, serializerPart6.serializer)
                    6 -> value7 = decodeSerializableElement(descriptor, 6, serializerPart7.serializer)
                    7 -> value8 = decodeSerializableElement(descriptor, 7, serializerPart8.serializer)
                    8 -> value9 = decodeSerializableElement(descriptor, 8, serializerPart9.serializer)
                    9 -> value10 = decodeSerializableElement(descriptor, 9, serializerPart10.serializer)
                    10 -> value11 = decodeSerializableElement(descriptor, 10, serializerPart11.serializer)
                    11 -> value12 = decodeSerializableElement(descriptor, 11, serializerPart12.serializer)
                    12 -> value13 = decodeSerializableElement(descriptor, 12, serializerPart13.serializer)
                    13 -> value14 = decodeSerializableElement(descriptor, 13, serializerPart14.serializer)
                    14 -> value15 = decodeSerializableElement(descriptor, 14, serializerPart15.serializer)
                    15 -> value16 = decodeSerializableElement(descriptor, 15, serializerPart16.serializer)
                    16 -> value17 = decodeSerializableElement(descriptor, 16, serializerPart17.serializer)
                    17 -> value18 = decodeSerializableElement(descriptor, 17, serializerPart18.serializer)
                    18 -> value19 = decodeSerializableElement(descriptor, 18, serializerPart19.serializer)
                    19 -> value20 = decodeSerializableElement(descriptor, 19, serializerPart20.serializer)
                    20 -> value21 = decodeSerializableElement(descriptor, 20, serializerPart21.serializer)
                    CompositeDecoder.DECODE_DONE -> break
                    else -> error("Unexpected index: $index")
                }
            }
            return@decodeStructure build(
                value1 ?: error("Absent field: ${serializerPart1.name}"),
                value2 ?: error("Absent field: ${serializerPart2.name}"),
                value3 ?: error("Absent field: ${serializerPart3.name}"),
                value4 ?: error("Absent field: ${serializerPart4.name}"),
                value5 ?: error("Absent field: ${serializerPart5.name}"),
                value6 ?: error("Absent field: ${serializerPart6.name}"),
                value7 ?: error("Absent field: ${serializerPart7.name}"),
                value8 ?: error("Absent field: ${serializerPart8.name}"),
                value9 ?: error("Absent field: ${serializerPart9.name}"),
                value10 ?: error("Absent field: ${serializerPart10.name}"),
                value11 ?: error("Absent field: ${serializerPart11.name}"),
                value12 ?: error("Absent field: ${serializerPart12.name}"),
                value13 ?: error("Absent field: ${serializerPart13.name}"),
                value14 ?: error("Absent field: ${serializerPart14.name}"),
                value15 ?: error("Absent field: ${serializerPart15.name}"),
                value16 ?: error("Absent field: ${serializerPart16.name}"),
                value17 ?: error("Absent field: ${serializerPart17.name}"),
                value18 ?: error("Absent field: ${serializerPart18.name}"),
                value19 ?: error("Absent field: ${serializerPart19.name}"),
                value20 ?: error("Absent field: ${serializerPart20.name}"),
                value21 ?: error("Absent field: ${serializerPart21.name}"),
            )
        }
    }
}

fun <T, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20, R21> classSerializer(
    descriptorName: String,
    serializerPart1: Property<T, R1>,
    serializerPart2: Property<T, R2>,
    serializerPart3: Property<T, R3>,
    serializerPart4: Property<T, R4>,
    serializerPart5: Property<T, R5>,
    serializerPart6: Property<T, R6>,
    serializerPart7: Property<T, R7>,
    serializerPart8: Property<T, R8>,
    serializerPart9: Property<T, R9>,
    serializerPart10: Property<T, R10>,
    serializerPart11: Property<T, R11>,
    serializerPart12: Property<T, R12>,
    serializerPart13: Property<T, R13>,
    serializerPart14: Property<T, R14>,
    serializerPart15: Property<T, R15>,
    serializerPart16: Property<T, R16>,
    serializerPart17: Property<T, R17>,
    serializerPart18: Property<T, R18>,
    serializerPart19: Property<T, R19>,
    serializerPart20: Property<T, R20>,
    serializerPart21: Property<T, R21>,
    build: (R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20, R21) -> T,
) : KSerializer<T> = ClassKSerializer21(
    descriptorName,
    serializerPart1,
    serializerPart2,
    serializerPart3,
    serializerPart4,
    serializerPart5,
    serializerPart6,
    serializerPart7,
    serializerPart8,
    serializerPart9,
    serializerPart10,
    serializerPart11,
    serializerPart12,
    serializerPart13,
    serializerPart14,
    serializerPart15,
    serializerPart16,
    serializerPart17,
    serializerPart18,
    serializerPart19,
    serializerPart20,
    serializerPart21,
    build,
)

open class ClassKSerializer22<T, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20, R21, R22>(
    private val descriptorName: String,
    private val serializerPart1: Property<T, R1>,
    private val serializerPart2: Property<T, R2>,
    private val serializerPart3: Property<T, R3>,
    private val serializerPart4: Property<T, R4>,
    private val serializerPart5: Property<T, R5>,
    private val serializerPart6: Property<T, R6>,
    private val serializerPart7: Property<T, R7>,
    private val serializerPart8: Property<T, R8>,
    private val serializerPart9: Property<T, R9>,
    private val serializerPart10: Property<T, R10>,
    private val serializerPart11: Property<T, R11>,
    private val serializerPart12: Property<T, R12>,
    private val serializerPart13: Property<T, R13>,
    private val serializerPart14: Property<T, R14>,
    private val serializerPart15: Property<T, R15>,
    private val serializerPart16: Property<T, R16>,
    private val serializerPart17: Property<T, R17>,
    private val serializerPart18: Property<T, R18>,
    private val serializerPart19: Property<T, R19>,
    private val serializerPart20: Property<T, R20>,
    private val serializerPart21: Property<T, R21>,
    private val serializerPart22: Property<T, R22>,
    private val build: (R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20, R21, R22) -> T,
) : KSerializer<T> {
    final override val descriptor: SerialDescriptor = buildClassSerialDescriptor(descriptorName) {
        element(serializerPart1.name, serializerPart1.serializer.descriptor)
        element(serializerPart2.name, serializerPart2.serializer.descriptor)
        element(serializerPart3.name, serializerPart3.serializer.descriptor)
        element(serializerPart4.name, serializerPart4.serializer.descriptor)
        element(serializerPart5.name, serializerPart5.serializer.descriptor)
        element(serializerPart6.name, serializerPart6.serializer.descriptor)
        element(serializerPart7.name, serializerPart7.serializer.descriptor)
        element(serializerPart8.name, serializerPart8.serializer.descriptor)
        element(serializerPart9.name, serializerPart9.serializer.descriptor)
        element(serializerPart10.name, serializerPart10.serializer.descriptor)
        element(serializerPart11.name, serializerPart11.serializer.descriptor)
        element(serializerPart12.name, serializerPart12.serializer.descriptor)
        element(serializerPart13.name, serializerPart13.serializer.descriptor)
        element(serializerPart14.name, serializerPart14.serializer.descriptor)
        element(serializerPart15.name, serializerPart15.serializer.descriptor)
        element(serializerPart16.name, serializerPart16.serializer.descriptor)
        element(serializerPart17.name, serializerPart17.serializer.descriptor)
        element(serializerPart18.name, serializerPart18.serializer.descriptor)
        element(serializerPart19.name, serializerPart19.serializer.descriptor)
        element(serializerPart20.name, serializerPart20.serializer.descriptor)
        element(serializerPart21.name, serializerPart21.serializer.descriptor)
        element(serializerPart22.name, serializerPart22.serializer.descriptor)
    }

    final override fun serialize(encoder: Encoder, value: T) = encoder.encodeStructure(descriptor) {
        encodeSerializableElement(descriptor, 0, serializerPart1.serializer, serializerPart1.generator(value))
        encodeSerializableElement(descriptor, 1, serializerPart2.serializer, serializerPart2.generator(value))
        encodeSerializableElement(descriptor, 2, serializerPart3.serializer, serializerPart3.generator(value))
        encodeSerializableElement(descriptor, 3, serializerPart4.serializer, serializerPart4.generator(value))
        encodeSerializableElement(descriptor, 4, serializerPart5.serializer, serializerPart5.generator(value))
        encodeSerializableElement(descriptor, 5, serializerPart6.serializer, serializerPart6.generator(value))
        encodeSerializableElement(descriptor, 6, serializerPart7.serializer, serializerPart7.generator(value))
        encodeSerializableElement(descriptor, 7, serializerPart8.serializer, serializerPart8.generator(value))
        encodeSerializableElement(descriptor, 8, serializerPart9.serializer, serializerPart9.generator(value))
        encodeSerializableElement(descriptor, 9, serializerPart10.serializer, serializerPart10.generator(value))
        encodeSerializableElement(descriptor, 10, serializerPart11.serializer, serializerPart11.generator(value))
        encodeSerializableElement(descriptor, 11, serializerPart12.serializer, serializerPart12.generator(value))
        encodeSerializableElement(descriptor, 12, serializerPart13.serializer, serializerPart13.generator(value))
        encodeSerializableElement(descriptor, 13, serializerPart14.serializer, serializerPart14.generator(value))
        encodeSerializableElement(descriptor, 14, serializerPart15.serializer, serializerPart15.generator(value))
        encodeSerializableElement(descriptor, 15, serializerPart16.serializer, serializerPart16.generator(value))
        encodeSerializableElement(descriptor, 16, serializerPart17.serializer, serializerPart17.generator(value))
        encodeSerializableElement(descriptor, 17, serializerPart18.serializer, serializerPart18.generator(value))
        encodeSerializableElement(descriptor, 18, serializerPart19.serializer, serializerPart19.generator(value))
        encodeSerializableElement(descriptor, 19, serializerPart20.serializer, serializerPart20.generator(value))
        encodeSerializableElement(descriptor, 20, serializerPart21.serializer, serializerPart21.generator(value))
        encodeSerializableElement(descriptor, 21, serializerPart22.serializer, serializerPart22.generator(value))
    }

    @OptIn(ExperimentalSerializationApi::class)
    final override fun deserialize(decoder: Decoder): T = decoder.decodeStructure(descriptor) {
        if (decodeSequentially()) {
            build(
                decodeSerializableElement(descriptor, 0, serializerPart1.serializer),
                decodeSerializableElement(descriptor, 1, serializerPart2.serializer),
                decodeSerializableElement(descriptor, 2, serializerPart3.serializer),
                decodeSerializableElement(descriptor, 3, serializerPart4.serializer),
                decodeSerializableElement(descriptor, 4, serializerPart5.serializer),
                decodeSerializableElement(descriptor, 5, serializerPart6.serializer),
                decodeSerializableElement(descriptor, 6, serializerPart7.serializer),
                decodeSerializableElement(descriptor, 7, serializerPart8.serializer),
                decodeSerializableElement(descriptor, 8, serializerPart9.serializer),
                decodeSerializableElement(descriptor, 9, serializerPart10.serializer),
                decodeSerializableElement(descriptor, 10, serializerPart11.serializer),
                decodeSerializableElement(descriptor, 11, serializerPart12.serializer),
                decodeSerializableElement(descriptor, 12, serializerPart13.serializer),
                decodeSerializableElement(descriptor, 13, serializerPart14.serializer),
                decodeSerializableElement(descriptor, 14, serializerPart15.serializer),
                decodeSerializableElement(descriptor, 15, serializerPart16.serializer),
                decodeSerializableElement(descriptor, 16, serializerPart17.serializer),
                decodeSerializableElement(descriptor, 17, serializerPart18.serializer),
                decodeSerializableElement(descriptor, 18, serializerPart19.serializer),
                decodeSerializableElement(descriptor, 19, serializerPart20.serializer),
                decodeSerializableElement(descriptor, 20, serializerPart21.serializer),
                decodeSerializableElement(descriptor, 21, serializerPart22.serializer),
            )
        } else {
            var value1: R1? = null
            var value2: R2? = null
            var value3: R3? = null
            var value4: R4? = null
            var value5: R5? = null
            var value6: R6? = null
            var value7: R7? = null
            var value8: R8? = null
            var value9: R9? = null
            var value10: R10? = null
            var value11: R11? = null
            var value12: R12? = null
            var value13: R13? = null
            var value14: R14? = null
            var value15: R15? = null
            var value16: R16? = null
            var value17: R17? = null
            var value18: R18? = null
            var value19: R19? = null
            var value20: R20? = null
            var value21: R21? = null
            var value22: R22? = null
            while (true) {
                when (val index = decodeElementIndex(descriptor)) {
                    0 -> value1 = decodeSerializableElement(descriptor, 0, serializerPart1.serializer)
                    1 -> value2 = decodeSerializableElement(descriptor, 1, serializerPart2.serializer)
                    2 -> value3 = decodeSerializableElement(descriptor, 2, serializerPart3.serializer)
                    3 -> value4 = decodeSerializableElement(descriptor, 3, serializerPart4.serializer)
                    4 -> value5 = decodeSerializableElement(descriptor, 4, serializerPart5.serializer)
                    5 -> value6 = decodeSerializableElement(descriptor, 5, serializerPart6.serializer)
                    6 -> value7 = decodeSerializableElement(descriptor, 6, serializerPart7.serializer)
                    7 -> value8 = decodeSerializableElement(descriptor, 7, serializerPart8.serializer)
                    8 -> value9 = decodeSerializableElement(descriptor, 8, serializerPart9.serializer)
                    9 -> value10 = decodeSerializableElement(descriptor, 9, serializerPart10.serializer)
                    10 -> value11 = decodeSerializableElement(descriptor, 10, serializerPart11.serializer)
                    11 -> value12 = decodeSerializableElement(descriptor, 11, serializerPart12.serializer)
                    12 -> value13 = decodeSerializableElement(descriptor, 12, serializerPart13.serializer)
                    13 -> value14 = decodeSerializableElement(descriptor, 13, serializerPart14.serializer)
                    14 -> value15 = decodeSerializableElement(descriptor, 14, serializerPart15.serializer)
                    15 -> value16 = decodeSerializableElement(descriptor, 15, serializerPart16.serializer)
                    16 -> value17 = decodeSerializableElement(descriptor, 16, serializerPart17.serializer)
                    17 -> value18 = decodeSerializableElement(descriptor, 17, serializerPart18.serializer)
                    18 -> value19 = decodeSerializableElement(descriptor, 18, serializerPart19.serializer)
                    19 -> value20 = decodeSerializableElement(descriptor, 19, serializerPart20.serializer)
                    20 -> value21 = decodeSerializableElement(descriptor, 20, serializerPart21.serializer)
                    21 -> value22 = decodeSerializableElement(descriptor, 21, serializerPart22.serializer)
                    CompositeDecoder.DECODE_DONE -> break
                    else -> error("Unexpected index: $index")
                }
            }
            return@decodeStructure build(
                value1 ?: error("Absent field: ${serializerPart1.name}"),
                value2 ?: error("Absent field: ${serializerPart2.name}"),
                value3 ?: error("Absent field: ${serializerPart3.name}"),
                value4 ?: error("Absent field: ${serializerPart4.name}"),
                value5 ?: error("Absent field: ${serializerPart5.name}"),
                value6 ?: error("Absent field: ${serializerPart6.name}"),
                value7 ?: error("Absent field: ${serializerPart7.name}"),
                value8 ?: error("Absent field: ${serializerPart8.name}"),
                value9 ?: error("Absent field: ${serializerPart9.name}"),
                value10 ?: error("Absent field: ${serializerPart10.name}"),
                value11 ?: error("Absent field: ${serializerPart11.name}"),
                value12 ?: error("Absent field: ${serializerPart12.name}"),
                value13 ?: error("Absent field: ${serializerPart13.name}"),
                value14 ?: error("Absent field: ${serializerPart14.name}"),
                value15 ?: error("Absent field: ${serializerPart15.name}"),
                value16 ?: error("Absent field: ${serializerPart16.name}"),
                value17 ?: error("Absent field: ${serializerPart17.name}"),
                value18 ?: error("Absent field: ${serializerPart18.name}"),
                value19 ?: error("Absent field: ${serializerPart19.name}"),
                value20 ?: error("Absent field: ${serializerPart20.name}"),
                value21 ?: error("Absent field: ${serializerPart21.name}"),
                value22 ?: error("Absent field: ${serializerPart22.name}"),
            )
        }
    }
}

fun <T, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20, R21, R22> classSerializer(
    descriptorName: String,
    serializerPart1: Property<T, R1>,
    serializerPart2: Property<T, R2>,
    serializerPart3: Property<T, R3>,
    serializerPart4: Property<T, R4>,
    serializerPart5: Property<T, R5>,
    serializerPart6: Property<T, R6>,
    serializerPart7: Property<T, R7>,
    serializerPart8: Property<T, R8>,
    serializerPart9: Property<T, R9>,
    serializerPart10: Property<T, R10>,
    serializerPart11: Property<T, R11>,
    serializerPart12: Property<T, R12>,
    serializerPart13: Property<T, R13>,
    serializerPart14: Property<T, R14>,
    serializerPart15: Property<T, R15>,
    serializerPart16: Property<T, R16>,
    serializerPart17: Property<T, R17>,
    serializerPart18: Property<T, R18>,
    serializerPart19: Property<T, R19>,
    serializerPart20: Property<T, R20>,
    serializerPart21: Property<T, R21>,
    serializerPart22: Property<T, R22>,
    build: (R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20, R21, R22) -> T,
) : KSerializer<T> = ClassKSerializer22(
    descriptorName,
    serializerPart1,
    serializerPart2,
    serializerPart3,
    serializerPart4,
    serializerPart5,
    serializerPart6,
    serializerPart7,
    serializerPart8,
    serializerPart9,
    serializerPart10,
    serializerPart11,
    serializerPart12,
    serializerPart13,
    serializerPart14,
    serializerPart15,
    serializerPart16,
    serializerPart17,
    serializerPart18,
    serializerPart19,
    serializerPart20,
    serializerPart21,
    serializerPart22,
    build,
)

open class ClassKSerializer23<T, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20, R21, R22, R23>(
    private val descriptorName: String,
    private val serializerPart1: Property<T, R1>,
    private val serializerPart2: Property<T, R2>,
    private val serializerPart3: Property<T, R3>,
    private val serializerPart4: Property<T, R4>,
    private val serializerPart5: Property<T, R5>,
    private val serializerPart6: Property<T, R6>,
    private val serializerPart7: Property<T, R7>,
    private val serializerPart8: Property<T, R8>,
    private val serializerPart9: Property<T, R9>,
    private val serializerPart10: Property<T, R10>,
    private val serializerPart11: Property<T, R11>,
    private val serializerPart12: Property<T, R12>,
    private val serializerPart13: Property<T, R13>,
    private val serializerPart14: Property<T, R14>,
    private val serializerPart15: Property<T, R15>,
    private val serializerPart16: Property<T, R16>,
    private val serializerPart17: Property<T, R17>,
    private val serializerPart18: Property<T, R18>,
    private val serializerPart19: Property<T, R19>,
    private val serializerPart20: Property<T, R20>,
    private val serializerPart21: Property<T, R21>,
    private val serializerPart22: Property<T, R22>,
    private val serializerPart23: Property<T, R23>,
    private val build: (R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20, R21, R22, R23) -> T,
) : KSerializer<T> {
    final override val descriptor: SerialDescriptor = buildClassSerialDescriptor(descriptorName) {
        element(serializerPart1.name, serializerPart1.serializer.descriptor)
        element(serializerPart2.name, serializerPart2.serializer.descriptor)
        element(serializerPart3.name, serializerPart3.serializer.descriptor)
        element(serializerPart4.name, serializerPart4.serializer.descriptor)
        element(serializerPart5.name, serializerPart5.serializer.descriptor)
        element(serializerPart6.name, serializerPart6.serializer.descriptor)
        element(serializerPart7.name, serializerPart7.serializer.descriptor)
        element(serializerPart8.name, serializerPart8.serializer.descriptor)
        element(serializerPart9.name, serializerPart9.serializer.descriptor)
        element(serializerPart10.name, serializerPart10.serializer.descriptor)
        element(serializerPart11.name, serializerPart11.serializer.descriptor)
        element(serializerPart12.name, serializerPart12.serializer.descriptor)
        element(serializerPart13.name, serializerPart13.serializer.descriptor)
        element(serializerPart14.name, serializerPart14.serializer.descriptor)
        element(serializerPart15.name, serializerPart15.serializer.descriptor)
        element(serializerPart16.name, serializerPart16.serializer.descriptor)
        element(serializerPart17.name, serializerPart17.serializer.descriptor)
        element(serializerPart18.name, serializerPart18.serializer.descriptor)
        element(serializerPart19.name, serializerPart19.serializer.descriptor)
        element(serializerPart20.name, serializerPart20.serializer.descriptor)
        element(serializerPart21.name, serializerPart21.serializer.descriptor)
        element(serializerPart22.name, serializerPart22.serializer.descriptor)
        element(serializerPart23.name, serializerPart23.serializer.descriptor)
    }

    final override fun serialize(encoder: Encoder, value: T) = encoder.encodeStructure(descriptor) {
        encodeSerializableElement(descriptor, 0, serializerPart1.serializer, serializerPart1.generator(value))
        encodeSerializableElement(descriptor, 1, serializerPart2.serializer, serializerPart2.generator(value))
        encodeSerializableElement(descriptor, 2, serializerPart3.serializer, serializerPart3.generator(value))
        encodeSerializableElement(descriptor, 3, serializerPart4.serializer, serializerPart4.generator(value))
        encodeSerializableElement(descriptor, 4, serializerPart5.serializer, serializerPart5.generator(value))
        encodeSerializableElement(descriptor, 5, serializerPart6.serializer, serializerPart6.generator(value))
        encodeSerializableElement(descriptor, 6, serializerPart7.serializer, serializerPart7.generator(value))
        encodeSerializableElement(descriptor, 7, serializerPart8.serializer, serializerPart8.generator(value))
        encodeSerializableElement(descriptor, 8, serializerPart9.serializer, serializerPart9.generator(value))
        encodeSerializableElement(descriptor, 9, serializerPart10.serializer, serializerPart10.generator(value))
        encodeSerializableElement(descriptor, 10, serializerPart11.serializer, serializerPart11.generator(value))
        encodeSerializableElement(descriptor, 11, serializerPart12.serializer, serializerPart12.generator(value))
        encodeSerializableElement(descriptor, 12, serializerPart13.serializer, serializerPart13.generator(value))
        encodeSerializableElement(descriptor, 13, serializerPart14.serializer, serializerPart14.generator(value))
        encodeSerializableElement(descriptor, 14, serializerPart15.serializer, serializerPart15.generator(value))
        encodeSerializableElement(descriptor, 15, serializerPart16.serializer, serializerPart16.generator(value))
        encodeSerializableElement(descriptor, 16, serializerPart17.serializer, serializerPart17.generator(value))
        encodeSerializableElement(descriptor, 17, serializerPart18.serializer, serializerPart18.generator(value))
        encodeSerializableElement(descriptor, 18, serializerPart19.serializer, serializerPart19.generator(value))
        encodeSerializableElement(descriptor, 19, serializerPart20.serializer, serializerPart20.generator(value))
        encodeSerializableElement(descriptor, 20, serializerPart21.serializer, serializerPart21.generator(value))
        encodeSerializableElement(descriptor, 21, serializerPart22.serializer, serializerPart22.generator(value))
        encodeSerializableElement(descriptor, 22, serializerPart23.serializer, serializerPart23.generator(value))
    }

    @OptIn(ExperimentalSerializationApi::class)
    final override fun deserialize(decoder: Decoder): T = decoder.decodeStructure(descriptor) {
        if (decodeSequentially()) {
            build(
                decodeSerializableElement(descriptor, 0, serializerPart1.serializer),
                decodeSerializableElement(descriptor, 1, serializerPart2.serializer),
                decodeSerializableElement(descriptor, 2, serializerPart3.serializer),
                decodeSerializableElement(descriptor, 3, serializerPart4.serializer),
                decodeSerializableElement(descriptor, 4, serializerPart5.serializer),
                decodeSerializableElement(descriptor, 5, serializerPart6.serializer),
                decodeSerializableElement(descriptor, 6, serializerPart7.serializer),
                decodeSerializableElement(descriptor, 7, serializerPart8.serializer),
                decodeSerializableElement(descriptor, 8, serializerPart9.serializer),
                decodeSerializableElement(descriptor, 9, serializerPart10.serializer),
                decodeSerializableElement(descriptor, 10, serializerPart11.serializer),
                decodeSerializableElement(descriptor, 11, serializerPart12.serializer),
                decodeSerializableElement(descriptor, 12, serializerPart13.serializer),
                decodeSerializableElement(descriptor, 13, serializerPart14.serializer),
                decodeSerializableElement(descriptor, 14, serializerPart15.serializer),
                decodeSerializableElement(descriptor, 15, serializerPart16.serializer),
                decodeSerializableElement(descriptor, 16, serializerPart17.serializer),
                decodeSerializableElement(descriptor, 17, serializerPart18.serializer),
                decodeSerializableElement(descriptor, 18, serializerPart19.serializer),
                decodeSerializableElement(descriptor, 19, serializerPart20.serializer),
                decodeSerializableElement(descriptor, 20, serializerPart21.serializer),
                decodeSerializableElement(descriptor, 21, serializerPart22.serializer),
                decodeSerializableElement(descriptor, 22, serializerPart23.serializer),
            )
        } else {
            var value1: R1? = null
            var value2: R2? = null
            var value3: R3? = null
            var value4: R4? = null
            var value5: R5? = null
            var value6: R6? = null
            var value7: R7? = null
            var value8: R8? = null
            var value9: R9? = null
            var value10: R10? = null
            var value11: R11? = null
            var value12: R12? = null
            var value13: R13? = null
            var value14: R14? = null
            var value15: R15? = null
            var value16: R16? = null
            var value17: R17? = null
            var value18: R18? = null
            var value19: R19? = null
            var value20: R20? = null
            var value21: R21? = null
            var value22: R22? = null
            var value23: R23? = null
            while (true) {
                when (val index = decodeElementIndex(descriptor)) {
                    0 -> value1 = decodeSerializableElement(descriptor, 0, serializerPart1.serializer)
                    1 -> value2 = decodeSerializableElement(descriptor, 1, serializerPart2.serializer)
                    2 -> value3 = decodeSerializableElement(descriptor, 2, serializerPart3.serializer)
                    3 -> value4 = decodeSerializableElement(descriptor, 3, serializerPart4.serializer)
                    4 -> value5 = decodeSerializableElement(descriptor, 4, serializerPart5.serializer)
                    5 -> value6 = decodeSerializableElement(descriptor, 5, serializerPart6.serializer)
                    6 -> value7 = decodeSerializableElement(descriptor, 6, serializerPart7.serializer)
                    7 -> value8 = decodeSerializableElement(descriptor, 7, serializerPart8.serializer)
                    8 -> value9 = decodeSerializableElement(descriptor, 8, serializerPart9.serializer)
                    9 -> value10 = decodeSerializableElement(descriptor, 9, serializerPart10.serializer)
                    10 -> value11 = decodeSerializableElement(descriptor, 10, serializerPart11.serializer)
                    11 -> value12 = decodeSerializableElement(descriptor, 11, serializerPart12.serializer)
                    12 -> value13 = decodeSerializableElement(descriptor, 12, serializerPart13.serializer)
                    13 -> value14 = decodeSerializableElement(descriptor, 13, serializerPart14.serializer)
                    14 -> value15 = decodeSerializableElement(descriptor, 14, serializerPart15.serializer)
                    15 -> value16 = decodeSerializableElement(descriptor, 15, serializerPart16.serializer)
                    16 -> value17 = decodeSerializableElement(descriptor, 16, serializerPart17.serializer)
                    17 -> value18 = decodeSerializableElement(descriptor, 17, serializerPart18.serializer)
                    18 -> value19 = decodeSerializableElement(descriptor, 18, serializerPart19.serializer)
                    19 -> value20 = decodeSerializableElement(descriptor, 19, serializerPart20.serializer)
                    20 -> value21 = decodeSerializableElement(descriptor, 20, serializerPart21.serializer)
                    21 -> value22 = decodeSerializableElement(descriptor, 21, serializerPart22.serializer)
                    22 -> value23 = decodeSerializableElement(descriptor, 22, serializerPart23.serializer)
                    CompositeDecoder.DECODE_DONE -> break
                    else -> error("Unexpected index: $index")
                }
            }
            return@decodeStructure build(
                value1 ?: error("Absent field: ${serializerPart1.name}"),
                value2 ?: error("Absent field: ${serializerPart2.name}"),
                value3 ?: error("Absent field: ${serializerPart3.name}"),
                value4 ?: error("Absent field: ${serializerPart4.name}"),
                value5 ?: error("Absent field: ${serializerPart5.name}"),
                value6 ?: error("Absent field: ${serializerPart6.name}"),
                value7 ?: error("Absent field: ${serializerPart7.name}"),
                value8 ?: error("Absent field: ${serializerPart8.name}"),
                value9 ?: error("Absent field: ${serializerPart9.name}"),
                value10 ?: error("Absent field: ${serializerPart10.name}"),
                value11 ?: error("Absent field: ${serializerPart11.name}"),
                value12 ?: error("Absent field: ${serializerPart12.name}"),
                value13 ?: error("Absent field: ${serializerPart13.name}"),
                value14 ?: error("Absent field: ${serializerPart14.name}"),
                value15 ?: error("Absent field: ${serializerPart15.name}"),
                value16 ?: error("Absent field: ${serializerPart16.name}"),
                value17 ?: error("Absent field: ${serializerPart17.name}"),
                value18 ?: error("Absent field: ${serializerPart18.name}"),
                value19 ?: error("Absent field: ${serializerPart19.name}"),
                value20 ?: error("Absent field: ${serializerPart20.name}"),
                value21 ?: error("Absent field: ${serializerPart21.name}"),
                value22 ?: error("Absent field: ${serializerPart22.name}"),
                value23 ?: error("Absent field: ${serializerPart23.name}"),
            )
        }
    }
}

fun <T, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20, R21, R22, R23> classSerializer(
    descriptorName: String,
    serializerPart1: Property<T, R1>,
    serializerPart2: Property<T, R2>,
    serializerPart3: Property<T, R3>,
    serializerPart4: Property<T, R4>,
    serializerPart5: Property<T, R5>,
    serializerPart6: Property<T, R6>,
    serializerPart7: Property<T, R7>,
    serializerPart8: Property<T, R8>,
    serializerPart9: Property<T, R9>,
    serializerPart10: Property<T, R10>,
    serializerPart11: Property<T, R11>,
    serializerPart12: Property<T, R12>,
    serializerPart13: Property<T, R13>,
    serializerPart14: Property<T, R14>,
    serializerPart15: Property<T, R15>,
    serializerPart16: Property<T, R16>,
    serializerPart17: Property<T, R17>,
    serializerPart18: Property<T, R18>,
    serializerPart19: Property<T, R19>,
    serializerPart20: Property<T, R20>,
    serializerPart21: Property<T, R21>,
    serializerPart22: Property<T, R22>,
    serializerPart23: Property<T, R23>,
    build: (R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20, R21, R22, R23) -> T,
) : KSerializer<T> = ClassKSerializer23(
    descriptorName,
    serializerPart1,
    serializerPart2,
    serializerPart3,
    serializerPart4,
    serializerPart5,
    serializerPart6,
    serializerPart7,
    serializerPart8,
    serializerPart9,
    serializerPart10,
    serializerPart11,
    serializerPart12,
    serializerPart13,
    serializerPart14,
    serializerPart15,
    serializerPart16,
    serializerPart17,
    serializerPart18,
    serializerPart19,
    serializerPart20,
    serializerPart21,
    serializerPart22,
    serializerPart23,
    build,
)

open class ClassKSerializer24<T, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20, R21, R22, R23, R24>(
    private val descriptorName: String,
    private val serializerPart1: Property<T, R1>,
    private val serializerPart2: Property<T, R2>,
    private val serializerPart3: Property<T, R3>,
    private val serializerPart4: Property<T, R4>,
    private val serializerPart5: Property<T, R5>,
    private val serializerPart6: Property<T, R6>,
    private val serializerPart7: Property<T, R7>,
    private val serializerPart8: Property<T, R8>,
    private val serializerPart9: Property<T, R9>,
    private val serializerPart10: Property<T, R10>,
    private val serializerPart11: Property<T, R11>,
    private val serializerPart12: Property<T, R12>,
    private val serializerPart13: Property<T, R13>,
    private val serializerPart14: Property<T, R14>,
    private val serializerPart15: Property<T, R15>,
    private val serializerPart16: Property<T, R16>,
    private val serializerPart17: Property<T, R17>,
    private val serializerPart18: Property<T, R18>,
    private val serializerPart19: Property<T, R19>,
    private val serializerPart20: Property<T, R20>,
    private val serializerPart21: Property<T, R21>,
    private val serializerPart22: Property<T, R22>,
    private val serializerPart23: Property<T, R23>,
    private val serializerPart24: Property<T, R24>,
    private val build: (R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20, R21, R22, R23, R24) -> T,
) : KSerializer<T> {
    final override val descriptor: SerialDescriptor = buildClassSerialDescriptor(descriptorName) {
        element(serializerPart1.name, serializerPart1.serializer.descriptor)
        element(serializerPart2.name, serializerPart2.serializer.descriptor)
        element(serializerPart3.name, serializerPart3.serializer.descriptor)
        element(serializerPart4.name, serializerPart4.serializer.descriptor)
        element(serializerPart5.name, serializerPart5.serializer.descriptor)
        element(serializerPart6.name, serializerPart6.serializer.descriptor)
        element(serializerPart7.name, serializerPart7.serializer.descriptor)
        element(serializerPart8.name, serializerPart8.serializer.descriptor)
        element(serializerPart9.name, serializerPart9.serializer.descriptor)
        element(serializerPart10.name, serializerPart10.serializer.descriptor)
        element(serializerPart11.name, serializerPart11.serializer.descriptor)
        element(serializerPart12.name, serializerPart12.serializer.descriptor)
        element(serializerPart13.name, serializerPart13.serializer.descriptor)
        element(serializerPart14.name, serializerPart14.serializer.descriptor)
        element(serializerPart15.name, serializerPart15.serializer.descriptor)
        element(serializerPart16.name, serializerPart16.serializer.descriptor)
        element(serializerPart17.name, serializerPart17.serializer.descriptor)
        element(serializerPart18.name, serializerPart18.serializer.descriptor)
        element(serializerPart19.name, serializerPart19.serializer.descriptor)
        element(serializerPart20.name, serializerPart20.serializer.descriptor)
        element(serializerPart21.name, serializerPart21.serializer.descriptor)
        element(serializerPart22.name, serializerPart22.serializer.descriptor)
        element(serializerPart23.name, serializerPart23.serializer.descriptor)
        element(serializerPart24.name, serializerPart24.serializer.descriptor)
    }

    final override fun serialize(encoder: Encoder, value: T) = encoder.encodeStructure(descriptor) {
        encodeSerializableElement(descriptor, 0, serializerPart1.serializer, serializerPart1.generator(value))
        encodeSerializableElement(descriptor, 1, serializerPart2.serializer, serializerPart2.generator(value))
        encodeSerializableElement(descriptor, 2, serializerPart3.serializer, serializerPart3.generator(value))
        encodeSerializableElement(descriptor, 3, serializerPart4.serializer, serializerPart4.generator(value))
        encodeSerializableElement(descriptor, 4, serializerPart5.serializer, serializerPart5.generator(value))
        encodeSerializableElement(descriptor, 5, serializerPart6.serializer, serializerPart6.generator(value))
        encodeSerializableElement(descriptor, 6, serializerPart7.serializer, serializerPart7.generator(value))
        encodeSerializableElement(descriptor, 7, serializerPart8.serializer, serializerPart8.generator(value))
        encodeSerializableElement(descriptor, 8, serializerPart9.serializer, serializerPart9.generator(value))
        encodeSerializableElement(descriptor, 9, serializerPart10.serializer, serializerPart10.generator(value))
        encodeSerializableElement(descriptor, 10, serializerPart11.serializer, serializerPart11.generator(value))
        encodeSerializableElement(descriptor, 11, serializerPart12.serializer, serializerPart12.generator(value))
        encodeSerializableElement(descriptor, 12, serializerPart13.serializer, serializerPart13.generator(value))
        encodeSerializableElement(descriptor, 13, serializerPart14.serializer, serializerPart14.generator(value))
        encodeSerializableElement(descriptor, 14, serializerPart15.serializer, serializerPart15.generator(value))
        encodeSerializableElement(descriptor, 15, serializerPart16.serializer, serializerPart16.generator(value))
        encodeSerializableElement(descriptor, 16, serializerPart17.serializer, serializerPart17.generator(value))
        encodeSerializableElement(descriptor, 17, serializerPart18.serializer, serializerPart18.generator(value))
        encodeSerializableElement(descriptor, 18, serializerPart19.serializer, serializerPart19.generator(value))
        encodeSerializableElement(descriptor, 19, serializerPart20.serializer, serializerPart20.generator(value))
        encodeSerializableElement(descriptor, 20, serializerPart21.serializer, serializerPart21.generator(value))
        encodeSerializableElement(descriptor, 21, serializerPart22.serializer, serializerPart22.generator(value))
        encodeSerializableElement(descriptor, 22, serializerPart23.serializer, serializerPart23.generator(value))
        encodeSerializableElement(descriptor, 23, serializerPart24.serializer, serializerPart24.generator(value))
    }

    @OptIn(ExperimentalSerializationApi::class)
    final override fun deserialize(decoder: Decoder): T = decoder.decodeStructure(descriptor) {
        if (decodeSequentially()) {
            build(
                decodeSerializableElement(descriptor, 0, serializerPart1.serializer),
                decodeSerializableElement(descriptor, 1, serializerPart2.serializer),
                decodeSerializableElement(descriptor, 2, serializerPart3.serializer),
                decodeSerializableElement(descriptor, 3, serializerPart4.serializer),
                decodeSerializableElement(descriptor, 4, serializerPart5.serializer),
                decodeSerializableElement(descriptor, 5, serializerPart6.serializer),
                decodeSerializableElement(descriptor, 6, serializerPart7.serializer),
                decodeSerializableElement(descriptor, 7, serializerPart8.serializer),
                decodeSerializableElement(descriptor, 8, serializerPart9.serializer),
                decodeSerializableElement(descriptor, 9, serializerPart10.serializer),
                decodeSerializableElement(descriptor, 10, serializerPart11.serializer),
                decodeSerializableElement(descriptor, 11, serializerPart12.serializer),
                decodeSerializableElement(descriptor, 12, serializerPart13.serializer),
                decodeSerializableElement(descriptor, 13, serializerPart14.serializer),
                decodeSerializableElement(descriptor, 14, serializerPart15.serializer),
                decodeSerializableElement(descriptor, 15, serializerPart16.serializer),
                decodeSerializableElement(descriptor, 16, serializerPart17.serializer),
                decodeSerializableElement(descriptor, 17, serializerPart18.serializer),
                decodeSerializableElement(descriptor, 18, serializerPart19.serializer),
                decodeSerializableElement(descriptor, 19, serializerPart20.serializer),
                decodeSerializableElement(descriptor, 20, serializerPart21.serializer),
                decodeSerializableElement(descriptor, 21, serializerPart22.serializer),
                decodeSerializableElement(descriptor, 22, serializerPart23.serializer),
                decodeSerializableElement(descriptor, 23, serializerPart24.serializer),
            )
        } else {
            var value1: R1? = null
            var value2: R2? = null
            var value3: R3? = null
            var value4: R4? = null
            var value5: R5? = null
            var value6: R6? = null
            var value7: R7? = null
            var value8: R8? = null
            var value9: R9? = null
            var value10: R10? = null
            var value11: R11? = null
            var value12: R12? = null
            var value13: R13? = null
            var value14: R14? = null
            var value15: R15? = null
            var value16: R16? = null
            var value17: R17? = null
            var value18: R18? = null
            var value19: R19? = null
            var value20: R20? = null
            var value21: R21? = null
            var value22: R22? = null
            var value23: R23? = null
            var value24: R24? = null
            while (true) {
                when (val index = decodeElementIndex(descriptor)) {
                    0 -> value1 = decodeSerializableElement(descriptor, 0, serializerPart1.serializer)
                    1 -> value2 = decodeSerializableElement(descriptor, 1, serializerPart2.serializer)
                    2 -> value3 = decodeSerializableElement(descriptor, 2, serializerPart3.serializer)
                    3 -> value4 = decodeSerializableElement(descriptor, 3, serializerPart4.serializer)
                    4 -> value5 = decodeSerializableElement(descriptor, 4, serializerPart5.serializer)
                    5 -> value6 = decodeSerializableElement(descriptor, 5, serializerPart6.serializer)
                    6 -> value7 = decodeSerializableElement(descriptor, 6, serializerPart7.serializer)
                    7 -> value8 = decodeSerializableElement(descriptor, 7, serializerPart8.serializer)
                    8 -> value9 = decodeSerializableElement(descriptor, 8, serializerPart9.serializer)
                    9 -> value10 = decodeSerializableElement(descriptor, 9, serializerPart10.serializer)
                    10 -> value11 = decodeSerializableElement(descriptor, 10, serializerPart11.serializer)
                    11 -> value12 = decodeSerializableElement(descriptor, 11, serializerPart12.serializer)
                    12 -> value13 = decodeSerializableElement(descriptor, 12, serializerPart13.serializer)
                    13 -> value14 = decodeSerializableElement(descriptor, 13, serializerPart14.serializer)
                    14 -> value15 = decodeSerializableElement(descriptor, 14, serializerPart15.serializer)
                    15 -> value16 = decodeSerializableElement(descriptor, 15, serializerPart16.serializer)
                    16 -> value17 = decodeSerializableElement(descriptor, 16, serializerPart17.serializer)
                    17 -> value18 = decodeSerializableElement(descriptor, 17, serializerPart18.serializer)
                    18 -> value19 = decodeSerializableElement(descriptor, 18, serializerPart19.serializer)
                    19 -> value20 = decodeSerializableElement(descriptor, 19, serializerPart20.serializer)
                    20 -> value21 = decodeSerializableElement(descriptor, 20, serializerPart21.serializer)
                    21 -> value22 = decodeSerializableElement(descriptor, 21, serializerPart22.serializer)
                    22 -> value23 = decodeSerializableElement(descriptor, 22, serializerPart23.serializer)
                    23 -> value24 = decodeSerializableElement(descriptor, 23, serializerPart24.serializer)
                    CompositeDecoder.DECODE_DONE -> break
                    else -> error("Unexpected index: $index")
                }
            }
            return@decodeStructure build(
                value1 ?: error("Absent field: ${serializerPart1.name}"),
                value2 ?: error("Absent field: ${serializerPart2.name}"),
                value3 ?: error("Absent field: ${serializerPart3.name}"),
                value4 ?: error("Absent field: ${serializerPart4.name}"),
                value5 ?: error("Absent field: ${serializerPart5.name}"),
                value6 ?: error("Absent field: ${serializerPart6.name}"),
                value7 ?: error("Absent field: ${serializerPart7.name}"),
                value8 ?: error("Absent field: ${serializerPart8.name}"),
                value9 ?: error("Absent field: ${serializerPart9.name}"),
                value10 ?: error("Absent field: ${serializerPart10.name}"),
                value11 ?: error("Absent field: ${serializerPart11.name}"),
                value12 ?: error("Absent field: ${serializerPart12.name}"),
                value13 ?: error("Absent field: ${serializerPart13.name}"),
                value14 ?: error("Absent field: ${serializerPart14.name}"),
                value15 ?: error("Absent field: ${serializerPart15.name}"),
                value16 ?: error("Absent field: ${serializerPart16.name}"),
                value17 ?: error("Absent field: ${serializerPart17.name}"),
                value18 ?: error("Absent field: ${serializerPart18.name}"),
                value19 ?: error("Absent field: ${serializerPart19.name}"),
                value20 ?: error("Absent field: ${serializerPart20.name}"),
                value21 ?: error("Absent field: ${serializerPart21.name}"),
                value22 ?: error("Absent field: ${serializerPart22.name}"),
                value23 ?: error("Absent field: ${serializerPart23.name}"),
                value24 ?: error("Absent field: ${serializerPart24.name}"),
            )
        }
    }
}

fun <T, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20, R21, R22, R23, R24> classSerializer(
    descriptorName: String,
    serializerPart1: Property<T, R1>,
    serializerPart2: Property<T, R2>,
    serializerPart3: Property<T, R3>,
    serializerPart4: Property<T, R4>,
    serializerPart5: Property<T, R5>,
    serializerPart6: Property<T, R6>,
    serializerPart7: Property<T, R7>,
    serializerPart8: Property<T, R8>,
    serializerPart9: Property<T, R9>,
    serializerPart10: Property<T, R10>,
    serializerPart11: Property<T, R11>,
    serializerPart12: Property<T, R12>,
    serializerPart13: Property<T, R13>,
    serializerPart14: Property<T, R14>,
    serializerPart15: Property<T, R15>,
    serializerPart16: Property<T, R16>,
    serializerPart17: Property<T, R17>,
    serializerPart18: Property<T, R18>,
    serializerPart19: Property<T, R19>,
    serializerPart20: Property<T, R20>,
    serializerPart21: Property<T, R21>,
    serializerPart22: Property<T, R22>,
    serializerPart23: Property<T, R23>,
    serializerPart24: Property<T, R24>,
    build: (R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20, R21, R22, R23, R24) -> T,
) : KSerializer<T> = ClassKSerializer24(
    descriptorName,
    serializerPart1,
    serializerPart2,
    serializerPart3,
    serializerPart4,
    serializerPart5,
    serializerPart6,
    serializerPart7,
    serializerPart8,
    serializerPart9,
    serializerPart10,
    serializerPart11,
    serializerPart12,
    serializerPart13,
    serializerPart14,
    serializerPart15,
    serializerPart16,
    serializerPart17,
    serializerPart18,
    serializerPart19,
    serializerPart20,
    serializerPart21,
    serializerPart22,
    serializerPart23,
    serializerPart24,
    build,
)

open class ClassKSerializer25<T, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20, R21, R22, R23, R24, R25>(
    private val descriptorName: String,
    private val serializerPart1: Property<T, R1>,
    private val serializerPart2: Property<T, R2>,
    private val serializerPart3: Property<T, R3>,
    private val serializerPart4: Property<T, R4>,
    private val serializerPart5: Property<T, R5>,
    private val serializerPart6: Property<T, R6>,
    private val serializerPart7: Property<T, R7>,
    private val serializerPart8: Property<T, R8>,
    private val serializerPart9: Property<T, R9>,
    private val serializerPart10: Property<T, R10>,
    private val serializerPart11: Property<T, R11>,
    private val serializerPart12: Property<T, R12>,
    private val serializerPart13: Property<T, R13>,
    private val serializerPart14: Property<T, R14>,
    private val serializerPart15: Property<T, R15>,
    private val serializerPart16: Property<T, R16>,
    private val serializerPart17: Property<T, R17>,
    private val serializerPart18: Property<T, R18>,
    private val serializerPart19: Property<T, R19>,
    private val serializerPart20: Property<T, R20>,
    private val serializerPart21: Property<T, R21>,
    private val serializerPart22: Property<T, R22>,
    private val serializerPart23: Property<T, R23>,
    private val serializerPart24: Property<T, R24>,
    private val serializerPart25: Property<T, R25>,
    private val build: (R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20, R21, R22, R23, R24, R25) -> T,
) : KSerializer<T> {
    final override val descriptor: SerialDescriptor = buildClassSerialDescriptor(descriptorName) {
        element(serializerPart1.name, serializerPart1.serializer.descriptor)
        element(serializerPart2.name, serializerPart2.serializer.descriptor)
        element(serializerPart3.name, serializerPart3.serializer.descriptor)
        element(serializerPart4.name, serializerPart4.serializer.descriptor)
        element(serializerPart5.name, serializerPart5.serializer.descriptor)
        element(serializerPart6.name, serializerPart6.serializer.descriptor)
        element(serializerPart7.name, serializerPart7.serializer.descriptor)
        element(serializerPart8.name, serializerPart8.serializer.descriptor)
        element(serializerPart9.name, serializerPart9.serializer.descriptor)
        element(serializerPart10.name, serializerPart10.serializer.descriptor)
        element(serializerPart11.name, serializerPart11.serializer.descriptor)
        element(serializerPart12.name, serializerPart12.serializer.descriptor)
        element(serializerPart13.name, serializerPart13.serializer.descriptor)
        element(serializerPart14.name, serializerPart14.serializer.descriptor)
        element(serializerPart15.name, serializerPart15.serializer.descriptor)
        element(serializerPart16.name, serializerPart16.serializer.descriptor)
        element(serializerPart17.name, serializerPart17.serializer.descriptor)
        element(serializerPart18.name, serializerPart18.serializer.descriptor)
        element(serializerPart19.name, serializerPart19.serializer.descriptor)
        element(serializerPart20.name, serializerPart20.serializer.descriptor)
        element(serializerPart21.name, serializerPart21.serializer.descriptor)
        element(serializerPart22.name, serializerPart22.serializer.descriptor)
        element(serializerPart23.name, serializerPart23.serializer.descriptor)
        element(serializerPart24.name, serializerPart24.serializer.descriptor)
        element(serializerPart25.name, serializerPart25.serializer.descriptor)
    }

    final override fun serialize(encoder: Encoder, value: T) = encoder.encodeStructure(descriptor) {
        encodeSerializableElement(descriptor, 0, serializerPart1.serializer, serializerPart1.generator(value))
        encodeSerializableElement(descriptor, 1, serializerPart2.serializer, serializerPart2.generator(value))
        encodeSerializableElement(descriptor, 2, serializerPart3.serializer, serializerPart3.generator(value))
        encodeSerializableElement(descriptor, 3, serializerPart4.serializer, serializerPart4.generator(value))
        encodeSerializableElement(descriptor, 4, serializerPart5.serializer, serializerPart5.generator(value))
        encodeSerializableElement(descriptor, 5, serializerPart6.serializer, serializerPart6.generator(value))
        encodeSerializableElement(descriptor, 6, serializerPart7.serializer, serializerPart7.generator(value))
        encodeSerializableElement(descriptor, 7, serializerPart8.serializer, serializerPart8.generator(value))
        encodeSerializableElement(descriptor, 8, serializerPart9.serializer, serializerPart9.generator(value))
        encodeSerializableElement(descriptor, 9, serializerPart10.serializer, serializerPart10.generator(value))
        encodeSerializableElement(descriptor, 10, serializerPart11.serializer, serializerPart11.generator(value))
        encodeSerializableElement(descriptor, 11, serializerPart12.serializer, serializerPart12.generator(value))
        encodeSerializableElement(descriptor, 12, serializerPart13.serializer, serializerPart13.generator(value))
        encodeSerializableElement(descriptor, 13, serializerPart14.serializer, serializerPart14.generator(value))
        encodeSerializableElement(descriptor, 14, serializerPart15.serializer, serializerPart15.generator(value))
        encodeSerializableElement(descriptor, 15, serializerPart16.serializer, serializerPart16.generator(value))
        encodeSerializableElement(descriptor, 16, serializerPart17.serializer, serializerPart17.generator(value))
        encodeSerializableElement(descriptor, 17, serializerPart18.serializer, serializerPart18.generator(value))
        encodeSerializableElement(descriptor, 18, serializerPart19.serializer, serializerPart19.generator(value))
        encodeSerializableElement(descriptor, 19, serializerPart20.serializer, serializerPart20.generator(value))
        encodeSerializableElement(descriptor, 20, serializerPart21.serializer, serializerPart21.generator(value))
        encodeSerializableElement(descriptor, 21, serializerPart22.serializer, serializerPart22.generator(value))
        encodeSerializableElement(descriptor, 22, serializerPart23.serializer, serializerPart23.generator(value))
        encodeSerializableElement(descriptor, 23, serializerPart24.serializer, serializerPart24.generator(value))
        encodeSerializableElement(descriptor, 24, serializerPart25.serializer, serializerPart25.generator(value))
    }

    @OptIn(ExperimentalSerializationApi::class)
    final override fun deserialize(decoder: Decoder): T = decoder.decodeStructure(descriptor) {
        if (decodeSequentially()) {
            build(
                decodeSerializableElement(descriptor, 0, serializerPart1.serializer),
                decodeSerializableElement(descriptor, 1, serializerPart2.serializer),
                decodeSerializableElement(descriptor, 2, serializerPart3.serializer),
                decodeSerializableElement(descriptor, 3, serializerPart4.serializer),
                decodeSerializableElement(descriptor, 4, serializerPart5.serializer),
                decodeSerializableElement(descriptor, 5, serializerPart6.serializer),
                decodeSerializableElement(descriptor, 6, serializerPart7.serializer),
                decodeSerializableElement(descriptor, 7, serializerPart8.serializer),
                decodeSerializableElement(descriptor, 8, serializerPart9.serializer),
                decodeSerializableElement(descriptor, 9, serializerPart10.serializer),
                decodeSerializableElement(descriptor, 10, serializerPart11.serializer),
                decodeSerializableElement(descriptor, 11, serializerPart12.serializer),
                decodeSerializableElement(descriptor, 12, serializerPart13.serializer),
                decodeSerializableElement(descriptor, 13, serializerPart14.serializer),
                decodeSerializableElement(descriptor, 14, serializerPart15.serializer),
                decodeSerializableElement(descriptor, 15, serializerPart16.serializer),
                decodeSerializableElement(descriptor, 16, serializerPart17.serializer),
                decodeSerializableElement(descriptor, 17, serializerPart18.serializer),
                decodeSerializableElement(descriptor, 18, serializerPart19.serializer),
                decodeSerializableElement(descriptor, 19, serializerPart20.serializer),
                decodeSerializableElement(descriptor, 20, serializerPart21.serializer),
                decodeSerializableElement(descriptor, 21, serializerPart22.serializer),
                decodeSerializableElement(descriptor, 22, serializerPart23.serializer),
                decodeSerializableElement(descriptor, 23, serializerPart24.serializer),
                decodeSerializableElement(descriptor, 24, serializerPart25.serializer),
            )
        } else {
            var value1: R1? = null
            var value2: R2? = null
            var value3: R3? = null
            var value4: R4? = null
            var value5: R5? = null
            var value6: R6? = null
            var value7: R7? = null
            var value8: R8? = null
            var value9: R9? = null
            var value10: R10? = null
            var value11: R11? = null
            var value12: R12? = null
            var value13: R13? = null
            var value14: R14? = null
            var value15: R15? = null
            var value16: R16? = null
            var value17: R17? = null
            var value18: R18? = null
            var value19: R19? = null
            var value20: R20? = null
            var value21: R21? = null
            var value22: R22? = null
            var value23: R23? = null
            var value24: R24? = null
            var value25: R25? = null
            while (true) {
                when (val index = decodeElementIndex(descriptor)) {
                    0 -> value1 = decodeSerializableElement(descriptor, 0, serializerPart1.serializer)
                    1 -> value2 = decodeSerializableElement(descriptor, 1, serializerPart2.serializer)
                    2 -> value3 = decodeSerializableElement(descriptor, 2, serializerPart3.serializer)
                    3 -> value4 = decodeSerializableElement(descriptor, 3, serializerPart4.serializer)
                    4 -> value5 = decodeSerializableElement(descriptor, 4, serializerPart5.serializer)
                    5 -> value6 = decodeSerializableElement(descriptor, 5, serializerPart6.serializer)
                    6 -> value7 = decodeSerializableElement(descriptor, 6, serializerPart7.serializer)
                    7 -> value8 = decodeSerializableElement(descriptor, 7, serializerPart8.serializer)
                    8 -> value9 = decodeSerializableElement(descriptor, 8, serializerPart9.serializer)
                    9 -> value10 = decodeSerializableElement(descriptor, 9, serializerPart10.serializer)
                    10 -> value11 = decodeSerializableElement(descriptor, 10, serializerPart11.serializer)
                    11 -> value12 = decodeSerializableElement(descriptor, 11, serializerPart12.serializer)
                    12 -> value13 = decodeSerializableElement(descriptor, 12, serializerPart13.serializer)
                    13 -> value14 = decodeSerializableElement(descriptor, 13, serializerPart14.serializer)
                    14 -> value15 = decodeSerializableElement(descriptor, 14, serializerPart15.serializer)
                    15 -> value16 = decodeSerializableElement(descriptor, 15, serializerPart16.serializer)
                    16 -> value17 = decodeSerializableElement(descriptor, 16, serializerPart17.serializer)
                    17 -> value18 = decodeSerializableElement(descriptor, 17, serializerPart18.serializer)
                    18 -> value19 = decodeSerializableElement(descriptor, 18, serializerPart19.serializer)
                    19 -> value20 = decodeSerializableElement(descriptor, 19, serializerPart20.serializer)
                    20 -> value21 = decodeSerializableElement(descriptor, 20, serializerPart21.serializer)
                    21 -> value22 = decodeSerializableElement(descriptor, 21, serializerPart22.serializer)
                    22 -> value23 = decodeSerializableElement(descriptor, 22, serializerPart23.serializer)
                    23 -> value24 = decodeSerializableElement(descriptor, 23, serializerPart24.serializer)
                    24 -> value25 = decodeSerializableElement(descriptor, 24, serializerPart25.serializer)
                    CompositeDecoder.DECODE_DONE -> break
                    else -> error("Unexpected index: $index")
                }
            }
            return@decodeStructure build(
                value1 ?: error("Absent field: ${serializerPart1.name}"),
                value2 ?: error("Absent field: ${serializerPart2.name}"),
                value3 ?: error("Absent field: ${serializerPart3.name}"),
                value4 ?: error("Absent field: ${serializerPart4.name}"),
                value5 ?: error("Absent field: ${serializerPart5.name}"),
                value6 ?: error("Absent field: ${serializerPart6.name}"),
                value7 ?: error("Absent field: ${serializerPart7.name}"),
                value8 ?: error("Absent field: ${serializerPart8.name}"),
                value9 ?: error("Absent field: ${serializerPart9.name}"),
                value10 ?: error("Absent field: ${serializerPart10.name}"),
                value11 ?: error("Absent field: ${serializerPart11.name}"),
                value12 ?: error("Absent field: ${serializerPart12.name}"),
                value13 ?: error("Absent field: ${serializerPart13.name}"),
                value14 ?: error("Absent field: ${serializerPart14.name}"),
                value15 ?: error("Absent field: ${serializerPart15.name}"),
                value16 ?: error("Absent field: ${serializerPart16.name}"),
                value17 ?: error("Absent field: ${serializerPart17.name}"),
                value18 ?: error("Absent field: ${serializerPart18.name}"),
                value19 ?: error("Absent field: ${serializerPart19.name}"),
                value20 ?: error("Absent field: ${serializerPart20.name}"),
                value21 ?: error("Absent field: ${serializerPart21.name}"),
                value22 ?: error("Absent field: ${serializerPart22.name}"),
                value23 ?: error("Absent field: ${serializerPart23.name}"),
                value24 ?: error("Absent field: ${serializerPart24.name}"),
                value25 ?: error("Absent field: ${serializerPart25.name}"),
            )
        }
    }
}

fun <T, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20, R21, R22, R23, R24, R25> classSerializer(
    descriptorName: String,
    serializerPart1: Property<T, R1>,
    serializerPart2: Property<T, R2>,
    serializerPart3: Property<T, R3>,
    serializerPart4: Property<T, R4>,
    serializerPart5: Property<T, R5>,
    serializerPart6: Property<T, R6>,
    serializerPart7: Property<T, R7>,
    serializerPart8: Property<T, R8>,
    serializerPart9: Property<T, R9>,
    serializerPart10: Property<T, R10>,
    serializerPart11: Property<T, R11>,
    serializerPart12: Property<T, R12>,
    serializerPart13: Property<T, R13>,
    serializerPart14: Property<T, R14>,
    serializerPart15: Property<T, R15>,
    serializerPart16: Property<T, R16>,
    serializerPart17: Property<T, R17>,
    serializerPart18: Property<T, R18>,
    serializerPart19: Property<T, R19>,
    serializerPart20: Property<T, R20>,
    serializerPart21: Property<T, R21>,
    serializerPart22: Property<T, R22>,
    serializerPart23: Property<T, R23>,
    serializerPart24: Property<T, R24>,
    serializerPart25: Property<T, R25>,
    build: (R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20, R21, R22, R23, R24, R25) -> T,
) : KSerializer<T> = ClassKSerializer25(
    descriptorName,
    serializerPart1,
    serializerPart2,
    serializerPart3,
    serializerPart4,
    serializerPart5,
    serializerPart6,
    serializerPart7,
    serializerPart8,
    serializerPart9,
    serializerPart10,
    serializerPart11,
    serializerPart12,
    serializerPart13,
    serializerPart14,
    serializerPart15,
    serializerPart16,
    serializerPart17,
    serializerPart18,
    serializerPart19,
    serializerPart20,
    serializerPart21,
    serializerPart22,
    serializerPart23,
    serializerPart24,
    serializerPart25,
    build,
)

open class ClassKSerializer26<T, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20, R21, R22, R23, R24, R25, R26>(
    private val descriptorName: String,
    private val serializerPart1: Property<T, R1>,
    private val serializerPart2: Property<T, R2>,
    private val serializerPart3: Property<T, R3>,
    private val serializerPart4: Property<T, R4>,
    private val serializerPart5: Property<T, R5>,
    private val serializerPart6: Property<T, R6>,
    private val serializerPart7: Property<T, R7>,
    private val serializerPart8: Property<T, R8>,
    private val serializerPart9: Property<T, R9>,
    private val serializerPart10: Property<T, R10>,
    private val serializerPart11: Property<T, R11>,
    private val serializerPart12: Property<T, R12>,
    private val serializerPart13: Property<T, R13>,
    private val serializerPart14: Property<T, R14>,
    private val serializerPart15: Property<T, R15>,
    private val serializerPart16: Property<T, R16>,
    private val serializerPart17: Property<T, R17>,
    private val serializerPart18: Property<T, R18>,
    private val serializerPart19: Property<T, R19>,
    private val serializerPart20: Property<T, R20>,
    private val serializerPart21: Property<T, R21>,
    private val serializerPart22: Property<T, R22>,
    private val serializerPart23: Property<T, R23>,
    private val serializerPart24: Property<T, R24>,
    private val serializerPart25: Property<T, R25>,
    private val serializerPart26: Property<T, R26>,
    private val build: (R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20, R21, R22, R23, R24, R25, R26) -> T,
) : KSerializer<T> {
    final override val descriptor: SerialDescriptor = buildClassSerialDescriptor(descriptorName) {
        element(serializerPart1.name, serializerPart1.serializer.descriptor)
        element(serializerPart2.name, serializerPart2.serializer.descriptor)
        element(serializerPart3.name, serializerPart3.serializer.descriptor)
        element(serializerPart4.name, serializerPart4.serializer.descriptor)
        element(serializerPart5.name, serializerPart5.serializer.descriptor)
        element(serializerPart6.name, serializerPart6.serializer.descriptor)
        element(serializerPart7.name, serializerPart7.serializer.descriptor)
        element(serializerPart8.name, serializerPart8.serializer.descriptor)
        element(serializerPart9.name, serializerPart9.serializer.descriptor)
        element(serializerPart10.name, serializerPart10.serializer.descriptor)
        element(serializerPart11.name, serializerPart11.serializer.descriptor)
        element(serializerPart12.name, serializerPart12.serializer.descriptor)
        element(serializerPart13.name, serializerPart13.serializer.descriptor)
        element(serializerPart14.name, serializerPart14.serializer.descriptor)
        element(serializerPart15.name, serializerPart15.serializer.descriptor)
        element(serializerPart16.name, serializerPart16.serializer.descriptor)
        element(serializerPart17.name, serializerPart17.serializer.descriptor)
        element(serializerPart18.name, serializerPart18.serializer.descriptor)
        element(serializerPart19.name, serializerPart19.serializer.descriptor)
        element(serializerPart20.name, serializerPart20.serializer.descriptor)
        element(serializerPart21.name, serializerPart21.serializer.descriptor)
        element(serializerPart22.name, serializerPart22.serializer.descriptor)
        element(serializerPart23.name, serializerPart23.serializer.descriptor)
        element(serializerPart24.name, serializerPart24.serializer.descriptor)
        element(serializerPart25.name, serializerPart25.serializer.descriptor)
        element(serializerPart26.name, serializerPart26.serializer.descriptor)
    }

    final override fun serialize(encoder: Encoder, value: T) = encoder.encodeStructure(descriptor) {
        encodeSerializableElement(descriptor, 0, serializerPart1.serializer, serializerPart1.generator(value))
        encodeSerializableElement(descriptor, 1, serializerPart2.serializer, serializerPart2.generator(value))
        encodeSerializableElement(descriptor, 2, serializerPart3.serializer, serializerPart3.generator(value))
        encodeSerializableElement(descriptor, 3, serializerPart4.serializer, serializerPart4.generator(value))
        encodeSerializableElement(descriptor, 4, serializerPart5.serializer, serializerPart5.generator(value))
        encodeSerializableElement(descriptor, 5, serializerPart6.serializer, serializerPart6.generator(value))
        encodeSerializableElement(descriptor, 6, serializerPart7.serializer, serializerPart7.generator(value))
        encodeSerializableElement(descriptor, 7, serializerPart8.serializer, serializerPart8.generator(value))
        encodeSerializableElement(descriptor, 8, serializerPart9.serializer, serializerPart9.generator(value))
        encodeSerializableElement(descriptor, 9, serializerPart10.serializer, serializerPart10.generator(value))
        encodeSerializableElement(descriptor, 10, serializerPart11.serializer, serializerPart11.generator(value))
        encodeSerializableElement(descriptor, 11, serializerPart12.serializer, serializerPart12.generator(value))
        encodeSerializableElement(descriptor, 12, serializerPart13.serializer, serializerPart13.generator(value))
        encodeSerializableElement(descriptor, 13, serializerPart14.serializer, serializerPart14.generator(value))
        encodeSerializableElement(descriptor, 14, serializerPart15.serializer, serializerPart15.generator(value))
        encodeSerializableElement(descriptor, 15, serializerPart16.serializer, serializerPart16.generator(value))
        encodeSerializableElement(descriptor, 16, serializerPart17.serializer, serializerPart17.generator(value))
        encodeSerializableElement(descriptor, 17, serializerPart18.serializer, serializerPart18.generator(value))
        encodeSerializableElement(descriptor, 18, serializerPart19.serializer, serializerPart19.generator(value))
        encodeSerializableElement(descriptor, 19, serializerPart20.serializer, serializerPart20.generator(value))
        encodeSerializableElement(descriptor, 20, serializerPart21.serializer, serializerPart21.generator(value))
        encodeSerializableElement(descriptor, 21, serializerPart22.serializer, serializerPart22.generator(value))
        encodeSerializableElement(descriptor, 22, serializerPart23.serializer, serializerPart23.generator(value))
        encodeSerializableElement(descriptor, 23, serializerPart24.serializer, serializerPart24.generator(value))
        encodeSerializableElement(descriptor, 24, serializerPart25.serializer, serializerPart25.generator(value))
        encodeSerializableElement(descriptor, 25, serializerPart26.serializer, serializerPart26.generator(value))
    }

    @OptIn(ExperimentalSerializationApi::class)
    final override fun deserialize(decoder: Decoder): T = decoder.decodeStructure(descriptor) {
        if (decodeSequentially()) {
            build(
                decodeSerializableElement(descriptor, 0, serializerPart1.serializer),
                decodeSerializableElement(descriptor, 1, serializerPart2.serializer),
                decodeSerializableElement(descriptor, 2, serializerPart3.serializer),
                decodeSerializableElement(descriptor, 3, serializerPart4.serializer),
                decodeSerializableElement(descriptor, 4, serializerPart5.serializer),
                decodeSerializableElement(descriptor, 5, serializerPart6.serializer),
                decodeSerializableElement(descriptor, 6, serializerPart7.serializer),
                decodeSerializableElement(descriptor, 7, serializerPart8.serializer),
                decodeSerializableElement(descriptor, 8, serializerPart9.serializer),
                decodeSerializableElement(descriptor, 9, serializerPart10.serializer),
                decodeSerializableElement(descriptor, 10, serializerPart11.serializer),
                decodeSerializableElement(descriptor, 11, serializerPart12.serializer),
                decodeSerializableElement(descriptor, 12, serializerPart13.serializer),
                decodeSerializableElement(descriptor, 13, serializerPart14.serializer),
                decodeSerializableElement(descriptor, 14, serializerPart15.serializer),
                decodeSerializableElement(descriptor, 15, serializerPart16.serializer),
                decodeSerializableElement(descriptor, 16, serializerPart17.serializer),
                decodeSerializableElement(descriptor, 17, serializerPart18.serializer),
                decodeSerializableElement(descriptor, 18, serializerPart19.serializer),
                decodeSerializableElement(descriptor, 19, serializerPart20.serializer),
                decodeSerializableElement(descriptor, 20, serializerPart21.serializer),
                decodeSerializableElement(descriptor, 21, serializerPart22.serializer),
                decodeSerializableElement(descriptor, 22, serializerPart23.serializer),
                decodeSerializableElement(descriptor, 23, serializerPart24.serializer),
                decodeSerializableElement(descriptor, 24, serializerPart25.serializer),
                decodeSerializableElement(descriptor, 25, serializerPart26.serializer),
            )
        } else {
            var value1: R1? = null
            var value2: R2? = null
            var value3: R3? = null
            var value4: R4? = null
            var value5: R5? = null
            var value6: R6? = null
            var value7: R7? = null
            var value8: R8? = null
            var value9: R9? = null
            var value10: R10? = null
            var value11: R11? = null
            var value12: R12? = null
            var value13: R13? = null
            var value14: R14? = null
            var value15: R15? = null
            var value16: R16? = null
            var value17: R17? = null
            var value18: R18? = null
            var value19: R19? = null
            var value20: R20? = null
            var value21: R21? = null
            var value22: R22? = null
            var value23: R23? = null
            var value24: R24? = null
            var value25: R25? = null
            var value26: R26? = null
            while (true) {
                when (val index = decodeElementIndex(descriptor)) {
                    0 -> value1 = decodeSerializableElement(descriptor, 0, serializerPart1.serializer)
                    1 -> value2 = decodeSerializableElement(descriptor, 1, serializerPart2.serializer)
                    2 -> value3 = decodeSerializableElement(descriptor, 2, serializerPart3.serializer)
                    3 -> value4 = decodeSerializableElement(descriptor, 3, serializerPart4.serializer)
                    4 -> value5 = decodeSerializableElement(descriptor, 4, serializerPart5.serializer)
                    5 -> value6 = decodeSerializableElement(descriptor, 5, serializerPart6.serializer)
                    6 -> value7 = decodeSerializableElement(descriptor, 6, serializerPart7.serializer)
                    7 -> value8 = decodeSerializableElement(descriptor, 7, serializerPart8.serializer)
                    8 -> value9 = decodeSerializableElement(descriptor, 8, serializerPart9.serializer)
                    9 -> value10 = decodeSerializableElement(descriptor, 9, serializerPart10.serializer)
                    10 -> value11 = decodeSerializableElement(descriptor, 10, serializerPart11.serializer)
                    11 -> value12 = decodeSerializableElement(descriptor, 11, serializerPart12.serializer)
                    12 -> value13 = decodeSerializableElement(descriptor, 12, serializerPart13.serializer)
                    13 -> value14 = decodeSerializableElement(descriptor, 13, serializerPart14.serializer)
                    14 -> value15 = decodeSerializableElement(descriptor, 14, serializerPart15.serializer)
                    15 -> value16 = decodeSerializableElement(descriptor, 15, serializerPart16.serializer)
                    16 -> value17 = decodeSerializableElement(descriptor, 16, serializerPart17.serializer)
                    17 -> value18 = decodeSerializableElement(descriptor, 17, serializerPart18.serializer)
                    18 -> value19 = decodeSerializableElement(descriptor, 18, serializerPart19.serializer)
                    19 -> value20 = decodeSerializableElement(descriptor, 19, serializerPart20.serializer)
                    20 -> value21 = decodeSerializableElement(descriptor, 20, serializerPart21.serializer)
                    21 -> value22 = decodeSerializableElement(descriptor, 21, serializerPart22.serializer)
                    22 -> value23 = decodeSerializableElement(descriptor, 22, serializerPart23.serializer)
                    23 -> value24 = decodeSerializableElement(descriptor, 23, serializerPart24.serializer)
                    24 -> value25 = decodeSerializableElement(descriptor, 24, serializerPart25.serializer)
                    25 -> value26 = decodeSerializableElement(descriptor, 25, serializerPart26.serializer)
                    CompositeDecoder.DECODE_DONE -> break
                    else -> error("Unexpected index: $index")
                }
            }
            return@decodeStructure build(
                value1 ?: error("Absent field: ${serializerPart1.name}"),
                value2 ?: error("Absent field: ${serializerPart2.name}"),
                value3 ?: error("Absent field: ${serializerPart3.name}"),
                value4 ?: error("Absent field: ${serializerPart4.name}"),
                value5 ?: error("Absent field: ${serializerPart5.name}"),
                value6 ?: error("Absent field: ${serializerPart6.name}"),
                value7 ?: error("Absent field: ${serializerPart7.name}"),
                value8 ?: error("Absent field: ${serializerPart8.name}"),
                value9 ?: error("Absent field: ${serializerPart9.name}"),
                value10 ?: error("Absent field: ${serializerPart10.name}"),
                value11 ?: error("Absent field: ${serializerPart11.name}"),
                value12 ?: error("Absent field: ${serializerPart12.name}"),
                value13 ?: error("Absent field: ${serializerPart13.name}"),
                value14 ?: error("Absent field: ${serializerPart14.name}"),
                value15 ?: error("Absent field: ${serializerPart15.name}"),
                value16 ?: error("Absent field: ${serializerPart16.name}"),
                value17 ?: error("Absent field: ${serializerPart17.name}"),
                value18 ?: error("Absent field: ${serializerPart18.name}"),
                value19 ?: error("Absent field: ${serializerPart19.name}"),
                value20 ?: error("Absent field: ${serializerPart20.name}"),
                value21 ?: error("Absent field: ${serializerPart21.name}"),
                value22 ?: error("Absent field: ${serializerPart22.name}"),
                value23 ?: error("Absent field: ${serializerPart23.name}"),
                value24 ?: error("Absent field: ${serializerPart24.name}"),
                value25 ?: error("Absent field: ${serializerPart25.name}"),
                value26 ?: error("Absent field: ${serializerPart26.name}"),
            )
        }
    }
}

fun <T, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20, R21, R22, R23, R24, R25, R26> classSerializer(
    descriptorName: String,
    serializerPart1: Property<T, R1>,
    serializerPart2: Property<T, R2>,
    serializerPart3: Property<T, R3>,
    serializerPart4: Property<T, R4>,
    serializerPart5: Property<T, R5>,
    serializerPart6: Property<T, R6>,
    serializerPart7: Property<T, R7>,
    serializerPart8: Property<T, R8>,
    serializerPart9: Property<T, R9>,
    serializerPart10: Property<T, R10>,
    serializerPart11: Property<T, R11>,
    serializerPart12: Property<T, R12>,
    serializerPart13: Property<T, R13>,
    serializerPart14: Property<T, R14>,
    serializerPart15: Property<T, R15>,
    serializerPart16: Property<T, R16>,
    serializerPart17: Property<T, R17>,
    serializerPart18: Property<T, R18>,
    serializerPart19: Property<T, R19>,
    serializerPart20: Property<T, R20>,
    serializerPart21: Property<T, R21>,
    serializerPart22: Property<T, R22>,
    serializerPart23: Property<T, R23>,
    serializerPart24: Property<T, R24>,
    serializerPart25: Property<T, R25>,
    serializerPart26: Property<T, R26>,
    build: (R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20, R21, R22, R23, R24, R25, R26) -> T,
) : KSerializer<T> = ClassKSerializer26(
    descriptorName,
    serializerPart1,
    serializerPart2,
    serializerPart3,
    serializerPart4,
    serializerPart5,
    serializerPart6,
    serializerPart7,
    serializerPart8,
    serializerPart9,
    serializerPart10,
    serializerPart11,
    serializerPart12,
    serializerPart13,
    serializerPart14,
    serializerPart15,
    serializerPart16,
    serializerPart17,
    serializerPart18,
    serializerPart19,
    serializerPart20,
    serializerPart21,
    serializerPart22,
    serializerPart23,
    serializerPart24,
    serializerPart25,
    serializerPart26,
    build,
)

open class ClassKSerializer27<T, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20, R21, R22, R23, R24, R25, R26, R27>(
    private val descriptorName: String,
    private val serializerPart1: Property<T, R1>,
    private val serializerPart2: Property<T, R2>,
    private val serializerPart3: Property<T, R3>,
    private val serializerPart4: Property<T, R4>,
    private val serializerPart5: Property<T, R5>,
    private val serializerPart6: Property<T, R6>,
    private val serializerPart7: Property<T, R7>,
    private val serializerPart8: Property<T, R8>,
    private val serializerPart9: Property<T, R9>,
    private val serializerPart10: Property<T, R10>,
    private val serializerPart11: Property<T, R11>,
    private val serializerPart12: Property<T, R12>,
    private val serializerPart13: Property<T, R13>,
    private val serializerPart14: Property<T, R14>,
    private val serializerPart15: Property<T, R15>,
    private val serializerPart16: Property<T, R16>,
    private val serializerPart17: Property<T, R17>,
    private val serializerPart18: Property<T, R18>,
    private val serializerPart19: Property<T, R19>,
    private val serializerPart20: Property<T, R20>,
    private val serializerPart21: Property<T, R21>,
    private val serializerPart22: Property<T, R22>,
    private val serializerPart23: Property<T, R23>,
    private val serializerPart24: Property<T, R24>,
    private val serializerPart25: Property<T, R25>,
    private val serializerPart26: Property<T, R26>,
    private val serializerPart27: Property<T, R27>,
    private val build: (R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20, R21, R22, R23, R24, R25, R26, R27) -> T,
) : KSerializer<T> {
    final override val descriptor: SerialDescriptor = buildClassSerialDescriptor(descriptorName) {
        element(serializerPart1.name, serializerPart1.serializer.descriptor)
        element(serializerPart2.name, serializerPart2.serializer.descriptor)
        element(serializerPart3.name, serializerPart3.serializer.descriptor)
        element(serializerPart4.name, serializerPart4.serializer.descriptor)
        element(serializerPart5.name, serializerPart5.serializer.descriptor)
        element(serializerPart6.name, serializerPart6.serializer.descriptor)
        element(serializerPart7.name, serializerPart7.serializer.descriptor)
        element(serializerPart8.name, serializerPart8.serializer.descriptor)
        element(serializerPart9.name, serializerPart9.serializer.descriptor)
        element(serializerPart10.name, serializerPart10.serializer.descriptor)
        element(serializerPart11.name, serializerPart11.serializer.descriptor)
        element(serializerPart12.name, serializerPart12.serializer.descriptor)
        element(serializerPart13.name, serializerPart13.serializer.descriptor)
        element(serializerPart14.name, serializerPart14.serializer.descriptor)
        element(serializerPart15.name, serializerPart15.serializer.descriptor)
        element(serializerPart16.name, serializerPart16.serializer.descriptor)
        element(serializerPart17.name, serializerPart17.serializer.descriptor)
        element(serializerPart18.name, serializerPart18.serializer.descriptor)
        element(serializerPart19.name, serializerPart19.serializer.descriptor)
        element(serializerPart20.name, serializerPart20.serializer.descriptor)
        element(serializerPart21.name, serializerPart21.serializer.descriptor)
        element(serializerPart22.name, serializerPart22.serializer.descriptor)
        element(serializerPart23.name, serializerPart23.serializer.descriptor)
        element(serializerPart24.name, serializerPart24.serializer.descriptor)
        element(serializerPart25.name, serializerPart25.serializer.descriptor)
        element(serializerPart26.name, serializerPart26.serializer.descriptor)
        element(serializerPart27.name, serializerPart27.serializer.descriptor)
    }

    final override fun serialize(encoder: Encoder, value: T) = encoder.encodeStructure(descriptor) {
        encodeSerializableElement(descriptor, 0, serializerPart1.serializer, serializerPart1.generator(value))
        encodeSerializableElement(descriptor, 1, serializerPart2.serializer, serializerPart2.generator(value))
        encodeSerializableElement(descriptor, 2, serializerPart3.serializer, serializerPart3.generator(value))
        encodeSerializableElement(descriptor, 3, serializerPart4.serializer, serializerPart4.generator(value))
        encodeSerializableElement(descriptor, 4, serializerPart5.serializer, serializerPart5.generator(value))
        encodeSerializableElement(descriptor, 5, serializerPart6.serializer, serializerPart6.generator(value))
        encodeSerializableElement(descriptor, 6, serializerPart7.serializer, serializerPart7.generator(value))
        encodeSerializableElement(descriptor, 7, serializerPart8.serializer, serializerPart8.generator(value))
        encodeSerializableElement(descriptor, 8, serializerPart9.serializer, serializerPart9.generator(value))
        encodeSerializableElement(descriptor, 9, serializerPart10.serializer, serializerPart10.generator(value))
        encodeSerializableElement(descriptor, 10, serializerPart11.serializer, serializerPart11.generator(value))
        encodeSerializableElement(descriptor, 11, serializerPart12.serializer, serializerPart12.generator(value))
        encodeSerializableElement(descriptor, 12, serializerPart13.serializer, serializerPart13.generator(value))
        encodeSerializableElement(descriptor, 13, serializerPart14.serializer, serializerPart14.generator(value))
        encodeSerializableElement(descriptor, 14, serializerPart15.serializer, serializerPart15.generator(value))
        encodeSerializableElement(descriptor, 15, serializerPart16.serializer, serializerPart16.generator(value))
        encodeSerializableElement(descriptor, 16, serializerPart17.serializer, serializerPart17.generator(value))
        encodeSerializableElement(descriptor, 17, serializerPart18.serializer, serializerPart18.generator(value))
        encodeSerializableElement(descriptor, 18, serializerPart19.serializer, serializerPart19.generator(value))
        encodeSerializableElement(descriptor, 19, serializerPart20.serializer, serializerPart20.generator(value))
        encodeSerializableElement(descriptor, 20, serializerPart21.serializer, serializerPart21.generator(value))
        encodeSerializableElement(descriptor, 21, serializerPart22.serializer, serializerPart22.generator(value))
        encodeSerializableElement(descriptor, 22, serializerPart23.serializer, serializerPart23.generator(value))
        encodeSerializableElement(descriptor, 23, serializerPart24.serializer, serializerPart24.generator(value))
        encodeSerializableElement(descriptor, 24, serializerPart25.serializer, serializerPart25.generator(value))
        encodeSerializableElement(descriptor, 25, serializerPart26.serializer, serializerPart26.generator(value))
        encodeSerializableElement(descriptor, 26, serializerPart27.serializer, serializerPart27.generator(value))
    }

    @OptIn(ExperimentalSerializationApi::class)
    final override fun deserialize(decoder: Decoder): T = decoder.decodeStructure(descriptor) {
        if (decodeSequentially()) {
            build(
                decodeSerializableElement(descriptor, 0, serializerPart1.serializer),
                decodeSerializableElement(descriptor, 1, serializerPart2.serializer),
                decodeSerializableElement(descriptor, 2, serializerPart3.serializer),
                decodeSerializableElement(descriptor, 3, serializerPart4.serializer),
                decodeSerializableElement(descriptor, 4, serializerPart5.serializer),
                decodeSerializableElement(descriptor, 5, serializerPart6.serializer),
                decodeSerializableElement(descriptor, 6, serializerPart7.serializer),
                decodeSerializableElement(descriptor, 7, serializerPart8.serializer),
                decodeSerializableElement(descriptor, 8, serializerPart9.serializer),
                decodeSerializableElement(descriptor, 9, serializerPart10.serializer),
                decodeSerializableElement(descriptor, 10, serializerPart11.serializer),
                decodeSerializableElement(descriptor, 11, serializerPart12.serializer),
                decodeSerializableElement(descriptor, 12, serializerPart13.serializer),
                decodeSerializableElement(descriptor, 13, serializerPart14.serializer),
                decodeSerializableElement(descriptor, 14, serializerPart15.serializer),
                decodeSerializableElement(descriptor, 15, serializerPart16.serializer),
                decodeSerializableElement(descriptor, 16, serializerPart17.serializer),
                decodeSerializableElement(descriptor, 17, serializerPart18.serializer),
                decodeSerializableElement(descriptor, 18, serializerPart19.serializer),
                decodeSerializableElement(descriptor, 19, serializerPart20.serializer),
                decodeSerializableElement(descriptor, 20, serializerPart21.serializer),
                decodeSerializableElement(descriptor, 21, serializerPart22.serializer),
                decodeSerializableElement(descriptor, 22, serializerPart23.serializer),
                decodeSerializableElement(descriptor, 23, serializerPart24.serializer),
                decodeSerializableElement(descriptor, 24, serializerPart25.serializer),
                decodeSerializableElement(descriptor, 25, serializerPart26.serializer),
                decodeSerializableElement(descriptor, 26, serializerPart27.serializer),
            )
        } else {
            var value1: R1? = null
            var value2: R2? = null
            var value3: R3? = null
            var value4: R4? = null
            var value5: R5? = null
            var value6: R6? = null
            var value7: R7? = null
            var value8: R8? = null
            var value9: R9? = null
            var value10: R10? = null
            var value11: R11? = null
            var value12: R12? = null
            var value13: R13? = null
            var value14: R14? = null
            var value15: R15? = null
            var value16: R16? = null
            var value17: R17? = null
            var value18: R18? = null
            var value19: R19? = null
            var value20: R20? = null
            var value21: R21? = null
            var value22: R22? = null
            var value23: R23? = null
            var value24: R24? = null
            var value25: R25? = null
            var value26: R26? = null
            var value27: R27? = null
            while (true) {
                when (val index = decodeElementIndex(descriptor)) {
                    0 -> value1 = decodeSerializableElement(descriptor, 0, serializerPart1.serializer)
                    1 -> value2 = decodeSerializableElement(descriptor, 1, serializerPart2.serializer)
                    2 -> value3 = decodeSerializableElement(descriptor, 2, serializerPart3.serializer)
                    3 -> value4 = decodeSerializableElement(descriptor, 3, serializerPart4.serializer)
                    4 -> value5 = decodeSerializableElement(descriptor, 4, serializerPart5.serializer)
                    5 -> value6 = decodeSerializableElement(descriptor, 5, serializerPart6.serializer)
                    6 -> value7 = decodeSerializableElement(descriptor, 6, serializerPart7.serializer)
                    7 -> value8 = decodeSerializableElement(descriptor, 7, serializerPart8.serializer)
                    8 -> value9 = decodeSerializableElement(descriptor, 8, serializerPart9.serializer)
                    9 -> value10 = decodeSerializableElement(descriptor, 9, serializerPart10.serializer)
                    10 -> value11 = decodeSerializableElement(descriptor, 10, serializerPart11.serializer)
                    11 -> value12 = decodeSerializableElement(descriptor, 11, serializerPart12.serializer)
                    12 -> value13 = decodeSerializableElement(descriptor, 12, serializerPart13.serializer)
                    13 -> value14 = decodeSerializableElement(descriptor, 13, serializerPart14.serializer)
                    14 -> value15 = decodeSerializableElement(descriptor, 14, serializerPart15.serializer)
                    15 -> value16 = decodeSerializableElement(descriptor, 15, serializerPart16.serializer)
                    16 -> value17 = decodeSerializableElement(descriptor, 16, serializerPart17.serializer)
                    17 -> value18 = decodeSerializableElement(descriptor, 17, serializerPart18.serializer)
                    18 -> value19 = decodeSerializableElement(descriptor, 18, serializerPart19.serializer)
                    19 -> value20 = decodeSerializableElement(descriptor, 19, serializerPart20.serializer)
                    20 -> value21 = decodeSerializableElement(descriptor, 20, serializerPart21.serializer)
                    21 -> value22 = decodeSerializableElement(descriptor, 21, serializerPart22.serializer)
                    22 -> value23 = decodeSerializableElement(descriptor, 22, serializerPart23.serializer)
                    23 -> value24 = decodeSerializableElement(descriptor, 23, serializerPart24.serializer)
                    24 -> value25 = decodeSerializableElement(descriptor, 24, serializerPart25.serializer)
                    25 -> value26 = decodeSerializableElement(descriptor, 25, serializerPart26.serializer)
                    26 -> value27 = decodeSerializableElement(descriptor, 26, serializerPart27.serializer)
                    CompositeDecoder.DECODE_DONE -> break
                    else -> error("Unexpected index: $index")
                }
            }
            return@decodeStructure build(
                value1 ?: error("Absent field: ${serializerPart1.name}"),
                value2 ?: error("Absent field: ${serializerPart2.name}"),
                value3 ?: error("Absent field: ${serializerPart3.name}"),
                value4 ?: error("Absent field: ${serializerPart4.name}"),
                value5 ?: error("Absent field: ${serializerPart5.name}"),
                value6 ?: error("Absent field: ${serializerPart6.name}"),
                value7 ?: error("Absent field: ${serializerPart7.name}"),
                value8 ?: error("Absent field: ${serializerPart8.name}"),
                value9 ?: error("Absent field: ${serializerPart9.name}"),
                value10 ?: error("Absent field: ${serializerPart10.name}"),
                value11 ?: error("Absent field: ${serializerPart11.name}"),
                value12 ?: error("Absent field: ${serializerPart12.name}"),
                value13 ?: error("Absent field: ${serializerPart13.name}"),
                value14 ?: error("Absent field: ${serializerPart14.name}"),
                value15 ?: error("Absent field: ${serializerPart15.name}"),
                value16 ?: error("Absent field: ${serializerPart16.name}"),
                value17 ?: error("Absent field: ${serializerPart17.name}"),
                value18 ?: error("Absent field: ${serializerPart18.name}"),
                value19 ?: error("Absent field: ${serializerPart19.name}"),
                value20 ?: error("Absent field: ${serializerPart20.name}"),
                value21 ?: error("Absent field: ${serializerPart21.name}"),
                value22 ?: error("Absent field: ${serializerPart22.name}"),
                value23 ?: error("Absent field: ${serializerPart23.name}"),
                value24 ?: error("Absent field: ${serializerPart24.name}"),
                value25 ?: error("Absent field: ${serializerPart25.name}"),
                value26 ?: error("Absent field: ${serializerPart26.name}"),
                value27 ?: error("Absent field: ${serializerPart27.name}"),
            )
        }
    }
}

fun <T, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20, R21, R22, R23, R24, R25, R26, R27> classSerializer(
    descriptorName: String,
    serializerPart1: Property<T, R1>,
    serializerPart2: Property<T, R2>,
    serializerPart3: Property<T, R3>,
    serializerPart4: Property<T, R4>,
    serializerPart5: Property<T, R5>,
    serializerPart6: Property<T, R6>,
    serializerPart7: Property<T, R7>,
    serializerPart8: Property<T, R8>,
    serializerPart9: Property<T, R9>,
    serializerPart10: Property<T, R10>,
    serializerPart11: Property<T, R11>,
    serializerPart12: Property<T, R12>,
    serializerPart13: Property<T, R13>,
    serializerPart14: Property<T, R14>,
    serializerPart15: Property<T, R15>,
    serializerPart16: Property<T, R16>,
    serializerPart17: Property<T, R17>,
    serializerPart18: Property<T, R18>,
    serializerPart19: Property<T, R19>,
    serializerPart20: Property<T, R20>,
    serializerPart21: Property<T, R21>,
    serializerPart22: Property<T, R22>,
    serializerPart23: Property<T, R23>,
    serializerPart24: Property<T, R24>,
    serializerPart25: Property<T, R25>,
    serializerPart26: Property<T, R26>,
    serializerPart27: Property<T, R27>,
    build: (R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20, R21, R22, R23, R24, R25, R26, R27) -> T,
) : KSerializer<T> = ClassKSerializer27(
    descriptorName,
    serializerPart1,
    serializerPart2,
    serializerPart3,
    serializerPart4,
    serializerPart5,
    serializerPart6,
    serializerPart7,
    serializerPart8,
    serializerPart9,
    serializerPart10,
    serializerPart11,
    serializerPart12,
    serializerPart13,
    serializerPart14,
    serializerPart15,
    serializerPart16,
    serializerPart17,
    serializerPart18,
    serializerPart19,
    serializerPart20,
    serializerPart21,
    serializerPart22,
    serializerPart23,
    serializerPart24,
    serializerPart25,
    serializerPart26,
    serializerPart27,
    build,
)

open class ClassKSerializer28<T, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20, R21, R22, R23, R24, R25, R26, R27, R28>(
    private val descriptorName: String,
    private val serializerPart1: Property<T, R1>,
    private val serializerPart2: Property<T, R2>,
    private val serializerPart3: Property<T, R3>,
    private val serializerPart4: Property<T, R4>,
    private val serializerPart5: Property<T, R5>,
    private val serializerPart6: Property<T, R6>,
    private val serializerPart7: Property<T, R7>,
    private val serializerPart8: Property<T, R8>,
    private val serializerPart9: Property<T, R9>,
    private val serializerPart10: Property<T, R10>,
    private val serializerPart11: Property<T, R11>,
    private val serializerPart12: Property<T, R12>,
    private val serializerPart13: Property<T, R13>,
    private val serializerPart14: Property<T, R14>,
    private val serializerPart15: Property<T, R15>,
    private val serializerPart16: Property<T, R16>,
    private val serializerPart17: Property<T, R17>,
    private val serializerPart18: Property<T, R18>,
    private val serializerPart19: Property<T, R19>,
    private val serializerPart20: Property<T, R20>,
    private val serializerPart21: Property<T, R21>,
    private val serializerPart22: Property<T, R22>,
    private val serializerPart23: Property<T, R23>,
    private val serializerPart24: Property<T, R24>,
    private val serializerPart25: Property<T, R25>,
    private val serializerPart26: Property<T, R26>,
    private val serializerPart27: Property<T, R27>,
    private val serializerPart28: Property<T, R28>,
    private val build: (R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20, R21, R22, R23, R24, R25, R26, R27, R28) -> T,
) : KSerializer<T> {
    final override val descriptor: SerialDescriptor = buildClassSerialDescriptor(descriptorName) {
        element(serializerPart1.name, serializerPart1.serializer.descriptor)
        element(serializerPart2.name, serializerPart2.serializer.descriptor)
        element(serializerPart3.name, serializerPart3.serializer.descriptor)
        element(serializerPart4.name, serializerPart4.serializer.descriptor)
        element(serializerPart5.name, serializerPart5.serializer.descriptor)
        element(serializerPart6.name, serializerPart6.serializer.descriptor)
        element(serializerPart7.name, serializerPart7.serializer.descriptor)
        element(serializerPart8.name, serializerPart8.serializer.descriptor)
        element(serializerPart9.name, serializerPart9.serializer.descriptor)
        element(serializerPart10.name, serializerPart10.serializer.descriptor)
        element(serializerPart11.name, serializerPart11.serializer.descriptor)
        element(serializerPart12.name, serializerPart12.serializer.descriptor)
        element(serializerPart13.name, serializerPart13.serializer.descriptor)
        element(serializerPart14.name, serializerPart14.serializer.descriptor)
        element(serializerPart15.name, serializerPart15.serializer.descriptor)
        element(serializerPart16.name, serializerPart16.serializer.descriptor)
        element(serializerPart17.name, serializerPart17.serializer.descriptor)
        element(serializerPart18.name, serializerPart18.serializer.descriptor)
        element(serializerPart19.name, serializerPart19.serializer.descriptor)
        element(serializerPart20.name, serializerPart20.serializer.descriptor)
        element(serializerPart21.name, serializerPart21.serializer.descriptor)
        element(serializerPart22.name, serializerPart22.serializer.descriptor)
        element(serializerPart23.name, serializerPart23.serializer.descriptor)
        element(serializerPart24.name, serializerPart24.serializer.descriptor)
        element(serializerPart25.name, serializerPart25.serializer.descriptor)
        element(serializerPart26.name, serializerPart26.serializer.descriptor)
        element(serializerPart27.name, serializerPart27.serializer.descriptor)
        element(serializerPart28.name, serializerPart28.serializer.descriptor)
    }

    final override fun serialize(encoder: Encoder, value: T) = encoder.encodeStructure(descriptor) {
        encodeSerializableElement(descriptor, 0, serializerPart1.serializer, serializerPart1.generator(value))
        encodeSerializableElement(descriptor, 1, serializerPart2.serializer, serializerPart2.generator(value))
        encodeSerializableElement(descriptor, 2, serializerPart3.serializer, serializerPart3.generator(value))
        encodeSerializableElement(descriptor, 3, serializerPart4.serializer, serializerPart4.generator(value))
        encodeSerializableElement(descriptor, 4, serializerPart5.serializer, serializerPart5.generator(value))
        encodeSerializableElement(descriptor, 5, serializerPart6.serializer, serializerPart6.generator(value))
        encodeSerializableElement(descriptor, 6, serializerPart7.serializer, serializerPart7.generator(value))
        encodeSerializableElement(descriptor, 7, serializerPart8.serializer, serializerPart8.generator(value))
        encodeSerializableElement(descriptor, 8, serializerPart9.serializer, serializerPart9.generator(value))
        encodeSerializableElement(descriptor, 9, serializerPart10.serializer, serializerPart10.generator(value))
        encodeSerializableElement(descriptor, 10, serializerPart11.serializer, serializerPart11.generator(value))
        encodeSerializableElement(descriptor, 11, serializerPart12.serializer, serializerPart12.generator(value))
        encodeSerializableElement(descriptor, 12, serializerPart13.serializer, serializerPart13.generator(value))
        encodeSerializableElement(descriptor, 13, serializerPart14.serializer, serializerPart14.generator(value))
        encodeSerializableElement(descriptor, 14, serializerPart15.serializer, serializerPart15.generator(value))
        encodeSerializableElement(descriptor, 15, serializerPart16.serializer, serializerPart16.generator(value))
        encodeSerializableElement(descriptor, 16, serializerPart17.serializer, serializerPart17.generator(value))
        encodeSerializableElement(descriptor, 17, serializerPart18.serializer, serializerPart18.generator(value))
        encodeSerializableElement(descriptor, 18, serializerPart19.serializer, serializerPart19.generator(value))
        encodeSerializableElement(descriptor, 19, serializerPart20.serializer, serializerPart20.generator(value))
        encodeSerializableElement(descriptor, 20, serializerPart21.serializer, serializerPart21.generator(value))
        encodeSerializableElement(descriptor, 21, serializerPart22.serializer, serializerPart22.generator(value))
        encodeSerializableElement(descriptor, 22, serializerPart23.serializer, serializerPart23.generator(value))
        encodeSerializableElement(descriptor, 23, serializerPart24.serializer, serializerPart24.generator(value))
        encodeSerializableElement(descriptor, 24, serializerPart25.serializer, serializerPart25.generator(value))
        encodeSerializableElement(descriptor, 25, serializerPart26.serializer, serializerPart26.generator(value))
        encodeSerializableElement(descriptor, 26, serializerPart27.serializer, serializerPart27.generator(value))
        encodeSerializableElement(descriptor, 27, serializerPart28.serializer, serializerPart28.generator(value))
    }

    @OptIn(ExperimentalSerializationApi::class)
    final override fun deserialize(decoder: Decoder): T = decoder.decodeStructure(descriptor) {
        if (decodeSequentially()) {
            build(
                decodeSerializableElement(descriptor, 0, serializerPart1.serializer),
                decodeSerializableElement(descriptor, 1, serializerPart2.serializer),
                decodeSerializableElement(descriptor, 2, serializerPart3.serializer),
                decodeSerializableElement(descriptor, 3, serializerPart4.serializer),
                decodeSerializableElement(descriptor, 4, serializerPart5.serializer),
                decodeSerializableElement(descriptor, 5, serializerPart6.serializer),
                decodeSerializableElement(descriptor, 6, serializerPart7.serializer),
                decodeSerializableElement(descriptor, 7, serializerPart8.serializer),
                decodeSerializableElement(descriptor, 8, serializerPart9.serializer),
                decodeSerializableElement(descriptor, 9, serializerPart10.serializer),
                decodeSerializableElement(descriptor, 10, serializerPart11.serializer),
                decodeSerializableElement(descriptor, 11, serializerPart12.serializer),
                decodeSerializableElement(descriptor, 12, serializerPart13.serializer),
                decodeSerializableElement(descriptor, 13, serializerPart14.serializer),
                decodeSerializableElement(descriptor, 14, serializerPart15.serializer),
                decodeSerializableElement(descriptor, 15, serializerPart16.serializer),
                decodeSerializableElement(descriptor, 16, serializerPart17.serializer),
                decodeSerializableElement(descriptor, 17, serializerPart18.serializer),
                decodeSerializableElement(descriptor, 18, serializerPart19.serializer),
                decodeSerializableElement(descriptor, 19, serializerPart20.serializer),
                decodeSerializableElement(descriptor, 20, serializerPart21.serializer),
                decodeSerializableElement(descriptor, 21, serializerPart22.serializer),
                decodeSerializableElement(descriptor, 22, serializerPart23.serializer),
                decodeSerializableElement(descriptor, 23, serializerPart24.serializer),
                decodeSerializableElement(descriptor, 24, serializerPart25.serializer),
                decodeSerializableElement(descriptor, 25, serializerPart26.serializer),
                decodeSerializableElement(descriptor, 26, serializerPart27.serializer),
                decodeSerializableElement(descriptor, 27, serializerPart28.serializer),
            )
        } else {
            var value1: R1? = null
            var value2: R2? = null
            var value3: R3? = null
            var value4: R4? = null
            var value5: R5? = null
            var value6: R6? = null
            var value7: R7? = null
            var value8: R8? = null
            var value9: R9? = null
            var value10: R10? = null
            var value11: R11? = null
            var value12: R12? = null
            var value13: R13? = null
            var value14: R14? = null
            var value15: R15? = null
            var value16: R16? = null
            var value17: R17? = null
            var value18: R18? = null
            var value19: R19? = null
            var value20: R20? = null
            var value21: R21? = null
            var value22: R22? = null
            var value23: R23? = null
            var value24: R24? = null
            var value25: R25? = null
            var value26: R26? = null
            var value27: R27? = null
            var value28: R28? = null
            while (true) {
                when (val index = decodeElementIndex(descriptor)) {
                    0 -> value1 = decodeSerializableElement(descriptor, 0, serializerPart1.serializer)
                    1 -> value2 = decodeSerializableElement(descriptor, 1, serializerPart2.serializer)
                    2 -> value3 = decodeSerializableElement(descriptor, 2, serializerPart3.serializer)
                    3 -> value4 = decodeSerializableElement(descriptor, 3, serializerPart4.serializer)
                    4 -> value5 = decodeSerializableElement(descriptor, 4, serializerPart5.serializer)
                    5 -> value6 = decodeSerializableElement(descriptor, 5, serializerPart6.serializer)
                    6 -> value7 = decodeSerializableElement(descriptor, 6, serializerPart7.serializer)
                    7 -> value8 = decodeSerializableElement(descriptor, 7, serializerPart8.serializer)
                    8 -> value9 = decodeSerializableElement(descriptor, 8, serializerPart9.serializer)
                    9 -> value10 = decodeSerializableElement(descriptor, 9, serializerPart10.serializer)
                    10 -> value11 = decodeSerializableElement(descriptor, 10, serializerPart11.serializer)
                    11 -> value12 = decodeSerializableElement(descriptor, 11, serializerPart12.serializer)
                    12 -> value13 = decodeSerializableElement(descriptor, 12, serializerPart13.serializer)
                    13 -> value14 = decodeSerializableElement(descriptor, 13, serializerPart14.serializer)
                    14 -> value15 = decodeSerializableElement(descriptor, 14, serializerPart15.serializer)
                    15 -> value16 = decodeSerializableElement(descriptor, 15, serializerPart16.serializer)
                    16 -> value17 = decodeSerializableElement(descriptor, 16, serializerPart17.serializer)
                    17 -> value18 = decodeSerializableElement(descriptor, 17, serializerPart18.serializer)
                    18 -> value19 = decodeSerializableElement(descriptor, 18, serializerPart19.serializer)
                    19 -> value20 = decodeSerializableElement(descriptor, 19, serializerPart20.serializer)
                    20 -> value21 = decodeSerializableElement(descriptor, 20, serializerPart21.serializer)
                    21 -> value22 = decodeSerializableElement(descriptor, 21, serializerPart22.serializer)
                    22 -> value23 = decodeSerializableElement(descriptor, 22, serializerPart23.serializer)
                    23 -> value24 = decodeSerializableElement(descriptor, 23, serializerPart24.serializer)
                    24 -> value25 = decodeSerializableElement(descriptor, 24, serializerPart25.serializer)
                    25 -> value26 = decodeSerializableElement(descriptor, 25, serializerPart26.serializer)
                    26 -> value27 = decodeSerializableElement(descriptor, 26, serializerPart27.serializer)
                    27 -> value28 = decodeSerializableElement(descriptor, 27, serializerPart28.serializer)
                    CompositeDecoder.DECODE_DONE -> break
                    else -> error("Unexpected index: $index")
                }
            }
            return@decodeStructure build(
                value1 ?: error("Absent field: ${serializerPart1.name}"),
                value2 ?: error("Absent field: ${serializerPart2.name}"),
                value3 ?: error("Absent field: ${serializerPart3.name}"),
                value4 ?: error("Absent field: ${serializerPart4.name}"),
                value5 ?: error("Absent field: ${serializerPart5.name}"),
                value6 ?: error("Absent field: ${serializerPart6.name}"),
                value7 ?: error("Absent field: ${serializerPart7.name}"),
                value8 ?: error("Absent field: ${serializerPart8.name}"),
                value9 ?: error("Absent field: ${serializerPart9.name}"),
                value10 ?: error("Absent field: ${serializerPart10.name}"),
                value11 ?: error("Absent field: ${serializerPart11.name}"),
                value12 ?: error("Absent field: ${serializerPart12.name}"),
                value13 ?: error("Absent field: ${serializerPart13.name}"),
                value14 ?: error("Absent field: ${serializerPart14.name}"),
                value15 ?: error("Absent field: ${serializerPart15.name}"),
                value16 ?: error("Absent field: ${serializerPart16.name}"),
                value17 ?: error("Absent field: ${serializerPart17.name}"),
                value18 ?: error("Absent field: ${serializerPart18.name}"),
                value19 ?: error("Absent field: ${serializerPart19.name}"),
                value20 ?: error("Absent field: ${serializerPart20.name}"),
                value21 ?: error("Absent field: ${serializerPart21.name}"),
                value22 ?: error("Absent field: ${serializerPart22.name}"),
                value23 ?: error("Absent field: ${serializerPart23.name}"),
                value24 ?: error("Absent field: ${serializerPart24.name}"),
                value25 ?: error("Absent field: ${serializerPart25.name}"),
                value26 ?: error("Absent field: ${serializerPart26.name}"),
                value27 ?: error("Absent field: ${serializerPart27.name}"),
                value28 ?: error("Absent field: ${serializerPart28.name}"),
            )
        }
    }
}

fun <T, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20, R21, R22, R23, R24, R25, R26, R27, R28> classSerializer(
    descriptorName: String,
    serializerPart1: Property<T, R1>,
    serializerPart2: Property<T, R2>,
    serializerPart3: Property<T, R3>,
    serializerPart4: Property<T, R4>,
    serializerPart5: Property<T, R5>,
    serializerPart6: Property<T, R6>,
    serializerPart7: Property<T, R7>,
    serializerPart8: Property<T, R8>,
    serializerPart9: Property<T, R9>,
    serializerPart10: Property<T, R10>,
    serializerPart11: Property<T, R11>,
    serializerPart12: Property<T, R12>,
    serializerPart13: Property<T, R13>,
    serializerPart14: Property<T, R14>,
    serializerPart15: Property<T, R15>,
    serializerPart16: Property<T, R16>,
    serializerPart17: Property<T, R17>,
    serializerPart18: Property<T, R18>,
    serializerPart19: Property<T, R19>,
    serializerPart20: Property<T, R20>,
    serializerPart21: Property<T, R21>,
    serializerPart22: Property<T, R22>,
    serializerPart23: Property<T, R23>,
    serializerPart24: Property<T, R24>,
    serializerPart25: Property<T, R25>,
    serializerPart26: Property<T, R26>,
    serializerPart27: Property<T, R27>,
    serializerPart28: Property<T, R28>,
    build: (R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20, R21, R22, R23, R24, R25, R26, R27, R28) -> T,
) : KSerializer<T> = ClassKSerializer28(
    descriptorName,
    serializerPart1,
    serializerPart2,
    serializerPart3,
    serializerPart4,
    serializerPart5,
    serializerPart6,
    serializerPart7,
    serializerPart8,
    serializerPart9,
    serializerPart10,
    serializerPart11,
    serializerPart12,
    serializerPart13,
    serializerPart14,
    serializerPart15,
    serializerPart16,
    serializerPart17,
    serializerPart18,
    serializerPart19,
    serializerPart20,
    serializerPart21,
    serializerPart22,
    serializerPart23,
    serializerPart24,
    serializerPart25,
    serializerPart26,
    serializerPart27,
    serializerPart28,
    build,
)

open class ClassKSerializer29<T, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29>(
    private val descriptorName: String,
    private val serializerPart1: Property<T, R1>,
    private val serializerPart2: Property<T, R2>,
    private val serializerPart3: Property<T, R3>,
    private val serializerPart4: Property<T, R4>,
    private val serializerPart5: Property<T, R5>,
    private val serializerPart6: Property<T, R6>,
    private val serializerPart7: Property<T, R7>,
    private val serializerPart8: Property<T, R8>,
    private val serializerPart9: Property<T, R9>,
    private val serializerPart10: Property<T, R10>,
    private val serializerPart11: Property<T, R11>,
    private val serializerPart12: Property<T, R12>,
    private val serializerPart13: Property<T, R13>,
    private val serializerPart14: Property<T, R14>,
    private val serializerPart15: Property<T, R15>,
    private val serializerPart16: Property<T, R16>,
    private val serializerPart17: Property<T, R17>,
    private val serializerPart18: Property<T, R18>,
    private val serializerPart19: Property<T, R19>,
    private val serializerPart20: Property<T, R20>,
    private val serializerPart21: Property<T, R21>,
    private val serializerPart22: Property<T, R22>,
    private val serializerPart23: Property<T, R23>,
    private val serializerPart24: Property<T, R24>,
    private val serializerPart25: Property<T, R25>,
    private val serializerPart26: Property<T, R26>,
    private val serializerPart27: Property<T, R27>,
    private val serializerPart28: Property<T, R28>,
    private val serializerPart29: Property<T, R29>,
    private val build: (R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29) -> T,
) : KSerializer<T> {
    final override val descriptor: SerialDescriptor = buildClassSerialDescriptor(descriptorName) {
        element(serializerPart1.name, serializerPart1.serializer.descriptor)
        element(serializerPart2.name, serializerPart2.serializer.descriptor)
        element(serializerPart3.name, serializerPart3.serializer.descriptor)
        element(serializerPart4.name, serializerPart4.serializer.descriptor)
        element(serializerPart5.name, serializerPart5.serializer.descriptor)
        element(serializerPart6.name, serializerPart6.serializer.descriptor)
        element(serializerPart7.name, serializerPart7.serializer.descriptor)
        element(serializerPart8.name, serializerPart8.serializer.descriptor)
        element(serializerPart9.name, serializerPart9.serializer.descriptor)
        element(serializerPart10.name, serializerPart10.serializer.descriptor)
        element(serializerPart11.name, serializerPart11.serializer.descriptor)
        element(serializerPart12.name, serializerPart12.serializer.descriptor)
        element(serializerPart13.name, serializerPart13.serializer.descriptor)
        element(serializerPart14.name, serializerPart14.serializer.descriptor)
        element(serializerPart15.name, serializerPart15.serializer.descriptor)
        element(serializerPart16.name, serializerPart16.serializer.descriptor)
        element(serializerPart17.name, serializerPart17.serializer.descriptor)
        element(serializerPart18.name, serializerPart18.serializer.descriptor)
        element(serializerPart19.name, serializerPart19.serializer.descriptor)
        element(serializerPart20.name, serializerPart20.serializer.descriptor)
        element(serializerPart21.name, serializerPart21.serializer.descriptor)
        element(serializerPart22.name, serializerPart22.serializer.descriptor)
        element(serializerPart23.name, serializerPart23.serializer.descriptor)
        element(serializerPart24.name, serializerPart24.serializer.descriptor)
        element(serializerPart25.name, serializerPart25.serializer.descriptor)
        element(serializerPart26.name, serializerPart26.serializer.descriptor)
        element(serializerPart27.name, serializerPart27.serializer.descriptor)
        element(serializerPart28.name, serializerPart28.serializer.descriptor)
        element(serializerPart29.name, serializerPart29.serializer.descriptor)
    }

    final override fun serialize(encoder: Encoder, value: T) = encoder.encodeStructure(descriptor) {
        encodeSerializableElement(descriptor, 0, serializerPart1.serializer, serializerPart1.generator(value))
        encodeSerializableElement(descriptor, 1, serializerPart2.serializer, serializerPart2.generator(value))
        encodeSerializableElement(descriptor, 2, serializerPart3.serializer, serializerPart3.generator(value))
        encodeSerializableElement(descriptor, 3, serializerPart4.serializer, serializerPart4.generator(value))
        encodeSerializableElement(descriptor, 4, serializerPart5.serializer, serializerPart5.generator(value))
        encodeSerializableElement(descriptor, 5, serializerPart6.serializer, serializerPart6.generator(value))
        encodeSerializableElement(descriptor, 6, serializerPart7.serializer, serializerPart7.generator(value))
        encodeSerializableElement(descriptor, 7, serializerPart8.serializer, serializerPart8.generator(value))
        encodeSerializableElement(descriptor, 8, serializerPart9.serializer, serializerPart9.generator(value))
        encodeSerializableElement(descriptor, 9, serializerPart10.serializer, serializerPart10.generator(value))
        encodeSerializableElement(descriptor, 10, serializerPart11.serializer, serializerPart11.generator(value))
        encodeSerializableElement(descriptor, 11, serializerPart12.serializer, serializerPart12.generator(value))
        encodeSerializableElement(descriptor, 12, serializerPart13.serializer, serializerPart13.generator(value))
        encodeSerializableElement(descriptor, 13, serializerPart14.serializer, serializerPart14.generator(value))
        encodeSerializableElement(descriptor, 14, serializerPart15.serializer, serializerPart15.generator(value))
        encodeSerializableElement(descriptor, 15, serializerPart16.serializer, serializerPart16.generator(value))
        encodeSerializableElement(descriptor, 16, serializerPart17.serializer, serializerPart17.generator(value))
        encodeSerializableElement(descriptor, 17, serializerPart18.serializer, serializerPart18.generator(value))
        encodeSerializableElement(descriptor, 18, serializerPart19.serializer, serializerPart19.generator(value))
        encodeSerializableElement(descriptor, 19, serializerPart20.serializer, serializerPart20.generator(value))
        encodeSerializableElement(descriptor, 20, serializerPart21.serializer, serializerPart21.generator(value))
        encodeSerializableElement(descriptor, 21, serializerPart22.serializer, serializerPart22.generator(value))
        encodeSerializableElement(descriptor, 22, serializerPart23.serializer, serializerPart23.generator(value))
        encodeSerializableElement(descriptor, 23, serializerPart24.serializer, serializerPart24.generator(value))
        encodeSerializableElement(descriptor, 24, serializerPart25.serializer, serializerPart25.generator(value))
        encodeSerializableElement(descriptor, 25, serializerPart26.serializer, serializerPart26.generator(value))
        encodeSerializableElement(descriptor, 26, serializerPart27.serializer, serializerPart27.generator(value))
        encodeSerializableElement(descriptor, 27, serializerPart28.serializer, serializerPart28.generator(value))
        encodeSerializableElement(descriptor, 28, serializerPart29.serializer, serializerPart29.generator(value))
    }

    @OptIn(ExperimentalSerializationApi::class)
    final override fun deserialize(decoder: Decoder): T = decoder.decodeStructure(descriptor) {
        if (decodeSequentially()) {
            build(
                decodeSerializableElement(descriptor, 0, serializerPart1.serializer),
                decodeSerializableElement(descriptor, 1, serializerPart2.serializer),
                decodeSerializableElement(descriptor, 2, serializerPart3.serializer),
                decodeSerializableElement(descriptor, 3, serializerPart4.serializer),
                decodeSerializableElement(descriptor, 4, serializerPart5.serializer),
                decodeSerializableElement(descriptor, 5, serializerPart6.serializer),
                decodeSerializableElement(descriptor, 6, serializerPart7.serializer),
                decodeSerializableElement(descriptor, 7, serializerPart8.serializer),
                decodeSerializableElement(descriptor, 8, serializerPart9.serializer),
                decodeSerializableElement(descriptor, 9, serializerPart10.serializer),
                decodeSerializableElement(descriptor, 10, serializerPart11.serializer),
                decodeSerializableElement(descriptor, 11, serializerPart12.serializer),
                decodeSerializableElement(descriptor, 12, serializerPart13.serializer),
                decodeSerializableElement(descriptor, 13, serializerPart14.serializer),
                decodeSerializableElement(descriptor, 14, serializerPart15.serializer),
                decodeSerializableElement(descriptor, 15, serializerPart16.serializer),
                decodeSerializableElement(descriptor, 16, serializerPart17.serializer),
                decodeSerializableElement(descriptor, 17, serializerPart18.serializer),
                decodeSerializableElement(descriptor, 18, serializerPart19.serializer),
                decodeSerializableElement(descriptor, 19, serializerPart20.serializer),
                decodeSerializableElement(descriptor, 20, serializerPart21.serializer),
                decodeSerializableElement(descriptor, 21, serializerPart22.serializer),
                decodeSerializableElement(descriptor, 22, serializerPart23.serializer),
                decodeSerializableElement(descriptor, 23, serializerPart24.serializer),
                decodeSerializableElement(descriptor, 24, serializerPart25.serializer),
                decodeSerializableElement(descriptor, 25, serializerPart26.serializer),
                decodeSerializableElement(descriptor, 26, serializerPart27.serializer),
                decodeSerializableElement(descriptor, 27, serializerPart28.serializer),
                decodeSerializableElement(descriptor, 28, serializerPart29.serializer),
            )
        } else {
            var value1: R1? = null
            var value2: R2? = null
            var value3: R3? = null
            var value4: R4? = null
            var value5: R5? = null
            var value6: R6? = null
            var value7: R7? = null
            var value8: R8? = null
            var value9: R9? = null
            var value10: R10? = null
            var value11: R11? = null
            var value12: R12? = null
            var value13: R13? = null
            var value14: R14? = null
            var value15: R15? = null
            var value16: R16? = null
            var value17: R17? = null
            var value18: R18? = null
            var value19: R19? = null
            var value20: R20? = null
            var value21: R21? = null
            var value22: R22? = null
            var value23: R23? = null
            var value24: R24? = null
            var value25: R25? = null
            var value26: R26? = null
            var value27: R27? = null
            var value28: R28? = null
            var value29: R29? = null
            while (true) {
                when (val index = decodeElementIndex(descriptor)) {
                    0 -> value1 = decodeSerializableElement(descriptor, 0, serializerPart1.serializer)
                    1 -> value2 = decodeSerializableElement(descriptor, 1, serializerPart2.serializer)
                    2 -> value3 = decodeSerializableElement(descriptor, 2, serializerPart3.serializer)
                    3 -> value4 = decodeSerializableElement(descriptor, 3, serializerPart4.serializer)
                    4 -> value5 = decodeSerializableElement(descriptor, 4, serializerPart5.serializer)
                    5 -> value6 = decodeSerializableElement(descriptor, 5, serializerPart6.serializer)
                    6 -> value7 = decodeSerializableElement(descriptor, 6, serializerPart7.serializer)
                    7 -> value8 = decodeSerializableElement(descriptor, 7, serializerPart8.serializer)
                    8 -> value9 = decodeSerializableElement(descriptor, 8, serializerPart9.serializer)
                    9 -> value10 = decodeSerializableElement(descriptor, 9, serializerPart10.serializer)
                    10 -> value11 = decodeSerializableElement(descriptor, 10, serializerPart11.serializer)
                    11 -> value12 = decodeSerializableElement(descriptor, 11, serializerPart12.serializer)
                    12 -> value13 = decodeSerializableElement(descriptor, 12, serializerPart13.serializer)
                    13 -> value14 = decodeSerializableElement(descriptor, 13, serializerPart14.serializer)
                    14 -> value15 = decodeSerializableElement(descriptor, 14, serializerPart15.serializer)
                    15 -> value16 = decodeSerializableElement(descriptor, 15, serializerPart16.serializer)
                    16 -> value17 = decodeSerializableElement(descriptor, 16, serializerPart17.serializer)
                    17 -> value18 = decodeSerializableElement(descriptor, 17, serializerPart18.serializer)
                    18 -> value19 = decodeSerializableElement(descriptor, 18, serializerPart19.serializer)
                    19 -> value20 = decodeSerializableElement(descriptor, 19, serializerPart20.serializer)
                    20 -> value21 = decodeSerializableElement(descriptor, 20, serializerPart21.serializer)
                    21 -> value22 = decodeSerializableElement(descriptor, 21, serializerPart22.serializer)
                    22 -> value23 = decodeSerializableElement(descriptor, 22, serializerPart23.serializer)
                    23 -> value24 = decodeSerializableElement(descriptor, 23, serializerPart24.serializer)
                    24 -> value25 = decodeSerializableElement(descriptor, 24, serializerPart25.serializer)
                    25 -> value26 = decodeSerializableElement(descriptor, 25, serializerPart26.serializer)
                    26 -> value27 = decodeSerializableElement(descriptor, 26, serializerPart27.serializer)
                    27 -> value28 = decodeSerializableElement(descriptor, 27, serializerPart28.serializer)
                    28 -> value29 = decodeSerializableElement(descriptor, 28, serializerPart29.serializer)
                    CompositeDecoder.DECODE_DONE -> break
                    else -> error("Unexpected index: $index")
                }
            }
            return@decodeStructure build(
                value1 ?: error("Absent field: ${serializerPart1.name}"),
                value2 ?: error("Absent field: ${serializerPart2.name}"),
                value3 ?: error("Absent field: ${serializerPart3.name}"),
                value4 ?: error("Absent field: ${serializerPart4.name}"),
                value5 ?: error("Absent field: ${serializerPart5.name}"),
                value6 ?: error("Absent field: ${serializerPart6.name}"),
                value7 ?: error("Absent field: ${serializerPart7.name}"),
                value8 ?: error("Absent field: ${serializerPart8.name}"),
                value9 ?: error("Absent field: ${serializerPart9.name}"),
                value10 ?: error("Absent field: ${serializerPart10.name}"),
                value11 ?: error("Absent field: ${serializerPart11.name}"),
                value12 ?: error("Absent field: ${serializerPart12.name}"),
                value13 ?: error("Absent field: ${serializerPart13.name}"),
                value14 ?: error("Absent field: ${serializerPart14.name}"),
                value15 ?: error("Absent field: ${serializerPart15.name}"),
                value16 ?: error("Absent field: ${serializerPart16.name}"),
                value17 ?: error("Absent field: ${serializerPart17.name}"),
                value18 ?: error("Absent field: ${serializerPart18.name}"),
                value19 ?: error("Absent field: ${serializerPart19.name}"),
                value20 ?: error("Absent field: ${serializerPart20.name}"),
                value21 ?: error("Absent field: ${serializerPart21.name}"),
                value22 ?: error("Absent field: ${serializerPart22.name}"),
                value23 ?: error("Absent field: ${serializerPart23.name}"),
                value24 ?: error("Absent field: ${serializerPart24.name}"),
                value25 ?: error("Absent field: ${serializerPart25.name}"),
                value26 ?: error("Absent field: ${serializerPart26.name}"),
                value27 ?: error("Absent field: ${serializerPart27.name}"),
                value28 ?: error("Absent field: ${serializerPart28.name}"),
                value29 ?: error("Absent field: ${serializerPart29.name}"),
            )
        }
    }
}

fun <T, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29> classSerializer(
    descriptorName: String,
    serializerPart1: Property<T, R1>,
    serializerPart2: Property<T, R2>,
    serializerPart3: Property<T, R3>,
    serializerPart4: Property<T, R4>,
    serializerPart5: Property<T, R5>,
    serializerPart6: Property<T, R6>,
    serializerPart7: Property<T, R7>,
    serializerPart8: Property<T, R8>,
    serializerPart9: Property<T, R9>,
    serializerPart10: Property<T, R10>,
    serializerPart11: Property<T, R11>,
    serializerPart12: Property<T, R12>,
    serializerPart13: Property<T, R13>,
    serializerPart14: Property<T, R14>,
    serializerPart15: Property<T, R15>,
    serializerPart16: Property<T, R16>,
    serializerPart17: Property<T, R17>,
    serializerPart18: Property<T, R18>,
    serializerPart19: Property<T, R19>,
    serializerPart20: Property<T, R20>,
    serializerPart21: Property<T, R21>,
    serializerPart22: Property<T, R22>,
    serializerPart23: Property<T, R23>,
    serializerPart24: Property<T, R24>,
    serializerPart25: Property<T, R25>,
    serializerPart26: Property<T, R26>,
    serializerPart27: Property<T, R27>,
    serializerPart28: Property<T, R28>,
    serializerPart29: Property<T, R29>,
    build: (R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29) -> T,
) : KSerializer<T> = ClassKSerializer29(
    descriptorName,
    serializerPart1,
    serializerPart2,
    serializerPart3,
    serializerPart4,
    serializerPart5,
    serializerPart6,
    serializerPart7,
    serializerPart8,
    serializerPart9,
    serializerPart10,
    serializerPart11,
    serializerPart12,
    serializerPart13,
    serializerPart14,
    serializerPart15,
    serializerPart16,
    serializerPart17,
    serializerPart18,
    serializerPart19,
    serializerPart20,
    serializerPart21,
    serializerPart22,
    serializerPart23,
    serializerPart24,
    serializerPart25,
    serializerPart26,
    serializerPart27,
    serializerPart28,
    serializerPart29,
    build,
)

open class ClassKSerializer30<T, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R30>(
    private val descriptorName: String,
    private val serializerPart1: Property<T, R1>,
    private val serializerPart2: Property<T, R2>,
    private val serializerPart3: Property<T, R3>,
    private val serializerPart4: Property<T, R4>,
    private val serializerPart5: Property<T, R5>,
    private val serializerPart6: Property<T, R6>,
    private val serializerPart7: Property<T, R7>,
    private val serializerPart8: Property<T, R8>,
    private val serializerPart9: Property<T, R9>,
    private val serializerPart10: Property<T, R10>,
    private val serializerPart11: Property<T, R11>,
    private val serializerPart12: Property<T, R12>,
    private val serializerPart13: Property<T, R13>,
    private val serializerPart14: Property<T, R14>,
    private val serializerPart15: Property<T, R15>,
    private val serializerPart16: Property<T, R16>,
    private val serializerPart17: Property<T, R17>,
    private val serializerPart18: Property<T, R18>,
    private val serializerPart19: Property<T, R19>,
    private val serializerPart20: Property<T, R20>,
    private val serializerPart21: Property<T, R21>,
    private val serializerPart22: Property<T, R22>,
    private val serializerPart23: Property<T, R23>,
    private val serializerPart24: Property<T, R24>,
    private val serializerPart25: Property<T, R25>,
    private val serializerPart26: Property<T, R26>,
    private val serializerPart27: Property<T, R27>,
    private val serializerPart28: Property<T, R28>,
    private val serializerPart29: Property<T, R29>,
    private val serializerPart30: Property<T, R30>,
    private val build: (R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R30) -> T,
) : KSerializer<T> {
    final override val descriptor: SerialDescriptor = buildClassSerialDescriptor(descriptorName) {
        element(serializerPart1.name, serializerPart1.serializer.descriptor)
        element(serializerPart2.name, serializerPart2.serializer.descriptor)
        element(serializerPart3.name, serializerPart3.serializer.descriptor)
        element(serializerPart4.name, serializerPart4.serializer.descriptor)
        element(serializerPart5.name, serializerPart5.serializer.descriptor)
        element(serializerPart6.name, serializerPart6.serializer.descriptor)
        element(serializerPart7.name, serializerPart7.serializer.descriptor)
        element(serializerPart8.name, serializerPart8.serializer.descriptor)
        element(serializerPart9.name, serializerPart9.serializer.descriptor)
        element(serializerPart10.name, serializerPart10.serializer.descriptor)
        element(serializerPart11.name, serializerPart11.serializer.descriptor)
        element(serializerPart12.name, serializerPart12.serializer.descriptor)
        element(serializerPart13.name, serializerPart13.serializer.descriptor)
        element(serializerPart14.name, serializerPart14.serializer.descriptor)
        element(serializerPart15.name, serializerPart15.serializer.descriptor)
        element(serializerPart16.name, serializerPart16.serializer.descriptor)
        element(serializerPart17.name, serializerPart17.serializer.descriptor)
        element(serializerPart18.name, serializerPart18.serializer.descriptor)
        element(serializerPart19.name, serializerPart19.serializer.descriptor)
        element(serializerPart20.name, serializerPart20.serializer.descriptor)
        element(serializerPart21.name, serializerPart21.serializer.descriptor)
        element(serializerPart22.name, serializerPart22.serializer.descriptor)
        element(serializerPart23.name, serializerPart23.serializer.descriptor)
        element(serializerPart24.name, serializerPart24.serializer.descriptor)
        element(serializerPart25.name, serializerPart25.serializer.descriptor)
        element(serializerPart26.name, serializerPart26.serializer.descriptor)
        element(serializerPart27.name, serializerPart27.serializer.descriptor)
        element(serializerPart28.name, serializerPart28.serializer.descriptor)
        element(serializerPart29.name, serializerPart29.serializer.descriptor)
        element(serializerPart30.name, serializerPart30.serializer.descriptor)
    }

    final override fun serialize(encoder: Encoder, value: T) = encoder.encodeStructure(descriptor) {
        encodeSerializableElement(descriptor, 0, serializerPart1.serializer, serializerPart1.generator(value))
        encodeSerializableElement(descriptor, 1, serializerPart2.serializer, serializerPart2.generator(value))
        encodeSerializableElement(descriptor, 2, serializerPart3.serializer, serializerPart3.generator(value))
        encodeSerializableElement(descriptor, 3, serializerPart4.serializer, serializerPart4.generator(value))
        encodeSerializableElement(descriptor, 4, serializerPart5.serializer, serializerPart5.generator(value))
        encodeSerializableElement(descriptor, 5, serializerPart6.serializer, serializerPart6.generator(value))
        encodeSerializableElement(descriptor, 6, serializerPart7.serializer, serializerPart7.generator(value))
        encodeSerializableElement(descriptor, 7, serializerPart8.serializer, serializerPart8.generator(value))
        encodeSerializableElement(descriptor, 8, serializerPart9.serializer, serializerPart9.generator(value))
        encodeSerializableElement(descriptor, 9, serializerPart10.serializer, serializerPart10.generator(value))
        encodeSerializableElement(descriptor, 10, serializerPart11.serializer, serializerPart11.generator(value))
        encodeSerializableElement(descriptor, 11, serializerPart12.serializer, serializerPart12.generator(value))
        encodeSerializableElement(descriptor, 12, serializerPart13.serializer, serializerPart13.generator(value))
        encodeSerializableElement(descriptor, 13, serializerPart14.serializer, serializerPart14.generator(value))
        encodeSerializableElement(descriptor, 14, serializerPart15.serializer, serializerPart15.generator(value))
        encodeSerializableElement(descriptor, 15, serializerPart16.serializer, serializerPart16.generator(value))
        encodeSerializableElement(descriptor, 16, serializerPart17.serializer, serializerPart17.generator(value))
        encodeSerializableElement(descriptor, 17, serializerPart18.serializer, serializerPart18.generator(value))
        encodeSerializableElement(descriptor, 18, serializerPart19.serializer, serializerPart19.generator(value))
        encodeSerializableElement(descriptor, 19, serializerPart20.serializer, serializerPart20.generator(value))
        encodeSerializableElement(descriptor, 20, serializerPart21.serializer, serializerPart21.generator(value))
        encodeSerializableElement(descriptor, 21, serializerPart22.serializer, serializerPart22.generator(value))
        encodeSerializableElement(descriptor, 22, serializerPart23.serializer, serializerPart23.generator(value))
        encodeSerializableElement(descriptor, 23, serializerPart24.serializer, serializerPart24.generator(value))
        encodeSerializableElement(descriptor, 24, serializerPart25.serializer, serializerPart25.generator(value))
        encodeSerializableElement(descriptor, 25, serializerPart26.serializer, serializerPart26.generator(value))
        encodeSerializableElement(descriptor, 26, serializerPart27.serializer, serializerPart27.generator(value))
        encodeSerializableElement(descriptor, 27, serializerPart28.serializer, serializerPart28.generator(value))
        encodeSerializableElement(descriptor, 28, serializerPart29.serializer, serializerPart29.generator(value))
        encodeSerializableElement(descriptor, 29, serializerPart30.serializer, serializerPart30.generator(value))
    }

    @OptIn(ExperimentalSerializationApi::class)
    final override fun deserialize(decoder: Decoder): T = decoder.decodeStructure(descriptor) {
        if (decodeSequentially()) {
            build(
                decodeSerializableElement(descriptor, 0, serializerPart1.serializer),
                decodeSerializableElement(descriptor, 1, serializerPart2.serializer),
                decodeSerializableElement(descriptor, 2, serializerPart3.serializer),
                decodeSerializableElement(descriptor, 3, serializerPart4.serializer),
                decodeSerializableElement(descriptor, 4, serializerPart5.serializer),
                decodeSerializableElement(descriptor, 5, serializerPart6.serializer),
                decodeSerializableElement(descriptor, 6, serializerPart7.serializer),
                decodeSerializableElement(descriptor, 7, serializerPart8.serializer),
                decodeSerializableElement(descriptor, 8, serializerPart9.serializer),
                decodeSerializableElement(descriptor, 9, serializerPart10.serializer),
                decodeSerializableElement(descriptor, 10, serializerPart11.serializer),
                decodeSerializableElement(descriptor, 11, serializerPart12.serializer),
                decodeSerializableElement(descriptor, 12, serializerPart13.serializer),
                decodeSerializableElement(descriptor, 13, serializerPart14.serializer),
                decodeSerializableElement(descriptor, 14, serializerPart15.serializer),
                decodeSerializableElement(descriptor, 15, serializerPart16.serializer),
                decodeSerializableElement(descriptor, 16, serializerPart17.serializer),
                decodeSerializableElement(descriptor, 17, serializerPart18.serializer),
                decodeSerializableElement(descriptor, 18, serializerPart19.serializer),
                decodeSerializableElement(descriptor, 19, serializerPart20.serializer),
                decodeSerializableElement(descriptor, 20, serializerPart21.serializer),
                decodeSerializableElement(descriptor, 21, serializerPart22.serializer),
                decodeSerializableElement(descriptor, 22, serializerPart23.serializer),
                decodeSerializableElement(descriptor, 23, serializerPart24.serializer),
                decodeSerializableElement(descriptor, 24, serializerPart25.serializer),
                decodeSerializableElement(descriptor, 25, serializerPart26.serializer),
                decodeSerializableElement(descriptor, 26, serializerPart27.serializer),
                decodeSerializableElement(descriptor, 27, serializerPart28.serializer),
                decodeSerializableElement(descriptor, 28, serializerPart29.serializer),
                decodeSerializableElement(descriptor, 29, serializerPart30.serializer),
            )
        } else {
            var value1: R1? = null
            var value2: R2? = null
            var value3: R3? = null
            var value4: R4? = null
            var value5: R5? = null
            var value6: R6? = null
            var value7: R7? = null
            var value8: R8? = null
            var value9: R9? = null
            var value10: R10? = null
            var value11: R11? = null
            var value12: R12? = null
            var value13: R13? = null
            var value14: R14? = null
            var value15: R15? = null
            var value16: R16? = null
            var value17: R17? = null
            var value18: R18? = null
            var value19: R19? = null
            var value20: R20? = null
            var value21: R21? = null
            var value22: R22? = null
            var value23: R23? = null
            var value24: R24? = null
            var value25: R25? = null
            var value26: R26? = null
            var value27: R27? = null
            var value28: R28? = null
            var value29: R29? = null
            var value30: R30? = null
            while (true) {
                when (val index = decodeElementIndex(descriptor)) {
                    0 -> value1 = decodeSerializableElement(descriptor, 0, serializerPart1.serializer)
                    1 -> value2 = decodeSerializableElement(descriptor, 1, serializerPart2.serializer)
                    2 -> value3 = decodeSerializableElement(descriptor, 2, serializerPart3.serializer)
                    3 -> value4 = decodeSerializableElement(descriptor, 3, serializerPart4.serializer)
                    4 -> value5 = decodeSerializableElement(descriptor, 4, serializerPart5.serializer)
                    5 -> value6 = decodeSerializableElement(descriptor, 5, serializerPart6.serializer)
                    6 -> value7 = decodeSerializableElement(descriptor, 6, serializerPart7.serializer)
                    7 -> value8 = decodeSerializableElement(descriptor, 7, serializerPart8.serializer)
                    8 -> value9 = decodeSerializableElement(descriptor, 8, serializerPart9.serializer)
                    9 -> value10 = decodeSerializableElement(descriptor, 9, serializerPart10.serializer)
                    10 -> value11 = decodeSerializableElement(descriptor, 10, serializerPart11.serializer)
                    11 -> value12 = decodeSerializableElement(descriptor, 11, serializerPart12.serializer)
                    12 -> value13 = decodeSerializableElement(descriptor, 12, serializerPart13.serializer)
                    13 -> value14 = decodeSerializableElement(descriptor, 13, serializerPart14.serializer)
                    14 -> value15 = decodeSerializableElement(descriptor, 14, serializerPart15.serializer)
                    15 -> value16 = decodeSerializableElement(descriptor, 15, serializerPart16.serializer)
                    16 -> value17 = decodeSerializableElement(descriptor, 16, serializerPart17.serializer)
                    17 -> value18 = decodeSerializableElement(descriptor, 17, serializerPart18.serializer)
                    18 -> value19 = decodeSerializableElement(descriptor, 18, serializerPart19.serializer)
                    19 -> value20 = decodeSerializableElement(descriptor, 19, serializerPart20.serializer)
                    20 -> value21 = decodeSerializableElement(descriptor, 20, serializerPart21.serializer)
                    21 -> value22 = decodeSerializableElement(descriptor, 21, serializerPart22.serializer)
                    22 -> value23 = decodeSerializableElement(descriptor, 22, serializerPart23.serializer)
                    23 -> value24 = decodeSerializableElement(descriptor, 23, serializerPart24.serializer)
                    24 -> value25 = decodeSerializableElement(descriptor, 24, serializerPart25.serializer)
                    25 -> value26 = decodeSerializableElement(descriptor, 25, serializerPart26.serializer)
                    26 -> value27 = decodeSerializableElement(descriptor, 26, serializerPart27.serializer)
                    27 -> value28 = decodeSerializableElement(descriptor, 27, serializerPart28.serializer)
                    28 -> value29 = decodeSerializableElement(descriptor, 28, serializerPart29.serializer)
                    29 -> value30 = decodeSerializableElement(descriptor, 29, serializerPart30.serializer)
                    CompositeDecoder.DECODE_DONE -> break
                    else -> error("Unexpected index: $index")
                }
            }
            return@decodeStructure build(
                value1 ?: error("Absent field: ${serializerPart1.name}"),
                value2 ?: error("Absent field: ${serializerPart2.name}"),
                value3 ?: error("Absent field: ${serializerPart3.name}"),
                value4 ?: error("Absent field: ${serializerPart4.name}"),
                value5 ?: error("Absent field: ${serializerPart5.name}"),
                value6 ?: error("Absent field: ${serializerPart6.name}"),
                value7 ?: error("Absent field: ${serializerPart7.name}"),
                value8 ?: error("Absent field: ${serializerPart8.name}"),
                value9 ?: error("Absent field: ${serializerPart9.name}"),
                value10 ?: error("Absent field: ${serializerPart10.name}"),
                value11 ?: error("Absent field: ${serializerPart11.name}"),
                value12 ?: error("Absent field: ${serializerPart12.name}"),
                value13 ?: error("Absent field: ${serializerPart13.name}"),
                value14 ?: error("Absent field: ${serializerPart14.name}"),
                value15 ?: error("Absent field: ${serializerPart15.name}"),
                value16 ?: error("Absent field: ${serializerPart16.name}"),
                value17 ?: error("Absent field: ${serializerPart17.name}"),
                value18 ?: error("Absent field: ${serializerPart18.name}"),
                value19 ?: error("Absent field: ${serializerPart19.name}"),
                value20 ?: error("Absent field: ${serializerPart20.name}"),
                value21 ?: error("Absent field: ${serializerPart21.name}"),
                value22 ?: error("Absent field: ${serializerPart22.name}"),
                value23 ?: error("Absent field: ${serializerPart23.name}"),
                value24 ?: error("Absent field: ${serializerPart24.name}"),
                value25 ?: error("Absent field: ${serializerPart25.name}"),
                value26 ?: error("Absent field: ${serializerPart26.name}"),
                value27 ?: error("Absent field: ${serializerPart27.name}"),
                value28 ?: error("Absent field: ${serializerPart28.name}"),
                value29 ?: error("Absent field: ${serializerPart29.name}"),
                value30 ?: error("Absent field: ${serializerPart30.name}"),
            )
        }
    }
}

fun <T, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R30> classSerializer(
    descriptorName: String,
    serializerPart1: Property<T, R1>,
    serializerPart2: Property<T, R2>,
    serializerPart3: Property<T, R3>,
    serializerPart4: Property<T, R4>,
    serializerPart5: Property<T, R5>,
    serializerPart6: Property<T, R6>,
    serializerPart7: Property<T, R7>,
    serializerPart8: Property<T, R8>,
    serializerPart9: Property<T, R9>,
    serializerPart10: Property<T, R10>,
    serializerPart11: Property<T, R11>,
    serializerPart12: Property<T, R12>,
    serializerPart13: Property<T, R13>,
    serializerPart14: Property<T, R14>,
    serializerPart15: Property<T, R15>,
    serializerPart16: Property<T, R16>,
    serializerPart17: Property<T, R17>,
    serializerPart18: Property<T, R18>,
    serializerPart19: Property<T, R19>,
    serializerPart20: Property<T, R20>,
    serializerPart21: Property<T, R21>,
    serializerPart22: Property<T, R22>,
    serializerPart23: Property<T, R23>,
    serializerPart24: Property<T, R24>,
    serializerPart25: Property<T, R25>,
    serializerPart26: Property<T, R26>,
    serializerPart27: Property<T, R27>,
    serializerPart28: Property<T, R28>,
    serializerPart29: Property<T, R29>,
    serializerPart30: Property<T, R30>,
    build: (R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R30) -> T,
) : KSerializer<T> = ClassKSerializer30(
    descriptorName,
    serializerPart1,
    serializerPart2,
    serializerPart3,
    serializerPart4,
    serializerPart5,
    serializerPart6,
    serializerPart7,
    serializerPart8,
    serializerPart9,
    serializerPart10,
    serializerPart11,
    serializerPart12,
    serializerPart13,
    serializerPart14,
    serializerPart15,
    serializerPart16,
    serializerPart17,
    serializerPart18,
    serializerPart19,
    serializerPart20,
    serializerPart21,
    serializerPart22,
    serializerPart23,
    serializerPart24,
    serializerPart25,
    serializerPart26,
    serializerPart27,
    serializerPart28,
    serializerPart29,
    serializerPart30,
    build,
)

open class ClassKSerializer31<T, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R30, R31>(
    private val descriptorName: String,
    private val serializerPart1: Property<T, R1>,
    private val serializerPart2: Property<T, R2>,
    private val serializerPart3: Property<T, R3>,
    private val serializerPart4: Property<T, R4>,
    private val serializerPart5: Property<T, R5>,
    private val serializerPart6: Property<T, R6>,
    private val serializerPart7: Property<T, R7>,
    private val serializerPart8: Property<T, R8>,
    private val serializerPart9: Property<T, R9>,
    private val serializerPart10: Property<T, R10>,
    private val serializerPart11: Property<T, R11>,
    private val serializerPart12: Property<T, R12>,
    private val serializerPart13: Property<T, R13>,
    private val serializerPart14: Property<T, R14>,
    private val serializerPart15: Property<T, R15>,
    private val serializerPart16: Property<T, R16>,
    private val serializerPart17: Property<T, R17>,
    private val serializerPart18: Property<T, R18>,
    private val serializerPart19: Property<T, R19>,
    private val serializerPart20: Property<T, R20>,
    private val serializerPart21: Property<T, R21>,
    private val serializerPart22: Property<T, R22>,
    private val serializerPart23: Property<T, R23>,
    private val serializerPart24: Property<T, R24>,
    private val serializerPart25: Property<T, R25>,
    private val serializerPart26: Property<T, R26>,
    private val serializerPart27: Property<T, R27>,
    private val serializerPart28: Property<T, R28>,
    private val serializerPart29: Property<T, R29>,
    private val serializerPart30: Property<T, R30>,
    private val serializerPart31: Property<T, R31>,
    private val build: (R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R30, R31) -> T,
) : KSerializer<T> {
    final override val descriptor: SerialDescriptor = buildClassSerialDescriptor(descriptorName) {
        element(serializerPart1.name, serializerPart1.serializer.descriptor)
        element(serializerPart2.name, serializerPart2.serializer.descriptor)
        element(serializerPart3.name, serializerPart3.serializer.descriptor)
        element(serializerPart4.name, serializerPart4.serializer.descriptor)
        element(serializerPart5.name, serializerPart5.serializer.descriptor)
        element(serializerPart6.name, serializerPart6.serializer.descriptor)
        element(serializerPart7.name, serializerPart7.serializer.descriptor)
        element(serializerPart8.name, serializerPart8.serializer.descriptor)
        element(serializerPart9.name, serializerPart9.serializer.descriptor)
        element(serializerPart10.name, serializerPart10.serializer.descriptor)
        element(serializerPart11.name, serializerPart11.serializer.descriptor)
        element(serializerPart12.name, serializerPart12.serializer.descriptor)
        element(serializerPart13.name, serializerPart13.serializer.descriptor)
        element(serializerPart14.name, serializerPart14.serializer.descriptor)
        element(serializerPart15.name, serializerPart15.serializer.descriptor)
        element(serializerPart16.name, serializerPart16.serializer.descriptor)
        element(serializerPart17.name, serializerPart17.serializer.descriptor)
        element(serializerPart18.name, serializerPart18.serializer.descriptor)
        element(serializerPart19.name, serializerPart19.serializer.descriptor)
        element(serializerPart20.name, serializerPart20.serializer.descriptor)
        element(serializerPart21.name, serializerPart21.serializer.descriptor)
        element(serializerPart22.name, serializerPart22.serializer.descriptor)
        element(serializerPart23.name, serializerPart23.serializer.descriptor)
        element(serializerPart24.name, serializerPart24.serializer.descriptor)
        element(serializerPart25.name, serializerPart25.serializer.descriptor)
        element(serializerPart26.name, serializerPart26.serializer.descriptor)
        element(serializerPart27.name, serializerPart27.serializer.descriptor)
        element(serializerPart28.name, serializerPart28.serializer.descriptor)
        element(serializerPart29.name, serializerPart29.serializer.descriptor)
        element(serializerPart30.name, serializerPart30.serializer.descriptor)
        element(serializerPart31.name, serializerPart31.serializer.descriptor)
    }

    final override fun serialize(encoder: Encoder, value: T) = encoder.encodeStructure(descriptor) {
        encodeSerializableElement(descriptor, 0, serializerPart1.serializer, serializerPart1.generator(value))
        encodeSerializableElement(descriptor, 1, serializerPart2.serializer, serializerPart2.generator(value))
        encodeSerializableElement(descriptor, 2, serializerPart3.serializer, serializerPart3.generator(value))
        encodeSerializableElement(descriptor, 3, serializerPart4.serializer, serializerPart4.generator(value))
        encodeSerializableElement(descriptor, 4, serializerPart5.serializer, serializerPart5.generator(value))
        encodeSerializableElement(descriptor, 5, serializerPart6.serializer, serializerPart6.generator(value))
        encodeSerializableElement(descriptor, 6, serializerPart7.serializer, serializerPart7.generator(value))
        encodeSerializableElement(descriptor, 7, serializerPart8.serializer, serializerPart8.generator(value))
        encodeSerializableElement(descriptor, 8, serializerPart9.serializer, serializerPart9.generator(value))
        encodeSerializableElement(descriptor, 9, serializerPart10.serializer, serializerPart10.generator(value))
        encodeSerializableElement(descriptor, 10, serializerPart11.serializer, serializerPart11.generator(value))
        encodeSerializableElement(descriptor, 11, serializerPart12.serializer, serializerPart12.generator(value))
        encodeSerializableElement(descriptor, 12, serializerPart13.serializer, serializerPart13.generator(value))
        encodeSerializableElement(descriptor, 13, serializerPart14.serializer, serializerPart14.generator(value))
        encodeSerializableElement(descriptor, 14, serializerPart15.serializer, serializerPart15.generator(value))
        encodeSerializableElement(descriptor, 15, serializerPart16.serializer, serializerPart16.generator(value))
        encodeSerializableElement(descriptor, 16, serializerPart17.serializer, serializerPart17.generator(value))
        encodeSerializableElement(descriptor, 17, serializerPart18.serializer, serializerPart18.generator(value))
        encodeSerializableElement(descriptor, 18, serializerPart19.serializer, serializerPart19.generator(value))
        encodeSerializableElement(descriptor, 19, serializerPart20.serializer, serializerPart20.generator(value))
        encodeSerializableElement(descriptor, 20, serializerPart21.serializer, serializerPart21.generator(value))
        encodeSerializableElement(descriptor, 21, serializerPart22.serializer, serializerPart22.generator(value))
        encodeSerializableElement(descriptor, 22, serializerPart23.serializer, serializerPart23.generator(value))
        encodeSerializableElement(descriptor, 23, serializerPart24.serializer, serializerPart24.generator(value))
        encodeSerializableElement(descriptor, 24, serializerPart25.serializer, serializerPart25.generator(value))
        encodeSerializableElement(descriptor, 25, serializerPart26.serializer, serializerPart26.generator(value))
        encodeSerializableElement(descriptor, 26, serializerPart27.serializer, serializerPart27.generator(value))
        encodeSerializableElement(descriptor, 27, serializerPart28.serializer, serializerPart28.generator(value))
        encodeSerializableElement(descriptor, 28, serializerPart29.serializer, serializerPart29.generator(value))
        encodeSerializableElement(descriptor, 29, serializerPart30.serializer, serializerPart30.generator(value))
        encodeSerializableElement(descriptor, 30, serializerPart31.serializer, serializerPart31.generator(value))
    }

    @OptIn(ExperimentalSerializationApi::class)
    final override fun deserialize(decoder: Decoder): T = decoder.decodeStructure(descriptor) {
        if (decodeSequentially()) {
            build(
                decodeSerializableElement(descriptor, 0, serializerPart1.serializer),
                decodeSerializableElement(descriptor, 1, serializerPart2.serializer),
                decodeSerializableElement(descriptor, 2, serializerPart3.serializer),
                decodeSerializableElement(descriptor, 3, serializerPart4.serializer),
                decodeSerializableElement(descriptor, 4, serializerPart5.serializer),
                decodeSerializableElement(descriptor, 5, serializerPart6.serializer),
                decodeSerializableElement(descriptor, 6, serializerPart7.serializer),
                decodeSerializableElement(descriptor, 7, serializerPart8.serializer),
                decodeSerializableElement(descriptor, 8, serializerPart9.serializer),
                decodeSerializableElement(descriptor, 9, serializerPart10.serializer),
                decodeSerializableElement(descriptor, 10, serializerPart11.serializer),
                decodeSerializableElement(descriptor, 11, serializerPart12.serializer),
                decodeSerializableElement(descriptor, 12, serializerPart13.serializer),
                decodeSerializableElement(descriptor, 13, serializerPart14.serializer),
                decodeSerializableElement(descriptor, 14, serializerPart15.serializer),
                decodeSerializableElement(descriptor, 15, serializerPart16.serializer),
                decodeSerializableElement(descriptor, 16, serializerPart17.serializer),
                decodeSerializableElement(descriptor, 17, serializerPart18.serializer),
                decodeSerializableElement(descriptor, 18, serializerPart19.serializer),
                decodeSerializableElement(descriptor, 19, serializerPart20.serializer),
                decodeSerializableElement(descriptor, 20, serializerPart21.serializer),
                decodeSerializableElement(descriptor, 21, serializerPart22.serializer),
                decodeSerializableElement(descriptor, 22, serializerPart23.serializer),
                decodeSerializableElement(descriptor, 23, serializerPart24.serializer),
                decodeSerializableElement(descriptor, 24, serializerPart25.serializer),
                decodeSerializableElement(descriptor, 25, serializerPart26.serializer),
                decodeSerializableElement(descriptor, 26, serializerPart27.serializer),
                decodeSerializableElement(descriptor, 27, serializerPart28.serializer),
                decodeSerializableElement(descriptor, 28, serializerPart29.serializer),
                decodeSerializableElement(descriptor, 29, serializerPart30.serializer),
                decodeSerializableElement(descriptor, 30, serializerPart31.serializer),
            )
        } else {
            var value1: R1? = null
            var value2: R2? = null
            var value3: R3? = null
            var value4: R4? = null
            var value5: R5? = null
            var value6: R6? = null
            var value7: R7? = null
            var value8: R8? = null
            var value9: R9? = null
            var value10: R10? = null
            var value11: R11? = null
            var value12: R12? = null
            var value13: R13? = null
            var value14: R14? = null
            var value15: R15? = null
            var value16: R16? = null
            var value17: R17? = null
            var value18: R18? = null
            var value19: R19? = null
            var value20: R20? = null
            var value21: R21? = null
            var value22: R22? = null
            var value23: R23? = null
            var value24: R24? = null
            var value25: R25? = null
            var value26: R26? = null
            var value27: R27? = null
            var value28: R28? = null
            var value29: R29? = null
            var value30: R30? = null
            var value31: R31? = null
            while (true) {
                when (val index = decodeElementIndex(descriptor)) {
                    0 -> value1 = decodeSerializableElement(descriptor, 0, serializerPart1.serializer)
                    1 -> value2 = decodeSerializableElement(descriptor, 1, serializerPart2.serializer)
                    2 -> value3 = decodeSerializableElement(descriptor, 2, serializerPart3.serializer)
                    3 -> value4 = decodeSerializableElement(descriptor, 3, serializerPart4.serializer)
                    4 -> value5 = decodeSerializableElement(descriptor, 4, serializerPart5.serializer)
                    5 -> value6 = decodeSerializableElement(descriptor, 5, serializerPart6.serializer)
                    6 -> value7 = decodeSerializableElement(descriptor, 6, serializerPart7.serializer)
                    7 -> value8 = decodeSerializableElement(descriptor, 7, serializerPart8.serializer)
                    8 -> value9 = decodeSerializableElement(descriptor, 8, serializerPart9.serializer)
                    9 -> value10 = decodeSerializableElement(descriptor, 9, serializerPart10.serializer)
                    10 -> value11 = decodeSerializableElement(descriptor, 10, serializerPart11.serializer)
                    11 -> value12 = decodeSerializableElement(descriptor, 11, serializerPart12.serializer)
                    12 -> value13 = decodeSerializableElement(descriptor, 12, serializerPart13.serializer)
                    13 -> value14 = decodeSerializableElement(descriptor, 13, serializerPart14.serializer)
                    14 -> value15 = decodeSerializableElement(descriptor, 14, serializerPart15.serializer)
                    15 -> value16 = decodeSerializableElement(descriptor, 15, serializerPart16.serializer)
                    16 -> value17 = decodeSerializableElement(descriptor, 16, serializerPart17.serializer)
                    17 -> value18 = decodeSerializableElement(descriptor, 17, serializerPart18.serializer)
                    18 -> value19 = decodeSerializableElement(descriptor, 18, serializerPart19.serializer)
                    19 -> value20 = decodeSerializableElement(descriptor, 19, serializerPart20.serializer)
                    20 -> value21 = decodeSerializableElement(descriptor, 20, serializerPart21.serializer)
                    21 -> value22 = decodeSerializableElement(descriptor, 21, serializerPart22.serializer)
                    22 -> value23 = decodeSerializableElement(descriptor, 22, serializerPart23.serializer)
                    23 -> value24 = decodeSerializableElement(descriptor, 23, serializerPart24.serializer)
                    24 -> value25 = decodeSerializableElement(descriptor, 24, serializerPart25.serializer)
                    25 -> value26 = decodeSerializableElement(descriptor, 25, serializerPart26.serializer)
                    26 -> value27 = decodeSerializableElement(descriptor, 26, serializerPart27.serializer)
                    27 -> value28 = decodeSerializableElement(descriptor, 27, serializerPart28.serializer)
                    28 -> value29 = decodeSerializableElement(descriptor, 28, serializerPart29.serializer)
                    29 -> value30 = decodeSerializableElement(descriptor, 29, serializerPart30.serializer)
                    30 -> value31 = decodeSerializableElement(descriptor, 30, serializerPart31.serializer)
                    CompositeDecoder.DECODE_DONE -> break
                    else -> error("Unexpected index: $index")
                }
            }
            return@decodeStructure build(
                value1 ?: error("Absent field: ${serializerPart1.name}"),
                value2 ?: error("Absent field: ${serializerPart2.name}"),
                value3 ?: error("Absent field: ${serializerPart3.name}"),
                value4 ?: error("Absent field: ${serializerPart4.name}"),
                value5 ?: error("Absent field: ${serializerPart5.name}"),
                value6 ?: error("Absent field: ${serializerPart6.name}"),
                value7 ?: error("Absent field: ${serializerPart7.name}"),
                value8 ?: error("Absent field: ${serializerPart8.name}"),
                value9 ?: error("Absent field: ${serializerPart9.name}"),
                value10 ?: error("Absent field: ${serializerPart10.name}"),
                value11 ?: error("Absent field: ${serializerPart11.name}"),
                value12 ?: error("Absent field: ${serializerPart12.name}"),
                value13 ?: error("Absent field: ${serializerPart13.name}"),
                value14 ?: error("Absent field: ${serializerPart14.name}"),
                value15 ?: error("Absent field: ${serializerPart15.name}"),
                value16 ?: error("Absent field: ${serializerPart16.name}"),
                value17 ?: error("Absent field: ${serializerPart17.name}"),
                value18 ?: error("Absent field: ${serializerPart18.name}"),
                value19 ?: error("Absent field: ${serializerPart19.name}"),
                value20 ?: error("Absent field: ${serializerPart20.name}"),
                value21 ?: error("Absent field: ${serializerPart21.name}"),
                value22 ?: error("Absent field: ${serializerPart22.name}"),
                value23 ?: error("Absent field: ${serializerPart23.name}"),
                value24 ?: error("Absent field: ${serializerPart24.name}"),
                value25 ?: error("Absent field: ${serializerPart25.name}"),
                value26 ?: error("Absent field: ${serializerPart26.name}"),
                value27 ?: error("Absent field: ${serializerPart27.name}"),
                value28 ?: error("Absent field: ${serializerPart28.name}"),
                value29 ?: error("Absent field: ${serializerPart29.name}"),
                value30 ?: error("Absent field: ${serializerPart30.name}"),
                value31 ?: error("Absent field: ${serializerPart31.name}"),
            )
        }
    }
}

fun <T, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R30, R31> classSerializer(
    descriptorName: String,
    serializerPart1: Property<T, R1>,
    serializerPart2: Property<T, R2>,
    serializerPart3: Property<T, R3>,
    serializerPart4: Property<T, R4>,
    serializerPart5: Property<T, R5>,
    serializerPart6: Property<T, R6>,
    serializerPart7: Property<T, R7>,
    serializerPart8: Property<T, R8>,
    serializerPart9: Property<T, R9>,
    serializerPart10: Property<T, R10>,
    serializerPart11: Property<T, R11>,
    serializerPart12: Property<T, R12>,
    serializerPart13: Property<T, R13>,
    serializerPart14: Property<T, R14>,
    serializerPart15: Property<T, R15>,
    serializerPart16: Property<T, R16>,
    serializerPart17: Property<T, R17>,
    serializerPart18: Property<T, R18>,
    serializerPart19: Property<T, R19>,
    serializerPart20: Property<T, R20>,
    serializerPart21: Property<T, R21>,
    serializerPart22: Property<T, R22>,
    serializerPart23: Property<T, R23>,
    serializerPart24: Property<T, R24>,
    serializerPart25: Property<T, R25>,
    serializerPart26: Property<T, R26>,
    serializerPart27: Property<T, R27>,
    serializerPart28: Property<T, R28>,
    serializerPart29: Property<T, R29>,
    serializerPart30: Property<T, R30>,
    serializerPart31: Property<T, R31>,
    build: (R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R30, R31) -> T,
) : KSerializer<T> = ClassKSerializer31(
    descriptorName,
    serializerPart1,
    serializerPart2,
    serializerPart3,
    serializerPart4,
    serializerPart5,
    serializerPart6,
    serializerPart7,
    serializerPart8,
    serializerPart9,
    serializerPart10,
    serializerPart11,
    serializerPart12,
    serializerPart13,
    serializerPart14,
    serializerPart15,
    serializerPart16,
    serializerPart17,
    serializerPart18,
    serializerPart19,
    serializerPart20,
    serializerPart21,
    serializerPart22,
    serializerPart23,
    serializerPart24,
    serializerPart25,
    serializerPart26,
    serializerPart27,
    serializerPart28,
    serializerPart29,
    serializerPart30,
    serializerPart31,
    build,
)

open class ClassKSerializer32<T, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R30, R31, R32>(
    private val descriptorName: String,
    private val serializerPart1: Property<T, R1>,
    private val serializerPart2: Property<T, R2>,
    private val serializerPart3: Property<T, R3>,
    private val serializerPart4: Property<T, R4>,
    private val serializerPart5: Property<T, R5>,
    private val serializerPart6: Property<T, R6>,
    private val serializerPart7: Property<T, R7>,
    private val serializerPart8: Property<T, R8>,
    private val serializerPart9: Property<T, R9>,
    private val serializerPart10: Property<T, R10>,
    private val serializerPart11: Property<T, R11>,
    private val serializerPart12: Property<T, R12>,
    private val serializerPart13: Property<T, R13>,
    private val serializerPart14: Property<T, R14>,
    private val serializerPart15: Property<T, R15>,
    private val serializerPart16: Property<T, R16>,
    private val serializerPart17: Property<T, R17>,
    private val serializerPart18: Property<T, R18>,
    private val serializerPart19: Property<T, R19>,
    private val serializerPart20: Property<T, R20>,
    private val serializerPart21: Property<T, R21>,
    private val serializerPart22: Property<T, R22>,
    private val serializerPart23: Property<T, R23>,
    private val serializerPart24: Property<T, R24>,
    private val serializerPart25: Property<T, R25>,
    private val serializerPart26: Property<T, R26>,
    private val serializerPart27: Property<T, R27>,
    private val serializerPart28: Property<T, R28>,
    private val serializerPart29: Property<T, R29>,
    private val serializerPart30: Property<T, R30>,
    private val serializerPart31: Property<T, R31>,
    private val serializerPart32: Property<T, R32>,
    private val build: (R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R30, R31, R32) -> T,
) : KSerializer<T> {
    final override val descriptor: SerialDescriptor = buildClassSerialDescriptor(descriptorName) {
        element(serializerPart1.name, serializerPart1.serializer.descriptor)
        element(serializerPart2.name, serializerPart2.serializer.descriptor)
        element(serializerPart3.name, serializerPart3.serializer.descriptor)
        element(serializerPart4.name, serializerPart4.serializer.descriptor)
        element(serializerPart5.name, serializerPart5.serializer.descriptor)
        element(serializerPart6.name, serializerPart6.serializer.descriptor)
        element(serializerPart7.name, serializerPart7.serializer.descriptor)
        element(serializerPart8.name, serializerPart8.serializer.descriptor)
        element(serializerPart9.name, serializerPart9.serializer.descriptor)
        element(serializerPart10.name, serializerPart10.serializer.descriptor)
        element(serializerPart11.name, serializerPart11.serializer.descriptor)
        element(serializerPart12.name, serializerPart12.serializer.descriptor)
        element(serializerPart13.name, serializerPart13.serializer.descriptor)
        element(serializerPart14.name, serializerPart14.serializer.descriptor)
        element(serializerPart15.name, serializerPart15.serializer.descriptor)
        element(serializerPart16.name, serializerPart16.serializer.descriptor)
        element(serializerPart17.name, serializerPart17.serializer.descriptor)
        element(serializerPart18.name, serializerPart18.serializer.descriptor)
        element(serializerPart19.name, serializerPart19.serializer.descriptor)
        element(serializerPart20.name, serializerPart20.serializer.descriptor)
        element(serializerPart21.name, serializerPart21.serializer.descriptor)
        element(serializerPart22.name, serializerPart22.serializer.descriptor)
        element(serializerPart23.name, serializerPart23.serializer.descriptor)
        element(serializerPart24.name, serializerPart24.serializer.descriptor)
        element(serializerPart25.name, serializerPart25.serializer.descriptor)
        element(serializerPart26.name, serializerPart26.serializer.descriptor)
        element(serializerPart27.name, serializerPart27.serializer.descriptor)
        element(serializerPart28.name, serializerPart28.serializer.descriptor)
        element(serializerPart29.name, serializerPart29.serializer.descriptor)
        element(serializerPart30.name, serializerPart30.serializer.descriptor)
        element(serializerPart31.name, serializerPart31.serializer.descriptor)
        element(serializerPart32.name, serializerPart32.serializer.descriptor)
    }

    final override fun serialize(encoder: Encoder, value: T) = encoder.encodeStructure(descriptor) {
        encodeSerializableElement(descriptor, 0, serializerPart1.serializer, serializerPart1.generator(value))
        encodeSerializableElement(descriptor, 1, serializerPart2.serializer, serializerPart2.generator(value))
        encodeSerializableElement(descriptor, 2, serializerPart3.serializer, serializerPart3.generator(value))
        encodeSerializableElement(descriptor, 3, serializerPart4.serializer, serializerPart4.generator(value))
        encodeSerializableElement(descriptor, 4, serializerPart5.serializer, serializerPart5.generator(value))
        encodeSerializableElement(descriptor, 5, serializerPart6.serializer, serializerPart6.generator(value))
        encodeSerializableElement(descriptor, 6, serializerPart7.serializer, serializerPart7.generator(value))
        encodeSerializableElement(descriptor, 7, serializerPart8.serializer, serializerPart8.generator(value))
        encodeSerializableElement(descriptor, 8, serializerPart9.serializer, serializerPart9.generator(value))
        encodeSerializableElement(descriptor, 9, serializerPart10.serializer, serializerPart10.generator(value))
        encodeSerializableElement(descriptor, 10, serializerPart11.serializer, serializerPart11.generator(value))
        encodeSerializableElement(descriptor, 11, serializerPart12.serializer, serializerPart12.generator(value))
        encodeSerializableElement(descriptor, 12, serializerPart13.serializer, serializerPart13.generator(value))
        encodeSerializableElement(descriptor, 13, serializerPart14.serializer, serializerPart14.generator(value))
        encodeSerializableElement(descriptor, 14, serializerPart15.serializer, serializerPart15.generator(value))
        encodeSerializableElement(descriptor, 15, serializerPart16.serializer, serializerPart16.generator(value))
        encodeSerializableElement(descriptor, 16, serializerPart17.serializer, serializerPart17.generator(value))
        encodeSerializableElement(descriptor, 17, serializerPart18.serializer, serializerPart18.generator(value))
        encodeSerializableElement(descriptor, 18, serializerPart19.serializer, serializerPart19.generator(value))
        encodeSerializableElement(descriptor, 19, serializerPart20.serializer, serializerPart20.generator(value))
        encodeSerializableElement(descriptor, 20, serializerPart21.serializer, serializerPart21.generator(value))
        encodeSerializableElement(descriptor, 21, serializerPart22.serializer, serializerPart22.generator(value))
        encodeSerializableElement(descriptor, 22, serializerPart23.serializer, serializerPart23.generator(value))
        encodeSerializableElement(descriptor, 23, serializerPart24.serializer, serializerPart24.generator(value))
        encodeSerializableElement(descriptor, 24, serializerPart25.serializer, serializerPart25.generator(value))
        encodeSerializableElement(descriptor, 25, serializerPart26.serializer, serializerPart26.generator(value))
        encodeSerializableElement(descriptor, 26, serializerPart27.serializer, serializerPart27.generator(value))
        encodeSerializableElement(descriptor, 27, serializerPart28.serializer, serializerPart28.generator(value))
        encodeSerializableElement(descriptor, 28, serializerPart29.serializer, serializerPart29.generator(value))
        encodeSerializableElement(descriptor, 29, serializerPart30.serializer, serializerPart30.generator(value))
        encodeSerializableElement(descriptor, 30, serializerPart31.serializer, serializerPart31.generator(value))
        encodeSerializableElement(descriptor, 31, serializerPart32.serializer, serializerPart32.generator(value))
    }

    @OptIn(ExperimentalSerializationApi::class)
    final override fun deserialize(decoder: Decoder): T = decoder.decodeStructure(descriptor) {
        if (decodeSequentially()) {
            build(
                decodeSerializableElement(descriptor, 0, serializerPart1.serializer),
                decodeSerializableElement(descriptor, 1, serializerPart2.serializer),
                decodeSerializableElement(descriptor, 2, serializerPart3.serializer),
                decodeSerializableElement(descriptor, 3, serializerPart4.serializer),
                decodeSerializableElement(descriptor, 4, serializerPart5.serializer),
                decodeSerializableElement(descriptor, 5, serializerPart6.serializer),
                decodeSerializableElement(descriptor, 6, serializerPart7.serializer),
                decodeSerializableElement(descriptor, 7, serializerPart8.serializer),
                decodeSerializableElement(descriptor, 8, serializerPart9.serializer),
                decodeSerializableElement(descriptor, 9, serializerPart10.serializer),
                decodeSerializableElement(descriptor, 10, serializerPart11.serializer),
                decodeSerializableElement(descriptor, 11, serializerPart12.serializer),
                decodeSerializableElement(descriptor, 12, serializerPart13.serializer),
                decodeSerializableElement(descriptor, 13, serializerPart14.serializer),
                decodeSerializableElement(descriptor, 14, serializerPart15.serializer),
                decodeSerializableElement(descriptor, 15, serializerPart16.serializer),
                decodeSerializableElement(descriptor, 16, serializerPart17.serializer),
                decodeSerializableElement(descriptor, 17, serializerPart18.serializer),
                decodeSerializableElement(descriptor, 18, serializerPart19.serializer),
                decodeSerializableElement(descriptor, 19, serializerPart20.serializer),
                decodeSerializableElement(descriptor, 20, serializerPart21.serializer),
                decodeSerializableElement(descriptor, 21, serializerPart22.serializer),
                decodeSerializableElement(descriptor, 22, serializerPart23.serializer),
                decodeSerializableElement(descriptor, 23, serializerPart24.serializer),
                decodeSerializableElement(descriptor, 24, serializerPart25.serializer),
                decodeSerializableElement(descriptor, 25, serializerPart26.serializer),
                decodeSerializableElement(descriptor, 26, serializerPart27.serializer),
                decodeSerializableElement(descriptor, 27, serializerPart28.serializer),
                decodeSerializableElement(descriptor, 28, serializerPart29.serializer),
                decodeSerializableElement(descriptor, 29, serializerPart30.serializer),
                decodeSerializableElement(descriptor, 30, serializerPart31.serializer),
                decodeSerializableElement(descriptor, 31, serializerPart32.serializer),
            )
        } else {
            var value1: R1? = null
            var value2: R2? = null
            var value3: R3? = null
            var value4: R4? = null
            var value5: R5? = null
            var value6: R6? = null
            var value7: R7? = null
            var value8: R8? = null
            var value9: R9? = null
            var value10: R10? = null
            var value11: R11? = null
            var value12: R12? = null
            var value13: R13? = null
            var value14: R14? = null
            var value15: R15? = null
            var value16: R16? = null
            var value17: R17? = null
            var value18: R18? = null
            var value19: R19? = null
            var value20: R20? = null
            var value21: R21? = null
            var value22: R22? = null
            var value23: R23? = null
            var value24: R24? = null
            var value25: R25? = null
            var value26: R26? = null
            var value27: R27? = null
            var value28: R28? = null
            var value29: R29? = null
            var value30: R30? = null
            var value31: R31? = null
            var value32: R32? = null
            while (true) {
                when (val index = decodeElementIndex(descriptor)) {
                    0 -> value1 = decodeSerializableElement(descriptor, 0, serializerPart1.serializer)
                    1 -> value2 = decodeSerializableElement(descriptor, 1, serializerPart2.serializer)
                    2 -> value3 = decodeSerializableElement(descriptor, 2, serializerPart3.serializer)
                    3 -> value4 = decodeSerializableElement(descriptor, 3, serializerPart4.serializer)
                    4 -> value5 = decodeSerializableElement(descriptor, 4, serializerPart5.serializer)
                    5 -> value6 = decodeSerializableElement(descriptor, 5, serializerPart6.serializer)
                    6 -> value7 = decodeSerializableElement(descriptor, 6, serializerPart7.serializer)
                    7 -> value8 = decodeSerializableElement(descriptor, 7, serializerPart8.serializer)
                    8 -> value9 = decodeSerializableElement(descriptor, 8, serializerPart9.serializer)
                    9 -> value10 = decodeSerializableElement(descriptor, 9, serializerPart10.serializer)
                    10 -> value11 = decodeSerializableElement(descriptor, 10, serializerPart11.serializer)
                    11 -> value12 = decodeSerializableElement(descriptor, 11, serializerPart12.serializer)
                    12 -> value13 = decodeSerializableElement(descriptor, 12, serializerPart13.serializer)
                    13 -> value14 = decodeSerializableElement(descriptor, 13, serializerPart14.serializer)
                    14 -> value15 = decodeSerializableElement(descriptor, 14, serializerPart15.serializer)
                    15 -> value16 = decodeSerializableElement(descriptor, 15, serializerPart16.serializer)
                    16 -> value17 = decodeSerializableElement(descriptor, 16, serializerPart17.serializer)
                    17 -> value18 = decodeSerializableElement(descriptor, 17, serializerPart18.serializer)
                    18 -> value19 = decodeSerializableElement(descriptor, 18, serializerPart19.serializer)
                    19 -> value20 = decodeSerializableElement(descriptor, 19, serializerPart20.serializer)
                    20 -> value21 = decodeSerializableElement(descriptor, 20, serializerPart21.serializer)
                    21 -> value22 = decodeSerializableElement(descriptor, 21, serializerPart22.serializer)
                    22 -> value23 = decodeSerializableElement(descriptor, 22, serializerPart23.serializer)
                    23 -> value24 = decodeSerializableElement(descriptor, 23, serializerPart24.serializer)
                    24 -> value25 = decodeSerializableElement(descriptor, 24, serializerPart25.serializer)
                    25 -> value26 = decodeSerializableElement(descriptor, 25, serializerPart26.serializer)
                    26 -> value27 = decodeSerializableElement(descriptor, 26, serializerPart27.serializer)
                    27 -> value28 = decodeSerializableElement(descriptor, 27, serializerPart28.serializer)
                    28 -> value29 = decodeSerializableElement(descriptor, 28, serializerPart29.serializer)
                    29 -> value30 = decodeSerializableElement(descriptor, 29, serializerPart30.serializer)
                    30 -> value31 = decodeSerializableElement(descriptor, 30, serializerPart31.serializer)
                    31 -> value32 = decodeSerializableElement(descriptor, 31, serializerPart32.serializer)
                    CompositeDecoder.DECODE_DONE -> break
                    else -> error("Unexpected index: $index")
                }
            }
            return@decodeStructure build(
                value1 ?: error("Absent field: ${serializerPart1.name}"),
                value2 ?: error("Absent field: ${serializerPart2.name}"),
                value3 ?: error("Absent field: ${serializerPart3.name}"),
                value4 ?: error("Absent field: ${serializerPart4.name}"),
                value5 ?: error("Absent field: ${serializerPart5.name}"),
                value6 ?: error("Absent field: ${serializerPart6.name}"),
                value7 ?: error("Absent field: ${serializerPart7.name}"),
                value8 ?: error("Absent field: ${serializerPart8.name}"),
                value9 ?: error("Absent field: ${serializerPart9.name}"),
                value10 ?: error("Absent field: ${serializerPart10.name}"),
                value11 ?: error("Absent field: ${serializerPart11.name}"),
                value12 ?: error("Absent field: ${serializerPart12.name}"),
                value13 ?: error("Absent field: ${serializerPart13.name}"),
                value14 ?: error("Absent field: ${serializerPart14.name}"),
                value15 ?: error("Absent field: ${serializerPart15.name}"),
                value16 ?: error("Absent field: ${serializerPart16.name}"),
                value17 ?: error("Absent field: ${serializerPart17.name}"),
                value18 ?: error("Absent field: ${serializerPart18.name}"),
                value19 ?: error("Absent field: ${serializerPart19.name}"),
                value20 ?: error("Absent field: ${serializerPart20.name}"),
                value21 ?: error("Absent field: ${serializerPart21.name}"),
                value22 ?: error("Absent field: ${serializerPart22.name}"),
                value23 ?: error("Absent field: ${serializerPart23.name}"),
                value24 ?: error("Absent field: ${serializerPart24.name}"),
                value25 ?: error("Absent field: ${serializerPart25.name}"),
                value26 ?: error("Absent field: ${serializerPart26.name}"),
                value27 ?: error("Absent field: ${serializerPart27.name}"),
                value28 ?: error("Absent field: ${serializerPart28.name}"),
                value29 ?: error("Absent field: ${serializerPart29.name}"),
                value30 ?: error("Absent field: ${serializerPart30.name}"),
                value31 ?: error("Absent field: ${serializerPart31.name}"),
                value32 ?: error("Absent field: ${serializerPart32.name}"),
            )
        }
    }
}

fun <T, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R30, R31, R32> classSerializer(
    descriptorName: String,
    serializerPart1: Property<T, R1>,
    serializerPart2: Property<T, R2>,
    serializerPart3: Property<T, R3>,
    serializerPart4: Property<T, R4>,
    serializerPart5: Property<T, R5>,
    serializerPart6: Property<T, R6>,
    serializerPart7: Property<T, R7>,
    serializerPart8: Property<T, R8>,
    serializerPart9: Property<T, R9>,
    serializerPart10: Property<T, R10>,
    serializerPart11: Property<T, R11>,
    serializerPart12: Property<T, R12>,
    serializerPart13: Property<T, R13>,
    serializerPart14: Property<T, R14>,
    serializerPart15: Property<T, R15>,
    serializerPart16: Property<T, R16>,
    serializerPart17: Property<T, R17>,
    serializerPart18: Property<T, R18>,
    serializerPart19: Property<T, R19>,
    serializerPart20: Property<T, R20>,
    serializerPart21: Property<T, R21>,
    serializerPart22: Property<T, R22>,
    serializerPart23: Property<T, R23>,
    serializerPart24: Property<T, R24>,
    serializerPart25: Property<T, R25>,
    serializerPart26: Property<T, R26>,
    serializerPart27: Property<T, R27>,
    serializerPart28: Property<T, R28>,
    serializerPart29: Property<T, R29>,
    serializerPart30: Property<T, R30>,
    serializerPart31: Property<T, R31>,
    serializerPart32: Property<T, R32>,
    build: (R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R30, R31, R32) -> T,
) : KSerializer<T> = ClassKSerializer32(
    descriptorName,
    serializerPart1,
    serializerPart2,
    serializerPart3,
    serializerPart4,
    serializerPart5,
    serializerPart6,
    serializerPart7,
    serializerPart8,
    serializerPart9,
    serializerPart10,
    serializerPart11,
    serializerPart12,
    serializerPart13,
    serializerPart14,
    serializerPart15,
    serializerPart16,
    serializerPart17,
    serializerPart18,
    serializerPart19,
    serializerPart20,
    serializerPart21,
    serializerPart22,
    serializerPart23,
    serializerPart24,
    serializerPart25,
    serializerPart26,
    serializerPart27,
    serializerPart28,
    serializerPart29,
    serializerPart30,
    serializerPart31,
    serializerPart32,
    build,
)
